
lcd_test_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005580  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005640  08005640  00015640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056ac  080056ac  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080056ac  080056ac  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080056ac  080056ac  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056ac  080056ac  000156ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056b0  080056b0  000156b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080056b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  20000010  080056c4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  080056c4  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114a7  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002261  00000000  00000000  000314df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f20  00000000  00000000  00033740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  00034660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d18  00000000  00000000  000354a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000126f3  00000000  00000000  000381c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006305d  00000000  00000000  0004a8b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ad910  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036f8  00000000  00000000  000ad960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005628 	.word	0x08005628

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005628 	.word	0x08005628

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <_Z28cyrillic_characters_encodingPc>:
#include "lcd_i2c_lib.hpp"

uint8_t addr { };
uint8_t lcd_i2c_state { };

char *cyrillic_characters_encoding(char *cyrillic_character) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	if (*cyrillic_character == 'À') {
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2bc0      	cmp	r3, #192	; 0xc0
 800022e:	d103      	bne.n	8000238 <_Z28cyrillic_characters_encodingPc+0x18>
		*cyrillic_character = 'A';
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2241      	movs	r2, #65	; 0x41
 8000234:	701a      	strb	r2, [r3, #0]
 8000236:	e1de      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'à') {
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2be0      	cmp	r3, #224	; 0xe0
 800023e:	d103      	bne.n	8000248 <_Z28cyrillic_characters_encodingPc+0x28>
		*cyrillic_character = 'a';
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2261      	movs	r2, #97	; 0x61
 8000244:	701a      	strb	r2, [r3, #0]
 8000246:	e1d6      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Á') {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	781b      	ldrb	r3, [r3, #0]
 800024c:	2bc1      	cmp	r3, #193	; 0xc1
 800024e:	d103      	bne.n	8000258 <_Z28cyrillic_characters_encodingPc+0x38>
		*cyrillic_character = 0b10100000;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	22a0      	movs	r2, #160	; 0xa0
 8000254:	701a      	strb	r2, [r3, #0]
 8000256:	e1ce      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'á') {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2be1      	cmp	r3, #225	; 0xe1
 800025e:	d103      	bne.n	8000268 <_Z28cyrillic_characters_encodingPc+0x48>
		*cyrillic_character = 0b10110010;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	22b2      	movs	r2, #178	; 0xb2
 8000264:	701a      	strb	r2, [r3, #0]
 8000266:	e1c6      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Â') {
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	2bc2      	cmp	r3, #194	; 0xc2
 800026e:	d103      	bne.n	8000278 <_Z28cyrillic_characters_encodingPc+0x58>
		*cyrillic_character = 'B';
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	2242      	movs	r2, #66	; 0x42
 8000274:	701a      	strb	r2, [r3, #0]
 8000276:	e1be      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'â') {
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	2be2      	cmp	r3, #226	; 0xe2
 800027e:	d103      	bne.n	8000288 <_Z28cyrillic_characters_encodingPc+0x68>
		*cyrillic_character = 0b10110011;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	22b3      	movs	r2, #179	; 0xb3
 8000284:	701a      	strb	r2, [r3, #0]
 8000286:	e1b6      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ã') {
 8000288:	687b      	ldr	r3, [r7, #4]
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2bc3      	cmp	r3, #195	; 0xc3
 800028e:	d103      	bne.n	8000298 <_Z28cyrillic_characters_encodingPc+0x78>
		*cyrillic_character = 0b10100001;
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	22a1      	movs	r2, #161	; 0xa1
 8000294:	701a      	strb	r2, [r3, #0]
 8000296:	e1ae      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ã') {
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	781b      	ldrb	r3, [r3, #0]
 800029c:	2be3      	cmp	r3, #227	; 0xe3
 800029e:	d103      	bne.n	80002a8 <_Z28cyrillic_characters_encodingPc+0x88>
		*cyrillic_character = 0b10110100;
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	22b4      	movs	r2, #180	; 0xb4
 80002a4:	701a      	strb	r2, [r3, #0]
 80002a6:	e1a6      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ä') {
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2bc4      	cmp	r3, #196	; 0xc4
 80002ae:	d103      	bne.n	80002b8 <_Z28cyrillic_characters_encodingPc+0x98>
		*cyrillic_character = 0b11100000;
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	22e0      	movs	r2, #224	; 0xe0
 80002b4:	701a      	strb	r2, [r3, #0]
 80002b6:	e19e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ä') {
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2be4      	cmp	r3, #228	; 0xe4
 80002be:	d103      	bne.n	80002c8 <_Z28cyrillic_characters_encodingPc+0xa8>
		*cyrillic_character = 0b11100011;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	22e3      	movs	r2, #227	; 0xe3
 80002c4:	701a      	strb	r2, [r3, #0]
 80002c6:	e196      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Å') {
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2bc5      	cmp	r3, #197	; 0xc5
 80002ce:	d103      	bne.n	80002d8 <_Z28cyrillic_characters_encodingPc+0xb8>
		*cyrillic_character = 'E';
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	2245      	movs	r2, #69	; 0x45
 80002d4:	701a      	strb	r2, [r3, #0]
 80002d6:	e18e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'å') {
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	2be5      	cmp	r3, #229	; 0xe5
 80002de:	d103      	bne.n	80002e8 <_Z28cyrillic_characters_encodingPc+0xc8>
		*cyrillic_character = 'e';
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	2265      	movs	r2, #101	; 0x65
 80002e4:	701a      	strb	r2, [r3, #0]
 80002e6:	e186      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Æ') {
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2bc6      	cmp	r3, #198	; 0xc6
 80002ee:	d103      	bne.n	80002f8 <_Z28cyrillic_characters_encodingPc+0xd8>
		*cyrillic_character = 0b10100011;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	22a3      	movs	r2, #163	; 0xa3
 80002f4:	701a      	strb	r2, [r3, #0]
 80002f6:	e17e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'æ') {
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	781b      	ldrb	r3, [r3, #0]
 80002fc:	2be6      	cmp	r3, #230	; 0xe6
 80002fe:	d103      	bne.n	8000308 <_Z28cyrillic_characters_encodingPc+0xe8>
		*cyrillic_character = 0b10110110;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	22b6      	movs	r2, #182	; 0xb6
 8000304:	701a      	strb	r2, [r3, #0]
 8000306:	e176      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ç') {
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2bc7      	cmp	r3, #199	; 0xc7
 800030e:	d103      	bne.n	8000318 <_Z28cyrillic_characters_encodingPc+0xf8>
		*cyrillic_character = 0b10100100;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	22a4      	movs	r2, #164	; 0xa4
 8000314:	701a      	strb	r2, [r3, #0]
 8000316:	e16e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ç') {
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	2be7      	cmp	r3, #231	; 0xe7
 800031e:	d103      	bne.n	8000328 <_Z28cyrillic_characters_encodingPc+0x108>
		*cyrillic_character = 0b10110111;
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	22b7      	movs	r2, #183	; 0xb7
 8000324:	701a      	strb	r2, [r3, #0]
 8000326:	e166      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'È') {
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	781b      	ldrb	r3, [r3, #0]
 800032c:	2bc8      	cmp	r3, #200	; 0xc8
 800032e:	d103      	bne.n	8000338 <_Z28cyrillic_characters_encodingPc+0x118>
		*cyrillic_character = 0b10100101;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	22a5      	movs	r2, #165	; 0xa5
 8000334:	701a      	strb	r2, [r3, #0]
 8000336:	e15e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'è') {
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2be8      	cmp	r3, #232	; 0xe8
 800033e:	d103      	bne.n	8000348 <_Z28cyrillic_characters_encodingPc+0x128>
		*cyrillic_character = 0b10111000;
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	22b8      	movs	r2, #184	; 0xb8
 8000344:	701a      	strb	r2, [r3, #0]
 8000346:	e156      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'É') {
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2bc9      	cmp	r3, #201	; 0xc9
 800034e:	d103      	bne.n	8000358 <_Z28cyrillic_characters_encodingPc+0x138>
		*cyrillic_character = 0b10100110;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	22a6      	movs	r2, #166	; 0xa6
 8000354:	701a      	strb	r2, [r3, #0]
 8000356:	e14e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'é') {
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2be9      	cmp	r3, #233	; 0xe9
 800035e:	d103      	bne.n	8000368 <_Z28cyrillic_characters_encodingPc+0x148>
		*cyrillic_character = 0b10111001;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	22b9      	movs	r2, #185	; 0xb9
 8000364:	701a      	strb	r2, [r3, #0]
 8000366:	e146      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ê') {
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	2bca      	cmp	r3, #202	; 0xca
 800036e:	d103      	bne.n	8000378 <_Z28cyrillic_characters_encodingPc+0x158>
		*cyrillic_character = 'K';
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	224b      	movs	r2, #75	; 0x4b
 8000374:	701a      	strb	r2, [r3, #0]
 8000376:	e13e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ê') {
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2bea      	cmp	r3, #234	; 0xea
 800037e:	d103      	bne.n	8000388 <_Z28cyrillic_characters_encodingPc+0x168>
		*cyrillic_character = 0b10111010;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	22ba      	movs	r2, #186	; 0xba
 8000384:	701a      	strb	r2, [r3, #0]
 8000386:	e136      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ë') {
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2bcb      	cmp	r3, #203	; 0xcb
 800038e:	d103      	bne.n	8000398 <_Z28cyrillic_characters_encodingPc+0x178>
		*cyrillic_character = 0b10100111;
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	22a7      	movs	r2, #167	; 0xa7
 8000394:	701a      	strb	r2, [r3, #0]
 8000396:	e12e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ë') {
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2beb      	cmp	r3, #235	; 0xeb
 800039e:	d103      	bne.n	80003a8 <_Z28cyrillic_characters_encodingPc+0x188>
		*cyrillic_character = 0b10111011;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	22bb      	movs	r2, #187	; 0xbb
 80003a4:	701a      	strb	r2, [r3, #0]
 80003a6:	e126      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ì') {
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	781b      	ldrb	r3, [r3, #0]
 80003ac:	2bcc      	cmp	r3, #204	; 0xcc
 80003ae:	d103      	bne.n	80003b8 <_Z28cyrillic_characters_encodingPc+0x198>
		*cyrillic_character = 'M';
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	224d      	movs	r2, #77	; 0x4d
 80003b4:	701a      	strb	r2, [r3, #0]
 80003b6:	e11e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ì') {
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2bec      	cmp	r3, #236	; 0xec
 80003be:	d103      	bne.n	80003c8 <_Z28cyrillic_characters_encodingPc+0x1a8>
		*cyrillic_character = 0b10111100;
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	22bc      	movs	r2, #188	; 0xbc
 80003c4:	701a      	strb	r2, [r3, #0]
 80003c6:	e116      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Í') {
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	781b      	ldrb	r3, [r3, #0]
 80003cc:	2bcd      	cmp	r3, #205	; 0xcd
 80003ce:	d103      	bne.n	80003d8 <_Z28cyrillic_characters_encodingPc+0x1b8>
		*cyrillic_character = 'H';
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	2248      	movs	r2, #72	; 0x48
 80003d4:	701a      	strb	r2, [r3, #0]
 80003d6:	e10e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'í') {
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	2bed      	cmp	r3, #237	; 0xed
 80003de:	d103      	bne.n	80003e8 <_Z28cyrillic_characters_encodingPc+0x1c8>
		*cyrillic_character = 0b10111101;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	22bd      	movs	r2, #189	; 0xbd
 80003e4:	701a      	strb	r2, [r3, #0]
 80003e6:	e106      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Î') {
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2bce      	cmp	r3, #206	; 0xce
 80003ee:	d103      	bne.n	80003f8 <_Z28cyrillic_characters_encodingPc+0x1d8>
		*cyrillic_character = 'O';
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	224f      	movs	r2, #79	; 0x4f
 80003f4:	701a      	strb	r2, [r3, #0]
 80003f6:	e0fe      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'î') {
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2bee      	cmp	r3, #238	; 0xee
 80003fe:	d103      	bne.n	8000408 <_Z28cyrillic_characters_encodingPc+0x1e8>
		*cyrillic_character = 'o';
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	226f      	movs	r2, #111	; 0x6f
 8000404:	701a      	strb	r2, [r3, #0]
 8000406:	e0f6      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ï') {
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	781b      	ldrb	r3, [r3, #0]
 800040c:	2bcf      	cmp	r3, #207	; 0xcf
 800040e:	d103      	bne.n	8000418 <_Z28cyrillic_characters_encodingPc+0x1f8>
		*cyrillic_character = 0b10101000;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	22a8      	movs	r2, #168	; 0xa8
 8000414:	701a      	strb	r2, [r3, #0]
 8000416:	e0ee      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ï') {
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	2bef      	cmp	r3, #239	; 0xef
 800041e:	d103      	bne.n	8000428 <_Z28cyrillic_characters_encodingPc+0x208>
		*cyrillic_character = 0b10111110;
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	22be      	movs	r2, #190	; 0xbe
 8000424:	701a      	strb	r2, [r3, #0]
 8000426:	e0e6      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ð') {
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2bd0      	cmp	r3, #208	; 0xd0
 800042e:	d103      	bne.n	8000438 <_Z28cyrillic_characters_encodingPc+0x218>
		*cyrillic_character = 'P';
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	2250      	movs	r2, #80	; 0x50
 8000434:	701a      	strb	r2, [r3, #0]
 8000436:	e0de      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ð') {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2bf0      	cmp	r3, #240	; 0xf0
 800043e:	d103      	bne.n	8000448 <_Z28cyrillic_characters_encodingPc+0x228>
		*cyrillic_character = 'p';
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	2270      	movs	r2, #112	; 0x70
 8000444:	701a      	strb	r2, [r3, #0]
 8000446:	e0d6      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ñ') {
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	781b      	ldrb	r3, [r3, #0]
 800044c:	2bd1      	cmp	r3, #209	; 0xd1
 800044e:	d103      	bne.n	8000458 <_Z28cyrillic_characters_encodingPc+0x238>
		*cyrillic_character = 'C';
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	2243      	movs	r2, #67	; 0x43
 8000454:	701a      	strb	r2, [r3, #0]
 8000456:	e0ce      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ñ') {
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	2bf1      	cmp	r3, #241	; 0xf1
 800045e:	d103      	bne.n	8000468 <_Z28cyrillic_characters_encodingPc+0x248>
		*cyrillic_character = 'c';
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	2263      	movs	r2, #99	; 0x63
 8000464:	701a      	strb	r2, [r3, #0]
 8000466:	e0c6      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ò') {
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2bd2      	cmp	r3, #210	; 0xd2
 800046e:	d103      	bne.n	8000478 <_Z28cyrillic_characters_encodingPc+0x258>
		*cyrillic_character = 'T';
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2254      	movs	r2, #84	; 0x54
 8000474:	701a      	strb	r2, [r3, #0]
 8000476:	e0be      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ò') {
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	2bf2      	cmp	r3, #242	; 0xf2
 800047e:	d103      	bne.n	8000488 <_Z28cyrillic_characters_encodingPc+0x268>
		*cyrillic_character = 0b10111111;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	22bf      	movs	r2, #191	; 0xbf
 8000484:	701a      	strb	r2, [r3, #0]
 8000486:	e0b6      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ó') {
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	781b      	ldrb	r3, [r3, #0]
 800048c:	2bd3      	cmp	r3, #211	; 0xd3
 800048e:	d103      	bne.n	8000498 <_Z28cyrillic_characters_encodingPc+0x278>
		*cyrillic_character = 0b10101001;
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	22a9      	movs	r2, #169	; 0xa9
 8000494:	701a      	strb	r2, [r3, #0]
 8000496:	e0ae      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ó') {
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2bf3      	cmp	r3, #243	; 0xf3
 800049e:	d103      	bne.n	80004a8 <_Z28cyrillic_characters_encodingPc+0x288>
		*cyrillic_character = 'y';
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2279      	movs	r2, #121	; 0x79
 80004a4:	701a      	strb	r2, [r3, #0]
 80004a6:	e0a6      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ô') {
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	781b      	ldrb	r3, [r3, #0]
 80004ac:	2bd4      	cmp	r3, #212	; 0xd4
 80004ae:	d103      	bne.n	80004b8 <_Z28cyrillic_characters_encodingPc+0x298>
		*cyrillic_character = 0b10101010;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	22aa      	movs	r2, #170	; 0xaa
 80004b4:	701a      	strb	r2, [r3, #0]
 80004b6:	e09e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ô') {
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	781b      	ldrb	r3, [r3, #0]
 80004bc:	2bf4      	cmp	r3, #244	; 0xf4
 80004be:	d103      	bne.n	80004c8 <_Z28cyrillic_characters_encodingPc+0x2a8>
		*cyrillic_character = 0b11100100;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	22e4      	movs	r2, #228	; 0xe4
 80004c4:	701a      	strb	r2, [r3, #0]
 80004c6:	e096      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Õ') {
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2bd5      	cmp	r3, #213	; 0xd5
 80004ce:	d103      	bne.n	80004d8 <_Z28cyrillic_characters_encodingPc+0x2b8>
		*cyrillic_character = 'X';
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	2258      	movs	r2, #88	; 0x58
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	e08e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'õ') {
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2bf5      	cmp	r3, #245	; 0xf5
 80004de:	d103      	bne.n	80004e8 <_Z28cyrillic_characters_encodingPc+0x2c8>
		*cyrillic_character = 'x';
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	2278      	movs	r2, #120	; 0x78
 80004e4:	701a      	strb	r2, [r3, #0]
 80004e6:	e086      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ö') {
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2bd6      	cmp	r3, #214	; 0xd6
 80004ee:	d103      	bne.n	80004f8 <_Z28cyrillic_characters_encodingPc+0x2d8>
		*cyrillic_character = 0b11100001;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	22e1      	movs	r2, #225	; 0xe1
 80004f4:	701a      	strb	r2, [r3, #0]
 80004f6:	e07e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ö') {
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2bf6      	cmp	r3, #246	; 0xf6
 80004fe:	d103      	bne.n	8000508 <_Z28cyrillic_characters_encodingPc+0x2e8>
		*cyrillic_character = 0b11100101;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	22e5      	movs	r2, #229	; 0xe5
 8000504:	701a      	strb	r2, [r3, #0]
 8000506:	e076      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == '×') {
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2bd7      	cmp	r3, #215	; 0xd7
 800050e:	d103      	bne.n	8000518 <_Z28cyrillic_characters_encodingPc+0x2f8>
		*cyrillic_character = 0b10101011;
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	22ab      	movs	r2, #171	; 0xab
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	e06e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == '÷') {
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2bf7      	cmp	r3, #247	; 0xf7
 800051e:	d103      	bne.n	8000528 <_Z28cyrillic_characters_encodingPc+0x308>
		*cyrillic_character = 0b11000000;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	22c0      	movs	r2, #192	; 0xc0
 8000524:	701a      	strb	r2, [r3, #0]
 8000526:	e066      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ø') {
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2bd8      	cmp	r3, #216	; 0xd8
 800052e:	d103      	bne.n	8000538 <_Z28cyrillic_characters_encodingPc+0x318>
		*cyrillic_character = 0b10101100;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	22ac      	movs	r2, #172	; 0xac
 8000534:	701a      	strb	r2, [r3, #0]
 8000536:	e05e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ø') {
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	2bf8      	cmp	r3, #248	; 0xf8
 800053e:	d103      	bne.n	8000548 <_Z28cyrillic_characters_encodingPc+0x328>
		*cyrillic_character = 0b11000001;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	22c1      	movs	r2, #193	; 0xc1
 8000544:	701a      	strb	r2, [r3, #0]
 8000546:	e056      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ù') {
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	2bd9      	cmp	r3, #217	; 0xd9
 800054e:	d103      	bne.n	8000558 <_Z28cyrillic_characters_encodingPc+0x338>
		*cyrillic_character = 0b11100010;
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	22e2      	movs	r2, #226	; 0xe2
 8000554:	701a      	strb	r2, [r3, #0]
 8000556:	e04e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ù') {
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2bf9      	cmp	r3, #249	; 0xf9
 800055e:	d103      	bne.n	8000568 <_Z28cyrillic_characters_encodingPc+0x348>
		*cyrillic_character = 0b11100110;
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	22e6      	movs	r2, #230	; 0xe6
 8000564:	701a      	strb	r2, [r3, #0]
 8000566:	e046      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ú') {
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2bfa      	cmp	r3, #250	; 0xfa
 800056e:	d103      	bne.n	8000578 <_Z28cyrillic_characters_encodingPc+0x358>
		*cyrillic_character = 0b11000010;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	22c2      	movs	r2, #194	; 0xc2
 8000574:	701a      	strb	r2, [r3, #0]
 8000576:	e03e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'û') {
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	2bfb      	cmp	r3, #251	; 0xfb
 800057e:	d103      	bne.n	8000588 <_Z28cyrillic_characters_encodingPc+0x368>
		*cyrillic_character = 0b11000011;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	22c3      	movs	r2, #195	; 0xc3
 8000584:	701a      	strb	r2, [r3, #0]
 8000586:	e036      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ü') {
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	2bfc      	cmp	r3, #252	; 0xfc
 800058e:	d103      	bne.n	8000598 <_Z28cyrillic_characters_encodingPc+0x378>
		*cyrillic_character = 0b11000100;
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	22c4      	movs	r2, #196	; 0xc4
 8000594:	701a      	strb	r2, [r3, #0]
 8000596:	e02e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Ý') {
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2bdd      	cmp	r3, #221	; 0xdd
 800059e:	d103      	bne.n	80005a8 <_Z28cyrillic_characters_encodingPc+0x388>
		*cyrillic_character = 0b10101111;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	22af      	movs	r2, #175	; 0xaf
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	e026      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ý') {
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2bfd      	cmp	r3, #253	; 0xfd
 80005ae:	d103      	bne.n	80005b8 <_Z28cyrillic_characters_encodingPc+0x398>
		*cyrillic_character = 0b11000101;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	22c5      	movs	r2, #197	; 0xc5
 80005b4:	701a      	strb	r2, [r3, #0]
 80005b6:	e01e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'Þ') {
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2bde      	cmp	r3, #222	; 0xde
 80005be:	d103      	bne.n	80005c8 <_Z28cyrillic_characters_encodingPc+0x3a8>
		*cyrillic_character = 0b10110000;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	22b0      	movs	r2, #176	; 0xb0
 80005c4:	701a      	strb	r2, [r3, #0]
 80005c6:	e016      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'þ') {
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	2bfe      	cmp	r3, #254	; 0xfe
 80005ce:	d103      	bne.n	80005d8 <_Z28cyrillic_characters_encodingPc+0x3b8>
		*cyrillic_character = 0b11000110;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	22c6      	movs	r2, #198	; 0xc6
 80005d4:	701a      	strb	r2, [r3, #0]
 80005d6:	e00e      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ß') {
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2bdf      	cmp	r3, #223	; 0xdf
 80005de:	d103      	bne.n	80005e8 <_Z28cyrillic_characters_encodingPc+0x3c8>
		*cyrillic_character = 0b10110001;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	22b1      	movs	r2, #177	; 0xb1
 80005e4:	701a      	strb	r2, [r3, #0]
 80005e6:	e006      	b.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
	} else if (*cyrillic_character == 'ÿ') {
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2bff      	cmp	r3, #255	; 0xff
 80005ee:	d102      	bne.n	80005f6 <_Z28cyrillic_characters_encodingPc+0x3d6>
		*cyrillic_character = 0b11000111;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	22c7      	movs	r2, #199	; 0xc7
 80005f4:	701a      	strb	r2, [r3, #0]
	}

	return cyrillic_character;
 80005f6:	687b      	ldr	r3, [r7, #4]
}
 80005f8:	0018      	movs	r0, r3
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b002      	add	sp, #8
 80005fe:	bd80      	pop	{r7, pc}

08000600 <_Z13lcd_send_bitehhP19__I2C_HandleTypeDef>:
			i = 129;
		}
	}
}

void lcd_send_bite(uint8_t bite, uint8_t rs, I2C_HandleTypeDef *hi2c) {
 8000600:	b590      	push	{r4, r7, lr}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0
 8000606:	603a      	str	r2, [r7, #0]
 8000608:	1dfb      	adds	r3, r7, #7
 800060a:	1c02      	adds	r2, r0, #0
 800060c:	701a      	strb	r2, [r3, #0]
 800060e:	1dbb      	adds	r3, r7, #6
 8000610:	1c0a      	adds	r2, r1, #0
 8000612:	701a      	strb	r2, [r3, #0]
	uint8_t up = bite & 0xF0;
 8000614:	200f      	movs	r0, #15
 8000616:	183b      	adds	r3, r7, r0
 8000618:	1dfa      	adds	r2, r7, #7
 800061a:	7812      	ldrb	r2, [r2, #0]
 800061c:	210f      	movs	r1, #15
 800061e:	438a      	bics	r2, r1
 8000620:	701a      	strb	r2, [r3, #0]
	uint8_t lo = (bite << 4) & 0xF0;
 8000622:	1dfb      	adds	r3, r7, #7
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	011a      	lsls	r2, r3, #4
 8000628:	240e      	movs	r4, #14
 800062a:	193b      	adds	r3, r7, r4
 800062c:	701a      	strb	r2, [r3, #0]

	uint8_t data_arr[4] {};
 800062e:	2108      	movs	r1, #8
 8000630:	187b      	adds	r3, r7, r1
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]

	data_arr[0] = up | rs | LED | EN;
 8000636:	183a      	adds	r2, r7, r0
 8000638:	1dbb      	adds	r3, r7, #6
 800063a:	7812      	ldrb	r2, [r2, #0]
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	4313      	orrs	r3, r2
 8000640:	b2db      	uxtb	r3, r3
 8000642:	220c      	movs	r2, #12
 8000644:	4313      	orrs	r3, r2
 8000646:	b2da      	uxtb	r2, r3
 8000648:	187b      	adds	r3, r7, r1
 800064a:	701a      	strb	r2, [r3, #0]
	data_arr[1] = 0;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	705a      	strb	r2, [r3, #1]
	data_arr[2] = lo | rs | LED | EN;
 8000652:	193a      	adds	r2, r7, r4
 8000654:	1dbb      	adds	r3, r7, #6
 8000656:	7812      	ldrb	r2, [r2, #0]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4313      	orrs	r3, r2
 800065c:	b2db      	uxtb	r3, r3
 800065e:	220c      	movs	r2, #12
 8000660:	4313      	orrs	r3, r2
 8000662:	b2da      	uxtb	r2, r3
 8000664:	187b      	adds	r3, r7, r1
 8000666:	709a      	strb	r2, [r3, #2]
	data_arr[3] = 0;
 8000668:	187b      	adds	r3, r7, r1
 800066a:	2200      	movs	r2, #0
 800066c:	70da      	strb	r2, [r3, #3]

	lcd_i2c_state = 1;
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <_Z13lcd_send_bitehhP19__I2C_HandleTypeDef+0x94>)
 8000670:	2201      	movs	r2, #1
 8000672:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_DMA(hi2c, LCD_ADDR, data_arr, 4);
 8000674:	187a      	adds	r2, r7, r1
 8000676:	6838      	ldr	r0, [r7, #0]
 8000678:	2304      	movs	r3, #4
 800067a:	214e      	movs	r1, #78	; 0x4e
 800067c:	f001 fade 	bl	8001c3c <HAL_I2C_Master_Transmit_DMA>
	while (lcd_i2c_state == 1) {
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <_Z13lcd_send_bitehhP19__I2C_HandleTypeDef+0x94>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d100      	bne.n	800068a <_Z13lcd_send_bitehhP19__I2C_HandleTypeDef+0x8a>
 8000688:	e7fa      	b.n	8000680 <_Z13lcd_send_bitehhP19__I2C_HandleTypeDef+0x80>
	}
}
 800068a:	46c0      	nop			; (mov r8, r8)
 800068c:	46bd      	mov	sp, r7
 800068e:	b005      	add	sp, #20
 8000690:	bd90      	pop	{r4, r7, pc}
 8000692:	46c0      	nop			; (mov r8, r8)
 8000694:	2000002c 	.word	0x2000002c

08000698 <_Z15lcd_send_stringPchP19__I2C_HandleTypeDef>:
//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
void lcd_send_string(char *str,uint8_t cyrillic, I2C_HandleTypeDef *hi2c) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	60f8      	str	r0, [r7, #12]
 80006a0:	607a      	str	r2, [r7, #4]
 80006a2:	230b      	movs	r3, #11
 80006a4:	18fb      	adds	r3, r7, r3
 80006a6:	1c0a      	adds	r2, r1, #0
 80006a8:	701a      	strb	r2, [r3, #0]
	while (*str) {
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d017      	beq.n	80006e2 <_Z15lcd_send_stringPchP19__I2C_HandleTypeDef+0x4a>
		if (cyrillic == 1) {
 80006b2:	230b      	movs	r3, #11
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d107      	bne.n	80006cc <_Z15lcd_send_stringPchP19__I2C_HandleTypeDef+0x34>
			*str = *cyrillic_characters_encoding(&*str);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff fdae 	bl	8000220 <_Z28cyrillic_characters_encodingPc>
 80006c4:	0003      	movs	r3, r0
 80006c6:	781a      	ldrb	r2, [r3, #0]
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	701a      	strb	r2, [r3, #0]
		}
		lcd_send_bite((uint8_t) (*str), 1, hi2c);
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	687a      	ldr	r2, [r7, #4]
 80006d2:	2101      	movs	r1, #1
 80006d4:	0018      	movs	r0, r3
 80006d6:	f7ff ff93 	bl	8000600 <_Z13lcd_send_bitehhP19__I2C_HandleTypeDef>
		str++;
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	3301      	adds	r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80006e0:	e7e3      	b.n	80006aa <_Z15lcd_send_stringPchP19__I2C_HandleTypeDef+0x12>
	}
}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b004      	add	sp, #16
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <_Z14ddram_set_addrhP19__I2C_HandleTypeDef>:
	HAL_I2C_Master_Transmit_DMA(hi2c, LCD_ADDR, data_arr, 4);
	while (lcd_i2c_state == 1) {
	}
}

void ddram_set_addr(uint8_t ddram_addr, I2C_HandleTypeDef *hi2c) {
 80006ec:	b590      	push	{r4, r7, lr}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	0002      	movs	r2, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	701a      	strb	r2, [r3, #0]
	uint8_t up = (ddram_addr | 0x80) & 0xF0;
 80006fa:	1dfb      	adds	r3, r7, #7
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2270      	movs	r2, #112	; 0x70
 8000700:	4013      	ands	r3, r2
 8000702:	b2da      	uxtb	r2, r3
 8000704:	200f      	movs	r0, #15
 8000706:	183b      	adds	r3, r7, r0
 8000708:	2180      	movs	r1, #128	; 0x80
 800070a:	4249      	negs	r1, r1
 800070c:	430a      	orrs	r2, r1
 800070e:	701a      	strb	r2, [r3, #0]
	uint8_t lo = (ddram_addr << 4) & 0xF0;
 8000710:	1dfb      	adds	r3, r7, #7
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	011a      	lsls	r2, r3, #4
 8000716:	240e      	movs	r4, #14
 8000718:	193b      	adds	r3, r7, r4
 800071a:	701a      	strb	r2, [r3, #0]

	uint8_t data_arr[4]{};
 800071c:	2108      	movs	r1, #8
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]

	data_arr[0] = up | EN;
 8000724:	183b      	adds	r3, r7, r0
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2204      	movs	r2, #4
 800072a:	4313      	orrs	r3, r2
 800072c:	b2da      	uxtb	r2, r3
 800072e:	187b      	adds	r3, r7, r1
 8000730:	701a      	strb	r2, [r3, #0]
	data_arr[1] = 0;
 8000732:	187b      	adds	r3, r7, r1
 8000734:	2200      	movs	r2, #0
 8000736:	705a      	strb	r2, [r3, #1]
	data_arr[2] = lo | EN;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	2204      	movs	r2, #4
 800073e:	4313      	orrs	r3, r2
 8000740:	b2da      	uxtb	r2, r3
 8000742:	187b      	adds	r3, r7, r1
 8000744:	709a      	strb	r2, [r3, #2]
	data_arr[3] = 0;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	70da      	strb	r2, [r3, #3]

	lcd_i2c_state = 1;
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <_Z14ddram_set_addrhP19__I2C_HandleTypeDef+0x84>)
 800074e:	2201      	movs	r2, #1
 8000750:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_DMA(hi2c, LCD_ADDR, data_arr, 4);
 8000752:	187a      	adds	r2, r7, r1
 8000754:	6838      	ldr	r0, [r7, #0]
 8000756:	2304      	movs	r3, #4
 8000758:	214e      	movs	r1, #78	; 0x4e
 800075a:	f001 fa6f 	bl	8001c3c <HAL_I2C_Master_Transmit_DMA>
	while (lcd_i2c_state == 1) {
 800075e:	4b04      	ldr	r3, [pc, #16]	; (8000770 <_Z14ddram_set_addrhP19__I2C_HandleTypeDef+0x84>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b01      	cmp	r3, #1
 8000764:	d100      	bne.n	8000768 <_Z14ddram_set_addrhP19__I2C_HandleTypeDef+0x7c>
 8000766:	e7fa      	b.n	800075e <_Z14ddram_set_addrhP19__I2C_HandleTypeDef+0x72>
	}
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	b005      	add	sp, #20
 800076e:	bd90      	pop	{r4, r7, pc}
 8000770:	2000002c 	.word	0x2000002c

08000774 <_Z18lcd_initializationP19__I2C_HandleTypeDef>:

void lcd_initialization(I2C_HandleTypeDef *hi2c) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	HAL_Delay(50);
 800077c:	2032      	movs	r0, #50	; 0x32
 800077e:	f000 fd15 	bl	80011ac <HAL_Delay>

	lcd_send_bite(0b00110000, 0, hi2c);   // 8ìè áèòíûé èíòåðôåéñ
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	2030      	movs	r0, #48	; 0x30
 800078a:	f7ff ff39 	bl	8000600 <_Z13lcd_send_bitehhP19__I2C_HandleTypeDef>
	HAL_Delay(40);
 800078e:	2028      	movs	r0, #40	; 0x28
 8000790:	f000 fd0c 	bl	80011ac <HAL_Delay>

	lcd_send_bite(0b00000010, 0, hi2c);   // óñòàíîâêà êóðñîðà â íà÷àëå ñòðîêè
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	001a      	movs	r2, r3
 8000798:	2100      	movs	r1, #0
 800079a:	2002      	movs	r0, #2
 800079c:	f7ff ff30 	bl	8000600 <_Z13lcd_send_bitehhP19__I2C_HandleTypeDef>
	HAL_Delay(40);
 80007a0:	2028      	movs	r0, #40	; 0x28
 80007a2:	f000 fd03 	bl	80011ac <HAL_Delay>

	lcd_send_bite(0b00001100, 0, hi2c);   // íîðìàëüíûé ðåæèì ðàáîòû, âûêë êóðñîð
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	001a      	movs	r2, r3
 80007aa:	2100      	movs	r1, #0
 80007ac:	200c      	movs	r0, #12
 80007ae:	f7ff ff27 	bl	8000600 <_Z13lcd_send_bitehhP19__I2C_HandleTypeDef>
	HAL_Delay(40);
 80007b2:	2028      	movs	r0, #40	; 0x28
 80007b4:	f000 fcfa 	bl	80011ac <HAL_Delay>

	lcd_send_bite(0b00000001, 0, hi2c);   // î÷èñòêà äèñïëåÿ
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	001a      	movs	r2, r3
 80007bc:	2100      	movs	r1, #0
 80007be:	2001      	movs	r0, #1
 80007c0:	f7ff ff1e 	bl	8000600 <_Z13lcd_send_bitehhP19__I2C_HandleTypeDef>
	HAL_Delay(2);
 80007c4:	2002      	movs	r0, #2
 80007c6:	f000 fcf1 	bl	80011ac <HAL_Delay>
}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	46bd      	mov	sp, r7
 80007ce:	b002      	add	sp, #8
 80007d0:	bd80      	pop	{r7, pc}
	...

080007d4 <_Z16button_interrupth>:
	if ((GPIOA->IDR & (1 << pin)) == 0 && button_status[button_num] == 2) {
		button_status[button_num] = 0;
	}
}

void button_interrupt(uint8_t button_num) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	0002      	movs	r2, r0
 80007dc:	1dfb      	adds	r3, r7, #7
 80007de:	701a      	strb	r2, [r3, #0]
	if (debounce_count[button_num] < 5) {
 80007e0:	1dfb      	adds	r3, r7, #7
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	4a2d      	ldr	r2, [pc, #180]	; (800089c <_Z16button_interrupth+0xc8>)
 80007e6:	5cd3      	ldrb	r3, [r2, r3]
 80007e8:	2b04      	cmp	r3, #4
 80007ea:	d807      	bhi.n	80007fc <_Z16button_interrupth+0x28>
		++debounce_count[button_num];
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4a2a      	ldr	r2, [pc, #168]	; (800089c <_Z16button_interrupth+0xc8>)
 80007f2:	5cd2      	ldrb	r2, [r2, r3]
 80007f4:	3201      	adds	r2, #1
 80007f6:	b2d1      	uxtb	r1, r2
 80007f8:	4a28      	ldr	r2, [pc, #160]	; (800089c <_Z16button_interrupth+0xc8>)
 80007fa:	54d1      	strb	r1, [r2, r3]
	}

	if (debounce_count[button_num] == 5 && (GPIOA->IDR & (1 << button_num))) {
 80007fc:	1dfb      	adds	r3, r7, #7
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4a26      	ldr	r2, [pc, #152]	; (800089c <_Z16button_interrupth+0xc8>)
 8000802:	5cd3      	ldrb	r3, [r2, r3]
 8000804:	2b05      	cmp	r3, #5
 8000806:	d10b      	bne.n	8000820 <_Z16button_interrupth+0x4c>
 8000808:	2390      	movs	r3, #144	; 0x90
 800080a:	05db      	lsls	r3, r3, #23
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	1dfa      	adds	r2, r7, #7
 8000810:	7812      	ldrb	r2, [r2, #0]
 8000812:	2101      	movs	r1, #1
 8000814:	4091      	lsls	r1, r2
 8000816:	000a      	movs	r2, r1
 8000818:	4013      	ands	r3, r2
 800081a:	d001      	beq.n	8000820 <_Z16button_interrupth+0x4c>
 800081c:	2301      	movs	r3, #1
 800081e:	e000      	b.n	8000822 <_Z16button_interrupth+0x4e>
 8000820:	2300      	movs	r3, #0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d030      	beq.n	8000888 <_Z16button_interrupth+0xb4>

		if (timer_status == 1) {
 8000826:	4b1e      	ldr	r3, [pc, #120]	; (80008a0 <_Z16button_interrupth+0xcc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d107      	bne.n	800083e <_Z16button_interrupth+0x6a>
			timer_status = 0;
 800082e:	4b1c      	ldr	r3, [pc, #112]	; (80008a0 <_Z16button_interrupth+0xcc>)
 8000830:	2200      	movs	r2, #0
 8000832:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Stop_IT(&htim6);
 8000834:	4b1b      	ldr	r3, [pc, #108]	; (80008a4 <_Z16button_interrupth+0xd0>)
 8000836:	0018      	movs	r0, r3
 8000838:	f003 fe04 	bl	8004444 <HAL_TIM_Base_Stop_IT>
 800083c:	e005      	b.n	800084a <_Z16button_interrupth+0x76>
		} else {
			--timer_status;
 800083e:	4b18      	ldr	r3, [pc, #96]	; (80008a0 <_Z16button_interrupth+0xcc>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	3b01      	subs	r3, #1
 8000844:	b2da      	uxtb	r2, r3
 8000846:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <_Z16button_interrupth+0xcc>)
 8000848:	701a      	strb	r2, [r3, #0]
		}
		if (button_num == 0) {
 800084a:	1dfb      	adds	r3, r7, #7
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d105      	bne.n	800085e <_Z16button_interrupth+0x8a>
			--cur_pos;
 8000852:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <_Z16button_interrupth+0xd4>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	3b01      	subs	r3, #1
 8000858:	b2da      	uxtb	r2, r3
 800085a:	4b13      	ldr	r3, [pc, #76]	; (80008a8 <_Z16button_interrupth+0xd4>)
 800085c:	701a      	strb	r2, [r3, #0]
		}
		if (button_num == 1) {
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b01      	cmp	r3, #1
 8000864:	d105      	bne.n	8000872 <_Z16button_interrupth+0x9e>
			++cur_pos;
 8000866:	4b10      	ldr	r3, [pc, #64]	; (80008a8 <_Z16button_interrupth+0xd4>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <_Z16button_interrupth+0xd4>)
 8000870:	701a      	strb	r2, [r3, #0]
		}

		debounce_count[button_num] = 0;
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4a09      	ldr	r2, [pc, #36]	; (800089c <_Z16button_interrupth+0xc8>)
 8000878:	2100      	movs	r1, #0
 800087a:	54d1      	strb	r1, [r2, r3]
		button_status[button_num] = 2;
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	4a0a      	ldr	r2, [pc, #40]	; (80008ac <_Z16button_interrupth+0xd8>)
 8000882:	2102      	movs	r1, #2
 8000884:	54d1      	strb	r1, [r2, r3]
	} else {
		button_status[button_num] = 0;
	}
}
 8000886:	e004      	b.n	8000892 <_Z16button_interrupth+0xbe>
		button_status[button_num] = 0;
 8000888:	1dfb      	adds	r3, r7, #7
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4a07      	ldr	r2, [pc, #28]	; (80008ac <_Z16button_interrupth+0xd8>)
 800088e:	2100      	movs	r1, #0
 8000890:	54d1      	strb	r1, [r2, r3]
}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			; (mov r8, r8)
 800089c:	200001e0 	.word	0x200001e0
 80008a0:	200001e8 	.word	0x200001e8
 80008a4:	2000010c 	.word	0x2000010c
 80008a8:	20000000 	.word	0x20000000
 80008ac:	200001e4 	.word	0x200001e4

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b5b0      	push	{r4, r5, r7, lr}
 80008b2:	b08e      	sub	sp, #56	; 0x38
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b6:	f000 fc15 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ba:	f000 f867 	bl	800098c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008be:	f000 f999 	bl	8000bf4 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80008c2:	f000 f979 	bl	8000bb8 <_ZL11MX_DMA_Initv>
  MX_I2C1_Init();
 80008c6:	f000 f8d1 	bl	8000a6c <_ZL12MX_I2C1_Initv>
  MX_TIM6_Init();
 80008ca:	f000 f91b 	bl	8000b04 <_ZL12MX_TIM6_Initv>
  MX_USART1_UART_Init();
 80008ce:	f000 f93f 	bl	8000b50 <_ZL19MX_USART1_UART_Initv>
  /* USER CODE BEGIN 2 */

  lcd_initialization(&hi2c1);
 80008d2:	4b29      	ldr	r3, [pc, #164]	; (8000978 <main+0xc8>)
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff ff4d 	bl	8000774 <_Z18lcd_initializationP19__I2C_HandleTypeDef>

*/


		{
		char a[] {"Âðåìÿ è äàòà"};
 80008da:	2428      	movs	r4, #40	; 0x28
 80008dc:	193b      	adds	r3, r7, r4
 80008de:	4a27      	ldr	r2, [pc, #156]	; (800097c <main+0xcc>)
 80008e0:	ca23      	ldmia	r2!, {r0, r1, r5}
 80008e2:	c323      	stmia	r3!, {r0, r1, r5}
 80008e4:	7812      	ldrb	r2, [r2, #0]
 80008e6:	701a      	strb	r2, [r3, #0]
		ddram_set_addr(0x00, &hi2c1);
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <main+0xc8>)
 80008ea:	0019      	movs	r1, r3
 80008ec:	2000      	movs	r0, #0
 80008ee:	f7ff fefd 	bl	80006ec <_Z14ddram_set_addrhP19__I2C_HandleTypeDef>
		lcd_send_string(a, 1, &hi2c1);
 80008f2:	4a21      	ldr	r2, [pc, #132]	; (8000978 <main+0xc8>)
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2101      	movs	r1, #1
 80008f8:	0018      	movs	r0, r3
 80008fa:	f7ff fecd 	bl	8000698 <_Z15lcd_send_stringPchP19__I2C_HandleTypeDef>
		}
		{
		char a[] {"Ñèãíàëû ÒÑ"};
 80008fe:	241c      	movs	r4, #28
 8000900:	193b      	adds	r3, r7, r4
 8000902:	4a1f      	ldr	r2, [pc, #124]	; (8000980 <main+0xd0>)
 8000904:	ca03      	ldmia	r2!, {r0, r1}
 8000906:	c303      	stmia	r3!, {r0, r1}
 8000908:	8811      	ldrh	r1, [r2, #0]
 800090a:	8019      	strh	r1, [r3, #0]
 800090c:	7892      	ldrb	r2, [r2, #2]
 800090e:	709a      	strb	r2, [r3, #2]
		ddram_set_addr(0x40, &hi2c1);
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <main+0xc8>)
 8000912:	0019      	movs	r1, r3
 8000914:	2040      	movs	r0, #64	; 0x40
 8000916:	f7ff fee9 	bl	80006ec <_Z14ddram_set_addrhP19__I2C_HandleTypeDef>
		lcd_send_string(a, 1, &hi2c1);
 800091a:	4a17      	ldr	r2, [pc, #92]	; (8000978 <main+0xc8>)
 800091c:	193b      	adds	r3, r7, r4
 800091e:	2101      	movs	r1, #1
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff feb9 	bl	8000698 <_Z15lcd_send_stringPchP19__I2C_HandleTypeDef>
		}
		{
		char a[] {"Ñèãíàëû ÒÓ"};
 8000926:	2410      	movs	r4, #16
 8000928:	193b      	adds	r3, r7, r4
 800092a:	4a16      	ldr	r2, [pc, #88]	; (8000984 <main+0xd4>)
 800092c:	ca03      	ldmia	r2!, {r0, r1}
 800092e:	c303      	stmia	r3!, {r0, r1}
 8000930:	8811      	ldrh	r1, [r2, #0]
 8000932:	8019      	strh	r1, [r3, #0]
 8000934:	7892      	ldrb	r2, [r2, #2]
 8000936:	709a      	strb	r2, [r3, #2]
		ddram_set_addr(0x14, &hi2c1);
 8000938:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <main+0xc8>)
 800093a:	0019      	movs	r1, r3
 800093c:	2014      	movs	r0, #20
 800093e:	f7ff fed5 	bl	80006ec <_Z14ddram_set_addrhP19__I2C_HandleTypeDef>
		lcd_send_string(a, 1, &hi2c1);
 8000942:	4a0d      	ldr	r2, [pc, #52]	; (8000978 <main+0xc8>)
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2101      	movs	r1, #1
 8000948:	0018      	movs	r0, r3
 800094a:	f7ff fea5 	bl	8000698 <_Z15lcd_send_stringPchP19__I2C_HandleTypeDef>
		}
		{
		char a[] {"Ñèãíàëû ÒÈ"};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <main+0xd8>)
 8000952:	ca03      	ldmia	r2!, {r0, r1}
 8000954:	c303      	stmia	r3!, {r0, r1}
 8000956:	8811      	ldrh	r1, [r2, #0]
 8000958:	8019      	strh	r1, [r3, #0]
 800095a:	7892      	ldrb	r2, [r2, #2]
 800095c:	709a      	strb	r2, [r3, #2]
		ddram_set_addr(0x54, &hi2c1);
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <main+0xc8>)
 8000960:	0019      	movs	r1, r3
 8000962:	2054      	movs	r0, #84	; 0x54
 8000964:	f7ff fec2 	bl	80006ec <_Z14ddram_set_addrhP19__I2C_HandleTypeDef>
		lcd_send_string(a, 1, &hi2c1);
 8000968:	4a03      	ldr	r2, [pc, #12]	; (8000978 <main+0xc8>)
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	2101      	movs	r1, #1
 800096e:	0018      	movs	r0, r3
 8000970:	f7ff fe92 	bl	8000698 <_Z15lcd_send_stringPchP19__I2C_HandleTypeDef>


    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8000974:	e7b1      	b.n	80008da <main+0x2a>
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	20000030 	.word	0x20000030
 800097c:	08005640 	.word	0x08005640
 8000980:	08005650 	.word	0x08005650
 8000984:	0800565c 	.word	0x0800565c
 8000988:	08005668 	.word	0x08005668

0800098c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b095      	sub	sp, #84	; 0x54
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	2420      	movs	r4, #32
 8000994:	193b      	adds	r3, r7, r4
 8000996:	0018      	movs	r0, r3
 8000998:	2330      	movs	r3, #48	; 0x30
 800099a:	001a      	movs	r2, r3
 800099c:	2100      	movs	r1, #0
 800099e:	f004 fe3b 	bl	8005618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a2:	2310      	movs	r3, #16
 80009a4:	18fb      	adds	r3, r7, r3
 80009a6:	0018      	movs	r0, r3
 80009a8:	2310      	movs	r3, #16
 80009aa:	001a      	movs	r2, r3
 80009ac:	2100      	movs	r1, #0
 80009ae:	f004 fe33 	bl	8005618 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009b2:	003b      	movs	r3, r7
 80009b4:	0018      	movs	r0, r3
 80009b6:	2310      	movs	r3, #16
 80009b8:	001a      	movs	r2, r3
 80009ba:	2100      	movs	r1, #0
 80009bc:	f004 fe2c 	bl	8005618 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009c0:	0021      	movs	r1, r4
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2202      	movs	r2, #2
 80009c6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2201      	movs	r2, #1
 80009cc:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2210      	movs	r2, #16
 80009d2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2202      	movs	r2, #2
 80009d8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	22a0      	movs	r2, #160	; 0xa0
 80009e4:	0392      	lsls	r2, r2, #14
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009e8:	187b      	adds	r3, r7, r1
 80009ea:	2200      	movs	r2, #0
 80009ec:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ee:	187b      	adds	r3, r7, r1
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 ffab 	bl	800394c <HAL_RCC_OscConfig>
 80009f6:	0003      	movs	r3, r0
 80009f8:	1e5a      	subs	r2, r3, #1
 80009fa:	4193      	sbcs	r3, r2
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <_Z18SystemClock_Configv+0x7a>
  {
    Error_Handler();
 8000a02:	f000 f995 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	2110      	movs	r1, #16
 8000a08:	187b      	adds	r3, r7, r1
 8000a0a:	2207      	movs	r2, #7
 8000a0c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0e:	187b      	adds	r3, r7, r1
 8000a10:	2202      	movs	r2, #2
 8000a12:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a14:	187b      	adds	r3, r7, r1
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	2101      	movs	r1, #1
 8000a24:	0018      	movs	r0, r3
 8000a26:	f003 faab 	bl	8003f80 <HAL_RCC_ClockConfig>
 8000a2a:	0003      	movs	r3, r0
 8000a2c:	1e5a      	subs	r2, r3, #1
 8000a2e:	4193      	sbcs	r3, r2
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <_Z18SystemClock_Configv+0xae>
  {
    Error_Handler();
 8000a36:	f000 f97b 	bl	8000d30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000a3a:	003b      	movs	r3, r7
 8000a3c:	2221      	movs	r2, #33	; 0x21
 8000a3e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a40:	003b      	movs	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000a46:	003b      	movs	r3, r7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4c:	003b      	movs	r3, r7
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f003 fbda 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>
 8000a54:	0003      	movs	r3, r0
 8000a56:	1e5a      	subs	r2, r3, #1
 8000a58:	4193      	sbcs	r3, r2
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 8000a60:	f000 f966 	bl	8000d30 <Error_Handler>
  }
}
 8000a64:	46c0      	nop			; (mov r8, r8)
 8000a66:	46bd      	mov	sp, r7
 8000a68:	b015      	add	sp, #84	; 0x54
 8000a6a:	bd90      	pop	{r4, r7, pc}

08000a6c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a70:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000a72:	4a22      	ldr	r2, [pc, #136]	; (8000afc <_ZL12MX_I2C1_Initv+0x90>)
 8000a74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000a76:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000a78:	4a21      	ldr	r2, [pc, #132]	; (8000b00 <_ZL12MX_I2C1_Initv+0x94>)
 8000a7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a7c:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8e:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a94:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	f001 f831 	bl	8001b10 <HAL_I2C_Init>
 8000aae:	0003      	movs	r3, r0
 8000ab0:	1e5a      	subs	r2, r3, #1
 8000ab2:	4193      	sbcs	r3, r2
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <_ZL12MX_I2C1_Initv+0x52>
  {
    Error_Handler();
 8000aba:	f000 f939 	bl	8000d30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f002 feaa 	bl	800381c <HAL_I2CEx_ConfigAnalogFilter>
 8000ac8:	0003      	movs	r3, r0
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <_ZL12MX_I2C1_Initv+0x6c>
  {
    Error_Handler();
 8000ad4:	f000 f92c 	bl	8000d30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ad8:	4b07      	ldr	r3, [pc, #28]	; (8000af8 <_ZL12MX_I2C1_Initv+0x8c>)
 8000ada:	2100      	movs	r1, #0
 8000adc:	0018      	movs	r0, r3
 8000ade:	f002 fee9 	bl	80038b4 <HAL_I2CEx_ConfigDigitalFilter>
 8000ae2:	0003      	movs	r3, r0
 8000ae4:	1e5a      	subs	r2, r3, #1
 8000ae6:	4193      	sbcs	r3, r2
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <_ZL12MX_I2C1_Initv+0x86>
  {
    Error_Handler();
 8000aee:	f000 f91f 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000030 	.word	0x20000030
 8000afc:	40005400 	.word	0x40005400
 8000b00:	2000090e 	.word	0x2000090e

08000b04 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END TIM6_Init 0 */

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b08:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <_ZL12MX_TIM6_Initv+0x40>)
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	; (8000b48 <_ZL12MX_TIM6_Initv+0x44>)
 8000b0c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 5000;
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <_ZL12MX_TIM6_Initv+0x40>)
 8000b10:	4a0e      	ldr	r2, [pc, #56]	; (8000b4c <_ZL12MX_TIM6_Initv+0x48>)
 8000b12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b14:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <_ZL12MX_TIM6_Initv+0x40>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2;
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <_ZL12MX_TIM6_Initv+0x40>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <_ZL12MX_TIM6_Initv+0x40>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <_ZL12MX_TIM6_Initv+0x40>)
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f003 fc3b 	bl	80043a4 <HAL_TIM_Base_Init>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	1e5a      	subs	r2, r3, #1
 8000b32:	4193      	sbcs	r3, r2
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <_ZL12MX_TIM6_Initv+0x3a>
  {
    Error_Handler();
 8000b3a:	f000 f8f9 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	2000010c 	.word	0x2000010c
 8000b48:	40001000 	.word	0x40001000
 8000b4c:	00001388 	.word	0x00001388

08000b50 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b54:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b56:	4a17      	ldr	r2, [pc, #92]	; (8000bb4 <_ZL19MX_USART1_UART_Initv+0x64>)
 8000b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b5c:	22e1      	movs	r2, #225	; 0xe1
 8000b5e:	0252      	lsls	r2, r2, #9
 8000b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b62:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b74:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b76:	220c      	movs	r2, #12
 8000b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b80:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8000b94:	0018      	movs	r0, r3
 8000b96:	f003 fe3f 	bl	8004818 <HAL_UART_Init>
 8000b9a:	0003      	movs	r3, r0
 8000b9c:	1e5a      	subs	r2, r3, #1
 8000b9e:	4193      	sbcs	r3, r2
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <_ZL19MX_USART1_UART_Initv+0x5a>
  {
    Error_Handler();
 8000ba6:	f000 f8c3 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000154 	.word	0x20000154
 8000bb4:	40013800 	.word	0x40013800

08000bb8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <_ZL11MX_DMA_Initv+0x38>)
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <_ZL11MX_DMA_Initv+0x38>)
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	615a      	str	r2, [r3, #20]
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <_ZL11MX_DMA_Initv+0x38>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	200a      	movs	r0, #10
 8000bdc:	f000 fbb6 	bl	800134c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000be0:	200a      	movs	r0, #10
 8000be2:	f000 fbc8 	bl	8001376 <HAL_NVIC_EnableIRQ>

}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	240c      	movs	r4, #12
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2314      	movs	r3, #20
 8000c02:	001a      	movs	r2, r3
 8000c04:	2100      	movs	r1, #0
 8000c06:	f004 fd07 	bl	8005618 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	; (8000cc0 <_ZL12MX_GPIO_Initv+0xcc>)
 8000c0c:	695a      	ldr	r2, [r3, #20]
 8000c0e:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <_ZL12MX_GPIO_Initv+0xcc>)
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	0289      	lsls	r1, r1, #10
 8000c14:	430a      	orrs	r2, r1
 8000c16:	615a      	str	r2, [r3, #20]
 8000c18:	4b29      	ldr	r3, [pc, #164]	; (8000cc0 <_ZL12MX_GPIO_Initv+0xcc>)
 8000c1a:	695a      	ldr	r2, [r3, #20]
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	029b      	lsls	r3, r3, #10
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	4b26      	ldr	r3, [pc, #152]	; (8000cc0 <_ZL12MX_GPIO_Initv+0xcc>)
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <_ZL12MX_GPIO_Initv+0xcc>)
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	0309      	lsls	r1, r1, #12
 8000c30:	430a      	orrs	r2, r1
 8000c32:	615a      	str	r2, [r3, #20]
 8000c34:	4b22      	ldr	r3, [pc, #136]	; (8000cc0 <_ZL12MX_GPIO_Initv+0xcc>)
 8000c36:	695a      	ldr	r2, [r3, #20]
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	031b      	lsls	r3, r3, #12
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	4b1f      	ldr	r3, [pc, #124]	; (8000cc0 <_ZL12MX_GPIO_Initv+0xcc>)
 8000c44:	695a      	ldr	r2, [r3, #20]
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <_ZL12MX_GPIO_Initv+0xcc>)
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	02c9      	lsls	r1, r1, #11
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	615a      	str	r2, [r3, #20]
 8000c50:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <_ZL12MX_GPIO_Initv+0xcc>)
 8000c52:	695a      	ldr	r2, [r3, #20]
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	02db      	lsls	r3, r3, #11
 8000c58:	4013      	ands	r3, r2
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000c5e:	23c0      	movs	r3, #192	; 0xc0
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	4818      	ldr	r0, [pc, #96]	; (8000cc4 <_ZL12MX_GPIO_Initv+0xd0>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	0019      	movs	r1, r3
 8000c68:	f000 ff34 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2201      	movs	r2, #1
 8000c70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2290      	movs	r2, #144	; 0x90
 8000c76:	0352      	lsls	r2, r2, #13
 8000c78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	193b      	adds	r3, r7, r4
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c80:	193a      	adds	r2, r7, r4
 8000c82:	2390      	movs	r3, #144	; 0x90
 8000c84:	05db      	lsls	r3, r3, #23
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f000 fdb3 	bl	80017f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000c8e:	0021      	movs	r1, r4
 8000c90:	187b      	adds	r3, r7, r1
 8000c92:	22c0      	movs	r2, #192	; 0xc0
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	187b      	adds	r3, r7, r1
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <_ZL12MX_GPIO_Initv+0xd0>)
 8000cae:	0019      	movs	r1, r3
 8000cb0:	0010      	movs	r0, r2
 8000cb2:	f000 fd9f 	bl	80017f4 <HAL_GPIO_Init>

}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	b009      	add	sp, #36	; 0x24
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	48000800 	.word	0x48000800

08000cc8 <HAL_I2C_MasterTxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
	lcd_i2c_state = 0;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_I2C_MasterTxCpltCallback+0x18>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	b002      	add	sp, #8
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	2000002c 	.word	0x2000002c

08000ce4 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]

}
 8000cec:	46c0      	nop			; (mov r8, r8)
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	b002      	add	sp, #8
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]

	++flag;
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <HAL_UART_TxCpltCallback+0x1c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	3301      	adds	r3, #1
 8000d02:	b2da      	uxtb	r2, r3
 8000d04:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <HAL_UART_TxCpltCallback+0x1c>)
 8000d06:	701a      	strb	r2, [r3, #0]

}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200001dc 	.word	0x200001dc

08000d14 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	button_interrupt(0);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff fd59 	bl	80007d4 <_Z16button_interrupth>
	button_interrupt(1);
 8000d22:	2001      	movs	r0, #1
 8000d24:	f7ff fd56 	bl	80007d4 <_Z16button_interrupth>
}
 8000d28:	46c0      	nop			; (mov r8, r8)
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	b002      	add	sp, #8
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_MspInit+0x44>)
 8000d44:	699a      	ldr	r2, [r3, #24]
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <HAL_MspInit+0x44>)
 8000d48:	2101      	movs	r1, #1
 8000d4a:	430a      	orrs	r2, r1
 8000d4c:	619a      	str	r2, [r3, #24]
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <HAL_MspInit+0x44>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	2201      	movs	r2, #1
 8000d54:	4013      	ands	r3, r2
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_MspInit+0x44>)
 8000d5c:	69da      	ldr	r2, [r3, #28]
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <HAL_MspInit+0x44>)
 8000d60:	2180      	movs	r1, #128	; 0x80
 8000d62:	0549      	lsls	r1, r1, #21
 8000d64:	430a      	orrs	r2, r1
 8000d66:	61da      	str	r2, [r3, #28]
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_MspInit+0x44>)
 8000d6a:	69da      	ldr	r2, [r3, #28]
 8000d6c:	2380      	movs	r3, #128	; 0x80
 8000d6e:	055b      	lsls	r3, r3, #21
 8000d70:	4013      	ands	r3, r2
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b002      	add	sp, #8
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	40021000 	.word	0x40021000

08000d84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d84:	b590      	push	{r4, r7, lr}
 8000d86:	b08b      	sub	sp, #44	; 0x2c
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	2414      	movs	r4, #20
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	0018      	movs	r0, r3
 8000d92:	2314      	movs	r3, #20
 8000d94:	001a      	movs	r2, r3
 8000d96:	2100      	movs	r1, #0
 8000d98:	f004 fc3e 	bl	8005618 <memset>
  if(hi2c->Instance==I2C1)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a46      	ldr	r2, [pc, #280]	; (8000ebc <HAL_I2C_MspInit+0x138>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d000      	beq.n	8000da8 <HAL_I2C_MspInit+0x24>
 8000da6:	e085      	b.n	8000eb4 <HAL_I2C_MspInit+0x130>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da8:	4b45      	ldr	r3, [pc, #276]	; (8000ec0 <HAL_I2C_MspInit+0x13c>)
 8000daa:	695a      	ldr	r2, [r3, #20]
 8000dac:	4b44      	ldr	r3, [pc, #272]	; (8000ec0 <HAL_I2C_MspInit+0x13c>)
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	02c9      	lsls	r1, r1, #11
 8000db2:	430a      	orrs	r2, r1
 8000db4:	615a      	str	r2, [r3, #20]
 8000db6:	4b42      	ldr	r3, [pc, #264]	; (8000ec0 <HAL_I2C_MspInit+0x13c>)
 8000db8:	695a      	ldr	r2, [r3, #20]
 8000dba:	2380      	movs	r3, #128	; 0x80
 8000dbc:	02db      	lsls	r3, r3, #11
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dc4:	0021      	movs	r1, r4
 8000dc6:	187b      	adds	r3, r7, r1
 8000dc8:	22c0      	movs	r2, #192	; 0xc0
 8000dca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dcc:	187b      	adds	r3, r7, r1
 8000dce:	2212      	movs	r2, #18
 8000dd0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	187b      	adds	r3, r7, r1
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd8:	187b      	adds	r3, r7, r1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000dde:	187b      	adds	r3, r7, r1
 8000de0:	2201      	movs	r2, #1
 8000de2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	4a37      	ldr	r2, [pc, #220]	; (8000ec4 <HAL_I2C_MspInit+0x140>)
 8000de8:	0019      	movs	r1, r3
 8000dea:	0010      	movs	r0, r2
 8000dec:	f000 fd02 	bl	80017f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000df0:	4b33      	ldr	r3, [pc, #204]	; (8000ec0 <HAL_I2C_MspInit+0x13c>)
 8000df2:	69da      	ldr	r2, [r3, #28]
 8000df4:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <HAL_I2C_MspInit+0x13c>)
 8000df6:	2180      	movs	r1, #128	; 0x80
 8000df8:	0389      	lsls	r1, r1, #14
 8000dfa:	430a      	orrs	r2, r1
 8000dfc:	61da      	str	r2, [r3, #28]
 8000dfe:	4b30      	ldr	r3, [pc, #192]	; (8000ec0 <HAL_I2C_MspInit+0x13c>)
 8000e00:	69da      	ldr	r2, [r3, #28]
 8000e02:	2380      	movs	r3, #128	; 0x80
 8000e04:	039b      	lsls	r3, r3, #14
 8000e06:	4013      	ands	r3, r2
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8000e0c:	4b2e      	ldr	r3, [pc, #184]	; (8000ec8 <HAL_I2C_MspInit+0x144>)
 8000e0e:	4a2f      	ldr	r2, [pc, #188]	; (8000ecc <HAL_I2C_MspInit+0x148>)
 8000e10:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e12:	4b2d      	ldr	r3, [pc, #180]	; (8000ec8 <HAL_I2C_MspInit+0x144>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e18:	4b2b      	ldr	r3, [pc, #172]	; (8000ec8 <HAL_I2C_MspInit+0x144>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e1e:	4b2a      	ldr	r3, [pc, #168]	; (8000ec8 <HAL_I2C_MspInit+0x144>)
 8000e20:	2280      	movs	r2, #128	; 0x80
 8000e22:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e24:	4b28      	ldr	r3, [pc, #160]	; (8000ec8 <HAL_I2C_MspInit+0x144>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e2a:	4b27      	ldr	r3, [pc, #156]	; (8000ec8 <HAL_I2C_MspInit+0x144>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000e30:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <HAL_I2C_MspInit+0x144>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e36:	4b24      	ldr	r3, [pc, #144]	; (8000ec8 <HAL_I2C_MspInit+0x144>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000e3c:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <HAL_I2C_MspInit+0x144>)
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f000 fab6 	bl	80013b0 <HAL_DMA_Init>
 8000e44:	1e03      	subs	r3, r0, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_I2C_MspInit+0xc8>
    {
      Error_Handler();
 8000e48:	f7ff ff72 	bl	8000d30 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ec8 <HAL_I2C_MspInit+0x144>)
 8000e50:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e52:	4b1d      	ldr	r3, [pc, #116]	; (8000ec8 <HAL_I2C_MspInit+0x144>)
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <HAL_I2C_MspInit+0x14c>)
 8000e5a:	4a1e      	ldr	r2, [pc, #120]	; (8000ed4 <HAL_I2C_MspInit+0x150>)
 8000e5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <HAL_I2C_MspInit+0x14c>)
 8000e60:	2210      	movs	r2, #16
 8000e62:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <HAL_I2C_MspInit+0x14c>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <HAL_I2C_MspInit+0x14c>)
 8000e6c:	2280      	movs	r2, #128	; 0x80
 8000e6e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e70:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <HAL_I2C_MspInit+0x14c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e76:	4b16      	ldr	r3, [pc, #88]	; (8000ed0 <HAL_I2C_MspInit+0x14c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <HAL_I2C_MspInit+0x14c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e82:	4b13      	ldr	r3, [pc, #76]	; (8000ed0 <HAL_I2C_MspInit+0x14c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000e88:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <HAL_I2C_MspInit+0x14c>)
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 fa90 	bl	80013b0 <HAL_DMA_Init>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_I2C_MspInit+0x114>
    {
      Error_Handler();
 8000e94:	f7ff ff4c 	bl	8000d30 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	4a0d      	ldr	r2, [pc, #52]	; (8000ed0 <HAL_I2C_MspInit+0x14c>)
 8000e9c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <HAL_I2C_MspInit+0x14c>)
 8000ea0:	687a      	ldr	r2, [r7, #4]
 8000ea2:	625a      	str	r2, [r3, #36]	; 0x24

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	2017      	movs	r0, #23
 8000eaa:	f000 fa4f 	bl	800134c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8000eae:	2017      	movs	r0, #23
 8000eb0:	f000 fa61 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b00b      	add	sp, #44	; 0x2c
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	40005400 	.word	0x40005400
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	48000400 	.word	0x48000400
 8000ec8:	20000084 	.word	0x20000084
 8000ecc:	40020030 	.word	0x40020030
 8000ed0:	200000c8 	.word	0x200000c8
 8000ed4:	4002001c 	.word	0x4002001c

08000ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <HAL_TIM_Base_MspInit+0x44>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d113      	bne.n	8000f12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000eea:	4b0d      	ldr	r3, [pc, #52]	; (8000f20 <HAL_TIM_Base_MspInit+0x48>)
 8000eec:	69da      	ldr	r2, [r3, #28]
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <HAL_TIM_Base_MspInit+0x48>)
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	430a      	orrs	r2, r1
 8000ef4:	61da      	str	r2, [r3, #28]
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	; (8000f20 <HAL_TIM_Base_MspInit+0x48>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	2210      	movs	r2, #16
 8000efc:	4013      	ands	r3, r2
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2011      	movs	r0, #17
 8000f08:	f000 fa20 	bl	800134c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000f0c:	2011      	movs	r0, #17
 8000f0e:	f000 fa32 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000f12:	46c0      	nop			; (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b004      	add	sp, #16
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	40001000 	.word	0x40001000
 8000f20:	40021000 	.word	0x40021000

08000f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b08b      	sub	sp, #44	; 0x2c
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	2414      	movs	r4, #20
 8000f2e:	193b      	adds	r3, r7, r4
 8000f30:	0018      	movs	r0, r3
 8000f32:	2314      	movs	r3, #20
 8000f34:	001a      	movs	r2, r3
 8000f36:	2100      	movs	r1, #0
 8000f38:	f004 fb6e 	bl	8005618 <memset>
  if(huart->Instance==USART1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <HAL_UART_MspInit+0xa4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d13b      	bne.n	8000fbe <HAL_UART_MspInit+0x9a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f46:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <HAL_UART_MspInit+0xa8>)
 8000f48:	699a      	ldr	r2, [r3, #24]
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <HAL_UART_MspInit+0xa8>)
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	01c9      	lsls	r1, r1, #7
 8000f50:	430a      	orrs	r2, r1
 8000f52:	619a      	str	r2, [r3, #24]
 8000f54:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <HAL_UART_MspInit+0xa8>)
 8000f56:	699a      	ldr	r2, [r3, #24]
 8000f58:	2380      	movs	r3, #128	; 0x80
 8000f5a:	01db      	lsls	r3, r3, #7
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <HAL_UART_MspInit+0xa8>)
 8000f64:	695a      	ldr	r2, [r3, #20]
 8000f66:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <HAL_UART_MspInit+0xa8>)
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	0289      	lsls	r1, r1, #10
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	615a      	str	r2, [r3, #20]
 8000f70:	4b16      	ldr	r3, [pc, #88]	; (8000fcc <HAL_UART_MspInit+0xa8>)
 8000f72:	695a      	ldr	r2, [r3, #20]
 8000f74:	2380      	movs	r3, #128	; 0x80
 8000f76:	029b      	lsls	r3, r3, #10
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	22c0      	movs	r2, #192	; 0xc0
 8000f82:	00d2      	lsls	r2, r2, #3
 8000f84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	0021      	movs	r1, r4
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2203      	movs	r2, #3
 8000f98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	187a      	adds	r2, r7, r1
 8000fa2:	2390      	movs	r3, #144	; 0x90
 8000fa4:	05db      	lsls	r3, r3, #23
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f000 fc23 	bl	80017f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	201b      	movs	r0, #27
 8000fb4:	f000 f9ca 	bl	800134c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fb8:	201b      	movs	r0, #27
 8000fba:	f000 f9dc 	bl	8001376 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fbe:	46c0      	nop			; (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b00b      	add	sp, #44	; 0x2c
 8000fc4:	bd90      	pop	{r4, r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	40013800 	.word	0x40013800
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fd4:	e7fe      	b.n	8000fd4 <NMI_Handler+0x4>

08000fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fda:	e7fe      	b.n	8000fda <HardFault_Handler+0x4>

08000fdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fe0:	46c0      	nop			; (mov r8, r8)
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ff4:	f000 f8be 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
	...

08001000 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001004:	4b05      	ldr	r3, [pc, #20]	; (800101c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8001006:	0018      	movs	r0, r3
 8001008:	f000 fafd 	bl	8001606 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <DMA1_Channel2_3_IRQHandler+0x20>)
 800100e:	0018      	movs	r0, r3
 8001010:	f000 faf9 	bl	8001606 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	200000c8 	.word	0x200000c8
 8001020:	20000084 	.word	0x20000084

08001024 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <TIM6_IRQHandler+0x14>)
 800102a:	0018      	movs	r0, r3
 800102c:	f003 fa38 	bl	80044a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	2000010c 	.word	0x2000010c

0800103c <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 global interrupt.
  */
void I2C1_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <I2C1_IRQHandler+0x2c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	699a      	ldr	r2, [r3, #24]
 8001046:	23e0      	movs	r3, #224	; 0xe0
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	4013      	ands	r3, r2
 800104c:	d004      	beq.n	8001058 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800104e:	4b06      	ldr	r3, [pc, #24]	; (8001068 <I2C1_IRQHandler+0x2c>)
 8001050:	0018      	movs	r0, r3
 8001052:	f000 ff13 	bl	8001e7c <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8001056:	e003      	b.n	8001060 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <I2C1_IRQHandler+0x2c>)
 800105a:	0018      	movs	r0, r3
 800105c:	f000 fef4 	bl	8001e48 <HAL_I2C_EV_IRQHandler>
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	20000030 	.word	0x20000030

0800106c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001070:	4b03      	ldr	r3, [pc, #12]	; (8001080 <USART1_IRQHandler+0x14>)
 8001072:	0018      	movs	r0, r3
 8001074:	f003 fc24 	bl	80048c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	46c0      	nop			; (mov r8, r8)
 8001080:	20000154 	.word	0x20000154

08001084 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001092:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001094:	f7ff fff6 	bl	8001084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <LoopForever+0x6>)
  ldr r1, =_edata
 800109a:	490d      	ldr	r1, [pc, #52]	; (80010d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800109c:	4a0d      	ldr	r2, [pc, #52]	; (80010d4 <LoopForever+0xe>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010a0:	e002      	b.n	80010a8 <LoopCopyDataInit>

080010a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a6:	3304      	adds	r3, #4

080010a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010ac:	d3f9      	bcc.n	80010a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ae:	4a0a      	ldr	r2, [pc, #40]	; (80010d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010b0:	4c0a      	ldr	r4, [pc, #40]	; (80010dc <LoopForever+0x16>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b4:	e001      	b.n	80010ba <LoopFillZerobss>

080010b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b8:	3204      	adds	r2, #4

080010ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010bc:	d3fb      	bcc.n	80010b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010be:	f004 fa87 	bl	80055d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010c2:	f7ff fbf5 	bl	80008b0 <main>

080010c6 <LoopForever>:

LoopForever:
    b LoopForever
 80010c6:	e7fe      	b.n	80010c6 <LoopForever>
  ldr   r0, =_estack
 80010c8:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80010cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010d0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010d4:	080056b4 	.word	0x080056b4
  ldr r2, =_sbss
 80010d8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010dc:	200001f0 	.word	0x200001f0

080010e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010e0:	e7fe      	b.n	80010e0 <ADC1_IRQHandler>
	...

080010e4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010e8:	4b07      	ldr	r3, [pc, #28]	; (8001108 <HAL_Init+0x24>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <HAL_Init+0x24>)
 80010ee:	2110      	movs	r1, #16
 80010f0:	430a      	orrs	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010f4:	2000      	movs	r0, #0
 80010f6:	f000 f809 	bl	800110c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010fa:	f7ff fe1f 	bl	8000d3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	46c0      	nop			; (mov r8, r8)
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_InitTick+0x5c>)
 8001116:	681c      	ldr	r4, [r3, #0]
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <HAL_InitTick+0x60>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	0019      	movs	r1, r3
 800111e:	23fa      	movs	r3, #250	; 0xfa
 8001120:	0098      	lsls	r0, r3, #2
 8001122:	f7fe fff1 	bl	8000108 <__udivsi3>
 8001126:	0003      	movs	r3, r0
 8001128:	0019      	movs	r1, r3
 800112a:	0020      	movs	r0, r4
 800112c:	f7fe ffec 	bl	8000108 <__udivsi3>
 8001130:	0003      	movs	r3, r0
 8001132:	0018      	movs	r0, r3
 8001134:	f000 f92f 	bl	8001396 <HAL_SYSTICK_Config>
 8001138:	1e03      	subs	r3, r0, #0
 800113a:	d001      	beq.n	8001140 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e00f      	b.n	8001160 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d80b      	bhi.n	800115e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	2301      	movs	r3, #1
 800114a:	425b      	negs	r3, r3
 800114c:	2200      	movs	r2, #0
 800114e:	0018      	movs	r0, r3
 8001150:	f000 f8fc 	bl	800134c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001154:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_InitTick+0x64>)
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	e000      	b.n	8001160 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
}
 8001160:	0018      	movs	r0, r3
 8001162:	46bd      	mov	sp, r7
 8001164:	b003      	add	sp, #12
 8001166:	bd90      	pop	{r4, r7, pc}
 8001168:	20000004 	.word	0x20000004
 800116c:	2000000c 	.word	0x2000000c
 8001170:	20000008 	.word	0x20000008

08001174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <HAL_IncTick+0x1c>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	001a      	movs	r2, r3
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <HAL_IncTick+0x20>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	18d2      	adds	r2, r2, r3
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_IncTick+0x20>)
 8001186:	601a      	str	r2, [r3, #0]
}
 8001188:	46c0      	nop			; (mov r8, r8)
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	46c0      	nop			; (mov r8, r8)
 8001190:	2000000c 	.word	0x2000000c
 8001194:	200001ec 	.word	0x200001ec

08001198 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  return uwTick;
 800119c:	4b02      	ldr	r3, [pc, #8]	; (80011a8 <HAL_GetTick+0x10>)
 800119e:	681b      	ldr	r3, [r3, #0]
}
 80011a0:	0018      	movs	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	200001ec 	.word	0x200001ec

080011ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011b4:	f7ff fff0 	bl	8001198 <HAL_GetTick>
 80011b8:	0003      	movs	r3, r0
 80011ba:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	3301      	adds	r3, #1
 80011c4:	d005      	beq.n	80011d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011c6:	4b0a      	ldr	r3, [pc, #40]	; (80011f0 <HAL_Delay+0x44>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	001a      	movs	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	189b      	adds	r3, r3, r2
 80011d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	f7ff ffe0 	bl	8001198 <HAL_GetTick>
 80011d8:	0002      	movs	r2, r0
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d8f7      	bhi.n	80011d4 <HAL_Delay+0x28>
  {
  }
}
 80011e4:	46c0      	nop			; (mov r8, r8)
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b004      	add	sp, #16
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	2000000c 	.word	0x2000000c

080011f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	0002      	movs	r2, r0
 80011fc:	1dfb      	adds	r3, r7, #7
 80011fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001200:	1dfb      	adds	r3, r7, #7
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b7f      	cmp	r3, #127	; 0x7f
 8001206:	d809      	bhi.n	800121c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	001a      	movs	r2, r3
 800120e:	231f      	movs	r3, #31
 8001210:	401a      	ands	r2, r3
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_EnableIRQ+0x30>)
 8001214:	2101      	movs	r1, #1
 8001216:	4091      	lsls	r1, r2
 8001218:	000a      	movs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
  }
}
 800121c:	46c0      	nop			; (mov r8, r8)
 800121e:	46bd      	mov	sp, r7
 8001220:	b002      	add	sp, #8
 8001222:	bd80      	pop	{r7, pc}
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b590      	push	{r4, r7, lr}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	0002      	movs	r2, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001236:	1dfb      	adds	r3, r7, #7
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b7f      	cmp	r3, #127	; 0x7f
 800123c:	d828      	bhi.n	8001290 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800123e:	4a2f      	ldr	r2, [pc, #188]	; (80012fc <__NVIC_SetPriority+0xd4>)
 8001240:	1dfb      	adds	r3, r7, #7
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	b25b      	sxtb	r3, r3
 8001246:	089b      	lsrs	r3, r3, #2
 8001248:	33c0      	adds	r3, #192	; 0xc0
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	589b      	ldr	r3, [r3, r2]
 800124e:	1dfa      	adds	r2, r7, #7
 8001250:	7812      	ldrb	r2, [r2, #0]
 8001252:	0011      	movs	r1, r2
 8001254:	2203      	movs	r2, #3
 8001256:	400a      	ands	r2, r1
 8001258:	00d2      	lsls	r2, r2, #3
 800125a:	21ff      	movs	r1, #255	; 0xff
 800125c:	4091      	lsls	r1, r2
 800125e:	000a      	movs	r2, r1
 8001260:	43d2      	mvns	r2, r2
 8001262:	401a      	ands	r2, r3
 8001264:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	019b      	lsls	r3, r3, #6
 800126a:	22ff      	movs	r2, #255	; 0xff
 800126c:	401a      	ands	r2, r3
 800126e:	1dfb      	adds	r3, r7, #7
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	0018      	movs	r0, r3
 8001274:	2303      	movs	r3, #3
 8001276:	4003      	ands	r3, r0
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800127c:	481f      	ldr	r0, [pc, #124]	; (80012fc <__NVIC_SetPriority+0xd4>)
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	b25b      	sxtb	r3, r3
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	430a      	orrs	r2, r1
 8001288:	33c0      	adds	r3, #192	; 0xc0
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800128e:	e031      	b.n	80012f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001290:	4a1b      	ldr	r2, [pc, #108]	; (8001300 <__NVIC_SetPriority+0xd8>)
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	0019      	movs	r1, r3
 8001298:	230f      	movs	r3, #15
 800129a:	400b      	ands	r3, r1
 800129c:	3b08      	subs	r3, #8
 800129e:	089b      	lsrs	r3, r3, #2
 80012a0:	3306      	adds	r3, #6
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	18d3      	adds	r3, r2, r3
 80012a6:	3304      	adds	r3, #4
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	1dfa      	adds	r2, r7, #7
 80012ac:	7812      	ldrb	r2, [r2, #0]
 80012ae:	0011      	movs	r1, r2
 80012b0:	2203      	movs	r2, #3
 80012b2:	400a      	ands	r2, r1
 80012b4:	00d2      	lsls	r2, r2, #3
 80012b6:	21ff      	movs	r1, #255	; 0xff
 80012b8:	4091      	lsls	r1, r2
 80012ba:	000a      	movs	r2, r1
 80012bc:	43d2      	mvns	r2, r2
 80012be:	401a      	ands	r2, r3
 80012c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	019b      	lsls	r3, r3, #6
 80012c6:	22ff      	movs	r2, #255	; 0xff
 80012c8:	401a      	ands	r2, r3
 80012ca:	1dfb      	adds	r3, r7, #7
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	0018      	movs	r0, r3
 80012d0:	2303      	movs	r3, #3
 80012d2:	4003      	ands	r3, r0
 80012d4:	00db      	lsls	r3, r3, #3
 80012d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012d8:	4809      	ldr	r0, [pc, #36]	; (8001300 <__NVIC_SetPriority+0xd8>)
 80012da:	1dfb      	adds	r3, r7, #7
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	001c      	movs	r4, r3
 80012e0:	230f      	movs	r3, #15
 80012e2:	4023      	ands	r3, r4
 80012e4:	3b08      	subs	r3, #8
 80012e6:	089b      	lsrs	r3, r3, #2
 80012e8:	430a      	orrs	r2, r1
 80012ea:	3306      	adds	r3, #6
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	18c3      	adds	r3, r0, r3
 80012f0:	3304      	adds	r3, #4
 80012f2:	601a      	str	r2, [r3, #0]
}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b003      	add	sp, #12
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	1e5a      	subs	r2, r3, #1
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	045b      	lsls	r3, r3, #17
 8001314:	429a      	cmp	r2, r3
 8001316:	d301      	bcc.n	800131c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001318:	2301      	movs	r3, #1
 800131a:	e010      	b.n	800133e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131c:	4b0a      	ldr	r3, [pc, #40]	; (8001348 <SysTick_Config+0x44>)
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	3a01      	subs	r2, #1
 8001322:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001324:	2301      	movs	r3, #1
 8001326:	425b      	negs	r3, r3
 8001328:	2103      	movs	r1, #3
 800132a:	0018      	movs	r0, r3
 800132c:	f7ff ff7c 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	; (8001348 <SysTick_Config+0x44>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	; (8001348 <SysTick_Config+0x44>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	0018      	movs	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	b002      	add	sp, #8
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			; (mov r8, r8)
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800134c:	b580      	push	{r7, lr}
 800134e:	b084      	sub	sp, #16
 8001350:	af00      	add	r7, sp, #0
 8001352:	60b9      	str	r1, [r7, #8]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	210f      	movs	r1, #15
 8001358:	187b      	adds	r3, r7, r1
 800135a:	1c02      	adds	r2, r0, #0
 800135c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800135e:	68ba      	ldr	r2, [r7, #8]
 8001360:	187b      	adds	r3, r7, r1
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	b25b      	sxtb	r3, r3
 8001366:	0011      	movs	r1, r2
 8001368:	0018      	movs	r0, r3
 800136a:	f7ff ff5d 	bl	8001228 <__NVIC_SetPriority>
}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	46bd      	mov	sp, r7
 8001372:	b004      	add	sp, #16
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	0002      	movs	r2, r0
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001382:	1dfb      	adds	r3, r7, #7
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	b25b      	sxtb	r3, r3
 8001388:	0018      	movs	r0, r3
 800138a:	f7ff ff33 	bl	80011f4 <__NVIC_EnableIRQ>
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	0018      	movs	r0, r3
 80013a2:	f7ff ffaf 	bl	8001304 <SysTick_Config>
 80013a6:	0003      	movs	r3, r0
}
 80013a8:	0018      	movs	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	b002      	add	sp, #8
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d101      	bne.n	80013c6 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e036      	b.n	8001434 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2221      	movs	r2, #33	; 0x21
 80013ca:	2102      	movs	r1, #2
 80013cc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	4a18      	ldr	r2, [pc, #96]	; (800143c <HAL_DMA_Init+0x8c>)
 80013da:	4013      	ands	r3, r2
 80013dc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80013e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	68db      	ldr	r3, [r3, #12]
 80013ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	69db      	ldr	r3, [r3, #28]
 8001404:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	0018      	movs	r0, r3
 8001418:	f000 f9d0 	bl	80017bc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2221      	movs	r2, #33	; 0x21
 8001426:	2101      	movs	r1, #1
 8001428:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2220      	movs	r2, #32
 800142e:	2100      	movs	r1, #0
 8001430:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	0018      	movs	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	b004      	add	sp, #16
 800143a:	bd80      	pop	{r7, pc}
 800143c:	ffffc00f 	.word	0xffffc00f

08001440 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800144e:	2317      	movs	r3, #23
 8001450:	18fb      	adds	r3, r7, r3
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	2220      	movs	r2, #32
 800145a:	5c9b      	ldrb	r3, [r3, r2]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d101      	bne.n	8001464 <HAL_DMA_Start_IT+0x24>
 8001460:	2302      	movs	r3, #2
 8001462:	e04f      	b.n	8001504 <HAL_DMA_Start_IT+0xc4>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2220      	movs	r2, #32
 8001468:	2101      	movs	r1, #1
 800146a:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2221      	movs	r2, #33	; 0x21
 8001470:	5c9b      	ldrb	r3, [r3, r2]
 8001472:	b2db      	uxtb	r3, r3
 8001474:	2b01      	cmp	r3, #1
 8001476:	d13a      	bne.n	80014ee <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2221      	movs	r2, #33	; 0x21
 800147c:	2102      	movs	r1, #2
 800147e:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	2200      	movs	r2, #0
 8001484:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2101      	movs	r1, #1
 8001492:	438a      	bics	r2, r1
 8001494:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	68b9      	ldr	r1, [r7, #8]
 800149c:	68f8      	ldr	r0, [r7, #12]
 800149e:	f000 f960 	bl	8001762 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d008      	beq.n	80014bc <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	210e      	movs	r1, #14
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e00f      	b.n	80014dc <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	210a      	movs	r1, #10
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2104      	movs	r1, #4
 80014d8:	438a      	bics	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	2101      	movs	r1, #1
 80014e8:	430a      	orrs	r2, r1
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	e007      	b.n	80014fe <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2220      	movs	r2, #32
 80014f2:	2100      	movs	r1, #0
 80014f4:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80014f6:	2317      	movs	r3, #23
 80014f8:	18fb      	adds	r3, r7, r3
 80014fa:	2202      	movs	r2, #2
 80014fc:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80014fe:	2317      	movs	r3, #23
 8001500:	18fb      	adds	r3, r7, r3
 8001502:	781b      	ldrb	r3, [r3, #0]
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b006      	add	sp, #24
 800150a:	bd80      	pop	{r7, pc}

0800150c <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2221      	movs	r2, #33	; 0x21
 8001518:	5c9b      	ldrb	r3, [r3, r2]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d008      	beq.n	8001532 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2204      	movs	r2, #4
 8001524:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2220      	movs	r2, #32
 800152a:	2100      	movs	r1, #0
 800152c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e020      	b.n	8001574 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	210e      	movs	r1, #14
 800153e:	438a      	bics	r2, r1
 8001540:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2101      	movs	r1, #1
 800154e:	438a      	bics	r2, r1
 8001550:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800155a:	2101      	movs	r1, #1
 800155c:	4091      	lsls	r1, r2
 800155e:	000a      	movs	r2, r1
 8001560:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2221      	movs	r2, #33	; 0x21
 8001566:	2101      	movs	r1, #1
 8001568:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2220      	movs	r2, #32
 800156e:	2100      	movs	r1, #0
 8001570:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001572:	2300      	movs	r3, #0
}
 8001574:	0018      	movs	r0, r3
 8001576:	46bd      	mov	sp, r7
 8001578:	b002      	add	sp, #8
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b084      	sub	sp, #16
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001584:	210f      	movs	r1, #15
 8001586:	187b      	adds	r3, r7, r1
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2221      	movs	r2, #33	; 0x21
 8001590:	5c9b      	ldrb	r3, [r3, r2]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d006      	beq.n	80015a6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2204      	movs	r2, #4
 800159c:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 800159e:	187b      	adds	r3, r7, r1
 80015a0:	2201      	movs	r2, #1
 80015a2:	701a      	strb	r2, [r3, #0]
 80015a4:	e028      	b.n	80015f8 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	210e      	movs	r1, #14
 80015b2:	438a      	bics	r2, r1
 80015b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2101      	movs	r1, #1
 80015c2:	438a      	bics	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ce:	2101      	movs	r1, #1
 80015d0:	4091      	lsls	r1, r2
 80015d2:	000a      	movs	r2, r1
 80015d4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2221      	movs	r2, #33	; 0x21
 80015da:	2101      	movs	r1, #1
 80015dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2220      	movs	r2, #32
 80015e2:	2100      	movs	r1, #0
 80015e4:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d004      	beq.n	80015f8 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	0010      	movs	r0, r2
 80015f6:	4798      	blx	r3
    }
  }
  return status;
 80015f8:	230f      	movs	r3, #15
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	781b      	ldrb	r3, [r3, #0]
}
 80015fe:	0018      	movs	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	b004      	add	sp, #16
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b084      	sub	sp, #16
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	2204      	movs	r2, #4
 8001624:	409a      	lsls	r2, r3
 8001626:	0013      	movs	r3, r2
 8001628:	68fa      	ldr	r2, [r7, #12]
 800162a:	4013      	ands	r3, r2
 800162c:	d024      	beq.n	8001678 <HAL_DMA_IRQHandler+0x72>
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	2204      	movs	r2, #4
 8001632:	4013      	ands	r3, r2
 8001634:	d020      	beq.n	8001678 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2220      	movs	r2, #32
 800163e:	4013      	ands	r3, r2
 8001640:	d107      	bne.n	8001652 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2104      	movs	r1, #4
 800164e:	438a      	bics	r2, r1
 8001650:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800165a:	2104      	movs	r1, #4
 800165c:	4091      	lsls	r1, r2
 800165e:	000a      	movs	r2, r1
 8001660:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	2b00      	cmp	r3, #0
 8001668:	d100      	bne.n	800166c <HAL_DMA_IRQHandler+0x66>
 800166a:	e06a      	b.n	8001742 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	0010      	movs	r0, r2
 8001674:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001676:	e064      	b.n	8001742 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	2202      	movs	r2, #2
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	68fa      	ldr	r2, [r7, #12]
 8001684:	4013      	ands	r3, r2
 8001686:	d02b      	beq.n	80016e0 <HAL_DMA_IRQHandler+0xda>
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	2202      	movs	r2, #2
 800168c:	4013      	ands	r3, r2
 800168e:	d027      	beq.n	80016e0 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2220      	movs	r2, #32
 8001698:	4013      	ands	r3, r2
 800169a:	d10b      	bne.n	80016b4 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	210a      	movs	r1, #10
 80016a8:	438a      	bics	r2, r1
 80016aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2221      	movs	r2, #33	; 0x21
 80016b0:	2101      	movs	r1, #1
 80016b2:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	2102      	movs	r1, #2
 80016be:	4091      	lsls	r1, r2
 80016c0:	000a      	movs	r2, r1
 80016c2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2220      	movs	r2, #32
 80016c8:	2100      	movs	r1, #0
 80016ca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d036      	beq.n	8001742 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	0010      	movs	r0, r2
 80016dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80016de:	e030      	b.n	8001742 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	2208      	movs	r2, #8
 80016e6:	409a      	lsls	r2, r3
 80016e8:	0013      	movs	r3, r2
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	4013      	ands	r3, r2
 80016ee:	d028      	beq.n	8001742 <HAL_DMA_IRQHandler+0x13c>
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	2208      	movs	r2, #8
 80016f4:	4013      	ands	r3, r2
 80016f6:	d024      	beq.n	8001742 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	210e      	movs	r1, #14
 8001704:	438a      	bics	r2, r1
 8001706:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001710:	2101      	movs	r1, #1
 8001712:	4091      	lsls	r1, r2
 8001714:	000a      	movs	r2, r1
 8001716:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2201      	movs	r2, #1
 800171c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2221      	movs	r2, #33	; 0x21
 8001722:	2101      	movs	r1, #1
 8001724:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2220      	movs	r2, #32
 800172a:	2100      	movs	r1, #0
 800172c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	0010      	movs	r0, r2
 800173e:	4798      	blx	r3
    }
  }
}
 8001740:	e7ff      	b.n	8001742 <HAL_DMA_IRQHandler+0x13c>
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	46bd      	mov	sp, r7
 8001746:	b004      	add	sp, #16
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2221      	movs	r2, #33	; 0x21
 8001756:	5c9b      	ldrb	r3, [r3, r2]
 8001758:	b2db      	uxtb	r3, r3
}
 800175a:	0018      	movs	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}

08001762 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001778:	2101      	movs	r1, #1
 800177a:	4091      	lsls	r1, r2
 800177c:	000a      	movs	r2, r1
 800177e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b10      	cmp	r3, #16
 800178e:	d108      	bne.n	80017a2 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68ba      	ldr	r2, [r7, #8]
 800179e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80017a0:	e007      	b.n	80017b2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	60da      	str	r2, [r3, #12]
}
 80017b2:	46c0      	nop			; (mov r8, r8)
 80017b4:	46bd      	mov	sp, r7
 80017b6:	b004      	add	sp, #16
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a08      	ldr	r2, [pc, #32]	; (80017ec <DMA_CalcBaseAndBitshift+0x30>)
 80017ca:	4694      	mov	ip, r2
 80017cc:	4463      	add	r3, ip
 80017ce:	2114      	movs	r1, #20
 80017d0:	0018      	movs	r0, r3
 80017d2:	f7fe fc99 	bl	8000108 <__udivsi3>
 80017d6:	0003      	movs	r3, r0
 80017d8:	009a      	lsls	r2, r3, #2
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a03      	ldr	r2, [pc, #12]	; (80017f0 <DMA_CalcBaseAndBitshift+0x34>)
 80017e2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80017e4:	46c0      	nop			; (mov r8, r8)
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	bffdfff8 	.word	0xbffdfff8
 80017f0:	40020000 	.word	0x40020000

080017f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001802:	e14f      	b.n	8001aa4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2101      	movs	r1, #1
 800180a:	697a      	ldr	r2, [r7, #20]
 800180c:	4091      	lsls	r1, r2
 800180e:	000a      	movs	r2, r1
 8001810:	4013      	ands	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d100      	bne.n	800181c <HAL_GPIO_Init+0x28>
 800181a:	e140      	b.n	8001a9e <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2203      	movs	r2, #3
 8001822:	4013      	ands	r3, r2
 8001824:	2b01      	cmp	r3, #1
 8001826:	d005      	beq.n	8001834 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2203      	movs	r2, #3
 800182e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001830:	2b02      	cmp	r3, #2
 8001832:	d130      	bne.n	8001896 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	2203      	movs	r2, #3
 8001840:	409a      	lsls	r2, r3
 8001842:	0013      	movs	r3, r2
 8001844:	43da      	mvns	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4013      	ands	r3, r2
 800184a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68da      	ldr	r2, [r3, #12]
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	409a      	lsls	r2, r3
 8001856:	0013      	movs	r3, r2
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4313      	orrs	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800186a:	2201      	movs	r2, #1
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	409a      	lsls	r2, r3
 8001870:	0013      	movs	r3, r2
 8001872:	43da      	mvns	r2, r3
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	091b      	lsrs	r3, r3, #4
 8001880:	2201      	movs	r2, #1
 8001882:	401a      	ands	r2, r3
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	409a      	lsls	r2, r3
 8001888:	0013      	movs	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2203      	movs	r2, #3
 800189c:	4013      	ands	r3, r2
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d017      	beq.n	80018d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	2203      	movs	r2, #3
 80018ae:	409a      	lsls	r2, r3
 80018b0:	0013      	movs	r3, r2
 80018b2:	43da      	mvns	r2, r3
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	689a      	ldr	r2, [r3, #8]
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	005b      	lsls	r3, r3, #1
 80018c2:	409a      	lsls	r2, r3
 80018c4:	0013      	movs	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2203      	movs	r2, #3
 80018d8:	4013      	ands	r3, r2
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d123      	bne.n	8001926 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	0092      	lsls	r2, r2, #2
 80018e8:	58d3      	ldr	r3, [r2, r3]
 80018ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2207      	movs	r2, #7
 80018f0:	4013      	ands	r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	220f      	movs	r2, #15
 80018f6:	409a      	lsls	r2, r3
 80018f8:	0013      	movs	r3, r2
 80018fa:	43da      	mvns	r2, r3
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	4013      	ands	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	691a      	ldr	r2, [r3, #16]
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2107      	movs	r1, #7
 800190a:	400b      	ands	r3, r1
 800190c:	009b      	lsls	r3, r3, #2
 800190e:	409a      	lsls	r2, r3
 8001910:	0013      	movs	r3, r2
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4313      	orrs	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	08da      	lsrs	r2, r3, #3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3208      	adds	r2, #8
 8001920:	0092      	lsls	r2, r2, #2
 8001922:	6939      	ldr	r1, [r7, #16]
 8001924:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	2203      	movs	r2, #3
 8001932:	409a      	lsls	r2, r3
 8001934:	0013      	movs	r3, r2
 8001936:	43da      	mvns	r2, r3
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2203      	movs	r2, #3
 8001944:	401a      	ands	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	409a      	lsls	r2, r3
 800194c:	0013      	movs	r3, r2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4313      	orrs	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685a      	ldr	r2, [r3, #4]
 800195e:	23c0      	movs	r3, #192	; 0xc0
 8001960:	029b      	lsls	r3, r3, #10
 8001962:	4013      	ands	r3, r2
 8001964:	d100      	bne.n	8001968 <HAL_GPIO_Init+0x174>
 8001966:	e09a      	b.n	8001a9e <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001968:	4b54      	ldr	r3, [pc, #336]	; (8001abc <HAL_GPIO_Init+0x2c8>)
 800196a:	699a      	ldr	r2, [r3, #24]
 800196c:	4b53      	ldr	r3, [pc, #332]	; (8001abc <HAL_GPIO_Init+0x2c8>)
 800196e:	2101      	movs	r1, #1
 8001970:	430a      	orrs	r2, r1
 8001972:	619a      	str	r2, [r3, #24]
 8001974:	4b51      	ldr	r3, [pc, #324]	; (8001abc <HAL_GPIO_Init+0x2c8>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	2201      	movs	r2, #1
 800197a:	4013      	ands	r3, r2
 800197c:	60bb      	str	r3, [r7, #8]
 800197e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001980:	4a4f      	ldr	r2, [pc, #316]	; (8001ac0 <HAL_GPIO_Init+0x2cc>)
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	089b      	lsrs	r3, r3, #2
 8001986:	3302      	adds	r3, #2
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	589b      	ldr	r3, [r3, r2]
 800198c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	2203      	movs	r2, #3
 8001992:	4013      	ands	r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	220f      	movs	r2, #15
 8001998:	409a      	lsls	r2, r3
 800199a:	0013      	movs	r3, r2
 800199c:	43da      	mvns	r2, r3
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4013      	ands	r3, r2
 80019a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	2390      	movs	r3, #144	; 0x90
 80019a8:	05db      	lsls	r3, r3, #23
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d013      	beq.n	80019d6 <HAL_GPIO_Init+0x1e2>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a44      	ldr	r2, [pc, #272]	; (8001ac4 <HAL_GPIO_Init+0x2d0>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d00d      	beq.n	80019d2 <HAL_GPIO_Init+0x1de>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a43      	ldr	r2, [pc, #268]	; (8001ac8 <HAL_GPIO_Init+0x2d4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d007      	beq.n	80019ce <HAL_GPIO_Init+0x1da>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a42      	ldr	r2, [pc, #264]	; (8001acc <HAL_GPIO_Init+0x2d8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d101      	bne.n	80019ca <HAL_GPIO_Init+0x1d6>
 80019c6:	2303      	movs	r3, #3
 80019c8:	e006      	b.n	80019d8 <HAL_GPIO_Init+0x1e4>
 80019ca:	2305      	movs	r3, #5
 80019cc:	e004      	b.n	80019d8 <HAL_GPIO_Init+0x1e4>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_Init+0x1e4>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <HAL_GPIO_Init+0x1e4>
 80019d6:	2300      	movs	r3, #0
 80019d8:	697a      	ldr	r2, [r7, #20]
 80019da:	2103      	movs	r1, #3
 80019dc:	400a      	ands	r2, r1
 80019de:	0092      	lsls	r2, r2, #2
 80019e0:	4093      	lsls	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019e8:	4935      	ldr	r1, [pc, #212]	; (8001ac0 <HAL_GPIO_Init+0x2cc>)
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	089b      	lsrs	r3, r3, #2
 80019ee:	3302      	adds	r3, #2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f6:	4b36      	ldr	r3, [pc, #216]	; (8001ad0 <HAL_GPIO_Init+0x2dc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	43da      	mvns	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	035b      	lsls	r3, r3, #13
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d003      	beq.n	8001a1a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4313      	orrs	r3, r2
 8001a18:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a1a:	4b2d      	ldr	r3, [pc, #180]	; (8001ad0 <HAL_GPIO_Init+0x2dc>)
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a20:	4b2b      	ldr	r3, [pc, #172]	; (8001ad0 <HAL_GPIO_Init+0x2dc>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	43da      	mvns	r2, r3
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	2380      	movs	r3, #128	; 0x80
 8001a36:	039b      	lsls	r3, r3, #14
 8001a38:	4013      	ands	r3, r2
 8001a3a:	d003      	beq.n	8001a44 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001a44:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <HAL_GPIO_Init+0x2dc>)
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001a4a:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <HAL_GPIO_Init+0x2dc>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	43da      	mvns	r2, r3
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	2380      	movs	r3, #128	; 0x80
 8001a60:	029b      	lsls	r3, r3, #10
 8001a62:	4013      	ands	r3, r2
 8001a64:	d003      	beq.n	8001a6e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <HAL_GPIO_Init+0x2dc>)
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001a74:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <HAL_GPIO_Init+0x2dc>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	43da      	mvns	r2, r3
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4013      	ands	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	025b      	lsls	r3, r3, #9
 8001a8c:	4013      	ands	r3, r2
 8001a8e:	d003      	beq.n	8001a98 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001a90:	693a      	ldr	r2, [r7, #16]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a98:	4b0d      	ldr	r3, [pc, #52]	; (8001ad0 <HAL_GPIO_Init+0x2dc>)
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	40da      	lsrs	r2, r3
 8001aac:	1e13      	subs	r3, r2, #0
 8001aae:	d000      	beq.n	8001ab2 <HAL_GPIO_Init+0x2be>
 8001ab0:	e6a8      	b.n	8001804 <HAL_GPIO_Init+0x10>
  } 
}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	46c0      	nop			; (mov r8, r8)
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	b006      	add	sp, #24
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	40010000 	.word	0x40010000
 8001ac4:	48000400 	.word	0x48000400
 8001ac8:	48000800 	.word	0x48000800
 8001acc:	48000c00 	.word	0x48000c00
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	0008      	movs	r0, r1
 8001ade:	0011      	movs	r1, r2
 8001ae0:	1cbb      	adds	r3, r7, #2
 8001ae2:	1c02      	adds	r2, r0, #0
 8001ae4:	801a      	strh	r2, [r3, #0]
 8001ae6:	1c7b      	adds	r3, r7, #1
 8001ae8:	1c0a      	adds	r2, r1, #0
 8001aea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aec:	1c7b      	adds	r3, r7, #1
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d004      	beq.n	8001afe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001af4:	1cbb      	adds	r3, r7, #2
 8001af6:	881a      	ldrh	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001afc:	e003      	b.n	8001b06 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001afe:	1cbb      	adds	r3, r7, #2
 8001b00:	881a      	ldrh	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b06:	46c0      	nop			; (mov r8, r8)
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	b002      	add	sp, #8
 8001b0c:	bd80      	pop	{r7, pc}
	...

08001b10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e082      	b.n	8001c28 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2241      	movs	r2, #65	; 0x41
 8001b26:	5c9b      	ldrb	r3, [r3, r2]
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d107      	bne.n	8001b3e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2240      	movs	r2, #64	; 0x40
 8001b32:	2100      	movs	r1, #0
 8001b34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	0018      	movs	r0, r3
 8001b3a:	f7ff f923 	bl	8000d84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2241      	movs	r2, #65	; 0x41
 8001b42:	2124      	movs	r1, #36	; 0x24
 8001b44:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2101      	movs	r1, #1
 8001b52:	438a      	bics	r2, r1
 8001b54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685a      	ldr	r2, [r3, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4934      	ldr	r1, [pc, #208]	; (8001c30 <HAL_I2C_Init+0x120>)
 8001b60:	400a      	ands	r2, r1
 8001b62:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4931      	ldr	r1, [pc, #196]	; (8001c34 <HAL_I2C_Init+0x124>)
 8001b70:	400a      	ands	r2, r1
 8001b72:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d108      	bne.n	8001b8e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2180      	movs	r1, #128	; 0x80
 8001b86:	0209      	lsls	r1, r1, #8
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	e007      	b.n	8001b9e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2184      	movs	r1, #132	; 0x84
 8001b98:	0209      	lsls	r1, r1, #8
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d104      	bne.n	8001bb0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	2280      	movs	r2, #128	; 0x80
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	491f      	ldr	r1, [pc, #124]	; (8001c38 <HAL_I2C_Init+0x128>)
 8001bbc:	430a      	orrs	r2, r1
 8001bbe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	491a      	ldr	r1, [pc, #104]	; (8001c34 <HAL_I2C_Init+0x124>)
 8001bcc:	400a      	ands	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	695b      	ldr	r3, [r3, #20]
 8001bd8:	431a      	orrs	r2, r3
 8001bda:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69d9      	ldr	r1, [r3, #28]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a1a      	ldr	r2, [r3, #32]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2101      	movs	r1, #1
 8001c06:	430a      	orrs	r2, r1
 8001c08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2241      	movs	r2, #65	; 0x41
 8001c14:	2120      	movs	r1, #32
 8001c16:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2242      	movs	r2, #66	; 0x42
 8001c22:	2100      	movs	r1, #0
 8001c24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	0018      	movs	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	b002      	add	sp, #8
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	f0ffffff 	.word	0xf0ffffff
 8001c34:	ffff7fff 	.word	0xffff7fff
 8001c38:	02008000 	.word	0x02008000

08001c3c <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8001c3c:	b5b0      	push	{r4, r5, r7, lr}
 8001c3e:	b088      	sub	sp, #32
 8001c40:	af02      	add	r7, sp, #8
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	0008      	movs	r0, r1
 8001c46:	607a      	str	r2, [r7, #4]
 8001c48:	0019      	movs	r1, r3
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	18fb      	adds	r3, r7, r3
 8001c4e:	1c02      	adds	r2, r0, #0
 8001c50:	801a      	strh	r2, [r3, #0]
 8001c52:	2308      	movs	r3, #8
 8001c54:	18fb      	adds	r3, r7, r3
 8001c56:	1c0a      	adds	r2, r1, #0
 8001c58:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2241      	movs	r2, #65	; 0x41
 8001c5e:	5c9b      	ldrb	r3, [r3, r2]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d000      	beq.n	8001c68 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8001c66:	e0dd      	b.n	8001e24 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	699a      	ldr	r2, [r3, #24]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	401a      	ands	r2, r3
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	021b      	lsls	r3, r3, #8
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d101      	bne.n	8001c80 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	e0d2      	b.n	8001e26 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2240      	movs	r2, #64	; 0x40
 8001c84:	5c9b      	ldrb	r3, [r3, r2]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d101      	bne.n	8001c8e <HAL_I2C_Master_Transmit_DMA+0x52>
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	e0cb      	b.n	8001e26 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2240      	movs	r2, #64	; 0x40
 8001c92:	2101      	movs	r1, #1
 8001c94:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	2241      	movs	r2, #65	; 0x41
 8001c9a:	2121      	movs	r1, #33	; 0x21
 8001c9c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	2242      	movs	r2, #66	; 0x42
 8001ca2:	2110      	movs	r1, #16
 8001ca4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	18ba      	adds	r2, r7, r2
 8001cb8:	8812      	ldrh	r2, [r2, #0]
 8001cba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4a5c      	ldr	r2, [pc, #368]	; (8001e30 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8001cc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	4a5b      	ldr	r2, [pc, #364]	; (8001e34 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8001cc6:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	2bff      	cmp	r3, #255	; 0xff
 8001cd0:	d906      	bls.n	8001ce0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	22ff      	movs	r2, #255	; 0xff
 8001cd6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8001cd8:	2380      	movs	r3, #128	; 0x80
 8001cda:	045b      	lsls	r3, r3, #17
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e007      	b.n	8001cf0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce4:	b29a      	uxth	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	049b      	lsls	r3, r3, #18
 8001cee:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d100      	bne.n	8001cfa <HAL_I2C_Master_Transmit_DMA+0xbe>
 8001cf8:	e078      	b.n	8001dec <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d023      	beq.n	8001d4a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d06:	4a4c      	ldr	r2, [pc, #304]	; (8001e38 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8001d08:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0e:	4a4b      	ldr	r2, [pc, #300]	; (8001e3c <HAL_I2C_Master_Transmit_DMA+0x200>)
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d16:	2200      	movs	r2, #0
 8001d18:	62da      	str	r2, [r3, #44]	; 0x2c
        hi2c->hdmatx->XferAbortCallback = NULL;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d1e:	2200      	movs	r2, #0
 8001d20:	635a      	str	r2, [r3, #52]	; 0x34

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	3328      	adds	r3, #40	; 0x28
 8001d2e:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8001d34:	2513      	movs	r5, #19
 8001d36:	197c      	adds	r4, r7, r5
 8001d38:	f7ff fb82 	bl	8001440 <HAL_DMA_Start_IT>
 8001d3c:	0003      	movs	r3, r0
 8001d3e:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8001d40:	197b      	adds	r3, r7, r5
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d13d      	bne.n	8001dc4 <HAL_I2C_Master_Transmit_DMA+0x188>
 8001d48:	e013      	b.n	8001d72 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2241      	movs	r2, #65	; 0x41
 8001d4e:	2120      	movs	r1, #32
 8001d50:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2242      	movs	r2, #66	; 0x42
 8001d56:	2100      	movs	r1, #0
 8001d58:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	431a      	orrs	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2240      	movs	r2, #64	; 0x40
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e059      	b.n	8001e26 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	697c      	ldr	r4, [r7, #20]
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	18fb      	adds	r3, r7, r3
 8001d7e:	8819      	ldrh	r1, [r3, #0]
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	4b2f      	ldr	r3, [pc, #188]	; (8001e40 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	0023      	movs	r3, r4
 8001d88:	f001 fc1c 	bl	80035c4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2240      	movs	r2, #64	; 0x40
 8001da2:	2100      	movs	r1, #0
 8001da4:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2110      	movs	r1, #16
 8001daa:	0018      	movs	r0, r3
 8001dac:	f001 fc44 	bl	8003638 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2180      	movs	r1, #128	; 0x80
 8001dbc:	01c9      	lsls	r1, r1, #7
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	601a      	str	r2, [r3, #0]
 8001dc2:	e02d      	b.n	8001e20 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2241      	movs	r2, #65	; 0x41
 8001dc8:	2120      	movs	r1, #32
 8001dca:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2242      	movs	r2, #66	; 0x42
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd8:	2210      	movs	r2, #16
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	2100      	movs	r1, #0
 8001de6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e01c      	b.n	8001e26 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8001df0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	049c      	lsls	r4, r3, #18
 8001dfc:	230a      	movs	r3, #10
 8001dfe:	18fb      	adds	r3, r7, r3
 8001e00:	8819      	ldrh	r1, [r3, #0]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	4b0e      	ldr	r3, [pc, #56]	; (8001e40 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	0023      	movs	r3, r4
 8001e0a:	f001 fbdb 	bl	80035c4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2240      	movs	r2, #64	; 0x40
 8001e12:	2100      	movs	r1, #0
 8001e14:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2101      	movs	r1, #1
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	f001 fc0c 	bl	8003638 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8001e20:	2300      	movs	r3, #0
 8001e22:	e000      	b.n	8001e26 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e24:	2302      	movs	r3, #2
  }
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b006      	add	sp, #24
 8001e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	ffff0000 	.word	0xffff0000
 8001e34:	0800247d 	.word	0x0800247d
 8001e38:	080034b5 	.word	0x080034b5
 8001e3c:	08003555 	.word	0x08003555
 8001e40:	80002000 	.word	0x80002000
 8001e44:	08001fd1 	.word	0x08001fd1

08001e48 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699b      	ldr	r3, [r3, #24]
 8001e56:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e6c:	68ba      	ldr	r2, [r7, #8]
 8001e6e:	68f9      	ldr	r1, [r7, #12]
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	4798      	blx	r3
  }
}
 8001e74:	46c0      	nop			; (mov r8, r8)
 8001e76:	46bd      	mov	sp, r7
 8001e78:	b004      	add	sp, #16
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	001a      	movs	r2, r3
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	d010      	beq.n	8001ec2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	09db      	lsrs	r3, r3, #7
 8001ea4:	001a      	movs	r2, r3
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001eaa:	d00a      	beq.n	8001ec2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2280      	movs	r2, #128	; 0x80
 8001ebe:	0052      	lsls	r2, r2, #1
 8001ec0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	0a9b      	lsrs	r3, r3, #10
 8001ec6:	001a      	movs	r2, r3
 8001ec8:	2301      	movs	r3, #1
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d010      	beq.n	8001ef0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	09db      	lsrs	r3, r3, #7
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8001ed8:	d00a      	beq.n	8001ef0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	2208      	movs	r2, #8
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	00d2      	lsls	r2, r2, #3
 8001eee:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	0a5b      	lsrs	r3, r3, #9
 8001ef4:	001a      	movs	r2, r3
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d010      	beq.n	8001f1e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	09db      	lsrs	r3, r3, #7
 8001f00:	001a      	movs	r2, r3
 8001f02:	2301      	movs	r3, #1
 8001f04:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8001f06:	d00a      	beq.n	8001f1e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	431a      	orrs	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2280      	movs	r2, #128	; 0x80
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	220b      	movs	r2, #11
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d005      	beq.n	8001f38 <HAL_I2C_ER_IRQHandler+0xbc>
  {
    I2C_ITError(hi2c, tmperror);
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	0011      	movs	r1, r2
 8001f32:	0018      	movs	r0, r3
 8001f34:	f001 f970 	bl	8003218 <I2C_ITError>
  }
}
 8001f38:	46c0      	nop			; (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b006      	add	sp, #24
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001f48:	46c0      	nop			; (mov r8, r8)
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	b002      	add	sp, #8
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001f58:	46c0      	nop			; (mov r8, r8)
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	b002      	add	sp, #8
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001f68:	46c0      	nop			; (mov r8, r8)
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	0008      	movs	r0, r1
 8001f7a:	0011      	movs	r1, r2
 8001f7c:	1cfb      	adds	r3, r7, #3
 8001f7e:	1c02      	adds	r2, r0, #0
 8001f80:	701a      	strb	r2, [r3, #0]
 8001f82:	003b      	movs	r3, r7
 8001f84:	1c0a      	adds	r2, r1, #0
 8001f86:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001f88:	46c0      	nop			; (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8001f98:	46c0      	nop			; (mov r8, r8)
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	b002      	add	sp, #8
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b082      	sub	sp, #8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001fa8:	46c0      	nop			; (mov r8, r8)
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b002      	add	sp, #8
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001fb8:	46c0      	nop			; (mov r8, r8)
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	b002      	add	sp, #8
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001fc8:	46c0      	nop			; (mov r8, r8)
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	b002      	add	sp, #8
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b089      	sub	sp, #36	; 0x24
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2240      	movs	r2, #64	; 0x40
 8001fe4:	5c9b      	ldrb	r3, [r3, r2]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <I2C_Master_ISR_IT+0x1e>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e12b      	b.n	8002246 <I2C_Master_ISR_IT+0x276>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2240      	movs	r2, #64	; 0x40
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	001a      	movs	r2, r3
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	4013      	ands	r3, r2
 8002000:	d014      	beq.n	800202c <I2C_Master_ISR_IT+0x5c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	001a      	movs	r2, r3
 8002008:	2301      	movs	r3, #1
 800200a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800200c:	d00e      	beq.n	800202c <I2C_Master_ISR_IT+0x5c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2210      	movs	r2, #16
 8002014:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800201a:	2204      	movs	r2, #4
 800201c:	431a      	orrs	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	0018      	movs	r0, r3
 8002026:	f001 fa22 	bl	800346e <I2C_Flush_TXDR>
 800202a:	e0f5      	b.n	8002218 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	001a      	movs	r2, r3
 8002032:	2301      	movs	r3, #1
 8002034:	4013      	ands	r3, r2
 8002036:	d023      	beq.n	8002080 <I2C_Master_ISR_IT+0xb0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	089b      	lsrs	r3, r3, #2
 800203c:	001a      	movs	r2, r3
 800203e:	2301      	movs	r3, #1
 8002040:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002042:	d01d      	beq.n	8002080 <I2C_Master_ISR_IT+0xb0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	2204      	movs	r2, #4
 8002048:	4393      	bics	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002068:	3b01      	subs	r3, #1
 800206a:	b29a      	uxth	r2, r3
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800207e:	e0cb      	b.n	8002218 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	001a      	movs	r2, r3
 8002086:	2301      	movs	r3, #1
 8002088:	4013      	ands	r3, r2
 800208a:	d01e      	beq.n	80020ca <I2C_Master_ISR_IT+0xfa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	085b      	lsrs	r3, r3, #1
 8002090:	001a      	movs	r2, r3
 8002092:	2301      	movs	r3, #1
 8002094:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002096:	d018      	beq.n	80020ca <I2C_Master_ISR_IT+0xfa>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	781a      	ldrb	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020be:	b29b      	uxth	r3, r3
 80020c0:	3b01      	subs	r3, #1
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80020c8:	e0a6      	b.n	8002218 <I2C_Master_ISR_IT+0x248>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	09db      	lsrs	r3, r3, #7
 80020ce:	001a      	movs	r2, r3
 80020d0:	2301      	movs	r3, #1
 80020d2:	4013      	ands	r3, r2
 80020d4:	d100      	bne.n	80020d8 <I2C_Master_ISR_IT+0x108>
 80020d6:	e06b      	b.n	80021b0 <I2C_Master_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	099b      	lsrs	r3, r3, #6
 80020dc:	001a      	movs	r2, r3
 80020de:	2301      	movs	r3, #1
 80020e0:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 80020e2:	d065      	beq.n	80021b0 <I2C_Master_ISR_IT+0x1e0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020e8:	b29b      	uxth	r3, r3
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d04a      	beq.n	8002184 <I2C_Master_ISR_IT+0x1b4>
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d146      	bne.n	8002184 <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	2112      	movs	r1, #18
 8002100:	187b      	adds	r3, r7, r1
 8002102:	0592      	lsls	r2, r2, #22
 8002104:	0d92      	lsrs	r2, r2, #22
 8002106:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	2bff      	cmp	r3, #255	; 0xff
 8002110:	d910      	bls.n	8002134 <I2C_Master_ISR_IT+0x164>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	22ff      	movs	r2, #255	; 0xff
 8002116:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800211c:	b2da      	uxtb	r2, r3
 800211e:	2380      	movs	r3, #128	; 0x80
 8002120:	045c      	lsls	r4, r3, #17
 8002122:	187b      	adds	r3, r7, r1
 8002124:	8819      	ldrh	r1, [r3, #0]
 8002126:	68f8      	ldr	r0, [r7, #12]
 8002128:	2300      	movs	r3, #0
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	0023      	movs	r3, r4
 800212e:	f001 fa49 	bl	80035c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002132:	e03c      	b.n	80021ae <I2C_Master_ISR_IT+0x1de>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002138:	b29a      	uxth	r2, r3
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002142:	4a43      	ldr	r2, [pc, #268]	; (8002250 <I2C_Master_ISR_IT+0x280>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00e      	beq.n	8002166 <I2C_Master_ISR_IT+0x196>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800214c:	b2da      	uxtb	r2, r3
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002152:	2312      	movs	r3, #18
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	8819      	ldrh	r1, [r3, #0]
 8002158:	68f8      	ldr	r0, [r7, #12]
 800215a:	2300      	movs	r3, #0
 800215c:	9300      	str	r3, [sp, #0]
 800215e:	0023      	movs	r3, r4
 8002160:	f001 fa30 	bl	80035c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002164:	e023      	b.n	80021ae <I2C_Master_ISR_IT+0x1de>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216a:	b2da      	uxtb	r2, r3
 800216c:	2380      	movs	r3, #128	; 0x80
 800216e:	049c      	lsls	r4, r3, #18
 8002170:	2312      	movs	r3, #18
 8002172:	18fb      	adds	r3, r7, r3
 8002174:	8819      	ldrh	r1, [r3, #0]
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	2300      	movs	r3, #0
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	0023      	movs	r3, r4
 800217e:	f001 fa21 	bl	80035c4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002182:	e014      	b.n	80021ae <I2C_Master_ISR_IT+0x1de>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	049b      	lsls	r3, r3, #18
 800218e:	401a      	ands	r2, r3
 8002190:	2380      	movs	r3, #128	; 0x80
 8002192:	049b      	lsls	r3, r3, #18
 8002194:	429a      	cmp	r2, r3
 8002196:	d004      	beq.n	80021a2 <I2C_Master_ISR_IT+0x1d2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	0018      	movs	r0, r3
 800219c:	f000 fd44 	bl	8002c28 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021a0:	e03a      	b.n	8002218 <I2C_Master_ISR_IT+0x248>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2140      	movs	r1, #64	; 0x40
 80021a6:	0018      	movs	r0, r3
 80021a8:	f001 f836 	bl	8003218 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021ac:	e034      	b.n	8002218 <I2C_Master_ISR_IT+0x248>
 80021ae:	e033      	b.n	8002218 <I2C_Master_ISR_IT+0x248>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	099b      	lsrs	r3, r3, #6
 80021b4:	001a      	movs	r2, r3
 80021b6:	2301      	movs	r3, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	d02d      	beq.n	8002218 <I2C_Master_ISR_IT+0x248>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	001a      	movs	r2, r3
 80021c2:	2301      	movs	r3, #1
 80021c4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80021c6:	d027      	beq.n	8002218 <I2C_Master_ISR_IT+0x248>
  {
    if (hi2c->XferCount == 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d11d      	bne.n	800220e <I2C_Master_ISR_IT+0x23e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	2380      	movs	r3, #128	; 0x80
 80021da:	049b      	lsls	r3, r3, #18
 80021dc:	401a      	ands	r2, r3
 80021de:	2380      	movs	r3, #128	; 0x80
 80021e0:	049b      	lsls	r3, r3, #18
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d018      	beq.n	8002218 <I2C_Master_ISR_IT+0x248>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	4a19      	ldr	r2, [pc, #100]	; (8002250 <I2C_Master_ISR_IT+0x280>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d109      	bne.n	8002204 <I2C_Master_ISR_IT+0x234>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	2180      	movs	r1, #128	; 0x80
 80021fc:	01c9      	lsls	r1, r1, #7
 80021fe:	430a      	orrs	r2, r1
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	e009      	b.n	8002218 <I2C_Master_ISR_IT+0x248>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	0018      	movs	r0, r3
 8002208:	f000 fd0e 	bl	8002c28 <I2C_ITMasterSeqCplt>
 800220c:	e004      	b.n	8002218 <I2C_Master_ISR_IT+0x248>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2140      	movs	r1, #64	; 0x40
 8002212:	0018      	movs	r0, r3
 8002214:	f001 f800 	bl	8003218 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	095b      	lsrs	r3, r3, #5
 800221c:	001a      	movs	r2, r3
 800221e:	2301      	movs	r3, #1
 8002220:	4013      	ands	r3, r2
 8002222:	d00b      	beq.n	800223c <I2C_Master_ISR_IT+0x26c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	095b      	lsrs	r3, r3, #5
 8002228:	001a      	movs	r2, r3
 800222a:	2301      	movs	r3, #1
 800222c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800222e:	d005      	beq.n	800223c <I2C_Master_ISR_IT+0x26c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002230:	697a      	ldr	r2, [r7, #20]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	0011      	movs	r1, r2
 8002236:	0018      	movs	r0, r3
 8002238:	f000 fd9e 	bl	8002d78 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2240      	movs	r2, #64	; 0x40
 8002240:	2100      	movs	r1, #0
 8002242:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	0018      	movs	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	b007      	add	sp, #28
 800224c:	bd90      	pop	{r4, r7, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	ffff0000 	.word	0xffff0000

08002254 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	60b9      	str	r1, [r7, #8]
 800225e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002264:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002266:	68bb      	ldr	r3, [r7, #8]
 8002268:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2240      	movs	r2, #64	; 0x40
 800226e:	5c9b      	ldrb	r3, [r3, r2]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <I2C_Slave_ISR_IT+0x24>
 8002274:	2302      	movs	r3, #2
 8002276:	e0fa      	b.n	800246e <I2C_Slave_ISR_IT+0x21a>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	2101      	movs	r1, #1
 800227e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	001a      	movs	r2, r3
 8002286:	2301      	movs	r3, #1
 8002288:	4013      	ands	r3, r2
 800228a:	d00b      	beq.n	80022a4 <I2C_Slave_ISR_IT+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	001a      	movs	r2, r3
 8002292:	2301      	movs	r3, #1
 8002294:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002296:	d005      	beq.n	80022a4 <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	0011      	movs	r1, r2
 800229e:	0018      	movs	r0, r3
 80022a0:	f000 fe3c 	bl	8002f1c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	091b      	lsrs	r3, r3, #4
 80022a8:	001a      	movs	r2, r3
 80022aa:	2301      	movs	r3, #1
 80022ac:	4013      	ands	r3, r2
 80022ae:	d054      	beq.n	800235a <I2C_Slave_ISR_IT+0x106>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	001a      	movs	r2, r3
 80022b6:	2301      	movs	r3, #1
 80022b8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80022ba:	d04e      	beq.n	800235a <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d12d      	bne.n	8002322 <I2C_Slave_ISR_IT+0xce>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2241      	movs	r2, #65	; 0x41
 80022ca:	5c9b      	ldrb	r3, [r3, r2]
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b28      	cmp	r3, #40	; 0x28
 80022d0:	d10b      	bne.n	80022ea <I2C_Slave_ISR_IT+0x96>
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	2380      	movs	r3, #128	; 0x80
 80022d6:	049b      	lsls	r3, r3, #18
 80022d8:	429a      	cmp	r2, r3
 80022da:	d106      	bne.n	80022ea <I2C_Slave_ISR_IT+0x96>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	0011      	movs	r1, r2
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 ff3e 	bl	8003164 <I2C_ITListenCplt>
 80022e8:	e036      	b.n	8002358 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2241      	movs	r2, #65	; 0x41
 80022ee:	5c9b      	ldrb	r3, [r3, r2]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b29      	cmp	r3, #41	; 0x29
 80022f4:	d110      	bne.n	8002318 <I2C_Slave_ISR_IT+0xc4>
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	4a5f      	ldr	r2, [pc, #380]	; (8002478 <I2C_Slave_ISR_IT+0x224>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00c      	beq.n	8002318 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2210      	movs	r2, #16
 8002304:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	0018      	movs	r0, r3
 800230a:	f001 f8b0 	bl	800346e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	0018      	movs	r0, r3
 8002312:	f000 fccb 	bl	8002cac <I2C_ITSlaveSeqCplt>
 8002316:	e01f      	b.n	8002358 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2210      	movs	r2, #16
 800231e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002320:	e09d      	b.n	800245e <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2210      	movs	r2, #16
 8002328:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	2204      	movs	r2, #4
 8002330:	431a      	orrs	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d005      	beq.n	8002348 <I2C_Slave_ISR_IT+0xf4>
 800233c:	697a      	ldr	r2, [r7, #20]
 800233e:	2380      	movs	r3, #128	; 0x80
 8002340:	045b      	lsls	r3, r3, #17
 8002342:	429a      	cmp	r2, r3
 8002344:	d000      	beq.n	8002348 <I2C_Slave_ISR_IT+0xf4>
 8002346:	e08a      	b.n	800245e <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	0011      	movs	r1, r2
 8002350:	0018      	movs	r0, r3
 8002352:	f000 ff61 	bl	8003218 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002356:	e082      	b.n	800245e <I2C_Slave_ISR_IT+0x20a>
 8002358:	e081      	b.n	800245e <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	089b      	lsrs	r3, r3, #2
 800235e:	001a      	movs	r2, r3
 8002360:	2301      	movs	r3, #1
 8002362:	4013      	ands	r3, r2
 8002364:	d031      	beq.n	80023ca <I2C_Slave_ISR_IT+0x176>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	089b      	lsrs	r3, r3, #2
 800236a:	001a      	movs	r2, r3
 800236c:	2301      	movs	r3, #1
 800236e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002370:	d02b      	beq.n	80023ca <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002376:	b29b      	uxth	r3, r3
 8002378:	2b00      	cmp	r3, #0
 800237a:	d018      	beq.n	80023ae <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d154      	bne.n	8002462 <I2C_Slave_ISR_IT+0x20e>
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	4a2f      	ldr	r2, [pc, #188]	; (8002478 <I2C_Slave_ISR_IT+0x224>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d050      	beq.n	8002462 <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	0018      	movs	r0, r3
 80023c4:	f000 fc72 	bl	8002cac <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80023c8:	e04b      	b.n	8002462 <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	08db      	lsrs	r3, r3, #3
 80023ce:	001a      	movs	r2, r3
 80023d0:	2301      	movs	r3, #1
 80023d2:	4013      	ands	r3, r2
 80023d4:	d00c      	beq.n	80023f0 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	08db      	lsrs	r3, r3, #3
 80023da:	001a      	movs	r2, r3
 80023dc:	2301      	movs	r3, #1
 80023de:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80023e0:	d006      	beq.n	80023f0 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	0011      	movs	r1, r2
 80023e8:	0018      	movs	r0, r3
 80023ea:	f000 fb79 	bl	8002ae0 <I2C_ITAddrCplt>
 80023ee:	e039      	b.n	8002464 <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	085b      	lsrs	r3, r3, #1
 80023f4:	001a      	movs	r2, r3
 80023f6:	2301      	movs	r3, #1
 80023f8:	4013      	ands	r3, r2
 80023fa:	d033      	beq.n	8002464 <I2C_Slave_ISR_IT+0x210>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	001a      	movs	r2, r3
 8002402:	2301      	movs	r3, #1
 8002404:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002406:	d02d      	beq.n	8002464 <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240c:	b29b      	uxth	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d018      	beq.n	8002444 <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242c:	b29b      	uxth	r3, r3
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800243a:	3b01      	subs	r3, #1
 800243c:	b29a      	uxth	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	851a      	strh	r2, [r3, #40]	; 0x28
 8002442:	e00f      	b.n	8002464 <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	2380      	movs	r3, #128	; 0x80
 8002448:	045b      	lsls	r3, r3, #17
 800244a:	429a      	cmp	r2, r3
 800244c:	d002      	beq.n	8002454 <I2C_Slave_ISR_IT+0x200>
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d107      	bne.n	8002464 <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	0018      	movs	r0, r3
 8002458:	f000 fc28 	bl	8002cac <I2C_ITSlaveSeqCplt>
 800245c:	e002      	b.n	8002464 <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 800245e:	46c0      	nop			; (mov r8, r8)
 8002460:	e000      	b.n	8002464 <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 8002462:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2240      	movs	r2, #64	; 0x40
 8002468:	2100      	movs	r1, #0
 800246a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b006      	add	sp, #24
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	ffff0000 	.word	0xffff0000

0800247c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b089      	sub	sp, #36	; 0x24
 8002480:	af02      	add	r7, sp, #8
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2240      	movs	r2, #64	; 0x40
 800248c:	5c9b      	ldrb	r3, [r3, r2]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <I2C_Master_ISR_DMA+0x1a>
 8002492:	2302      	movs	r3, #2
 8002494:	e0f7      	b.n	8002686 <I2C_Master_ISR_DMA+0x20a>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2240      	movs	r2, #64	; 0x40
 800249a:	2101      	movs	r1, #1
 800249c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	001a      	movs	r2, r3
 80024a4:	2301      	movs	r3, #1
 80024a6:	4013      	ands	r3, r2
 80024a8:	d019      	beq.n	80024de <I2C_Master_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	091b      	lsrs	r3, r3, #4
 80024ae:	001a      	movs	r2, r3
 80024b0:	2301      	movs	r3, #1
 80024b2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80024b4:	d013      	beq.n	80024de <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	2210      	movs	r2, #16
 80024bc:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	2204      	movs	r2, #4
 80024c4:	431a      	orrs	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2120      	movs	r1, #32
 80024ce:	0018      	movs	r0, r3
 80024d0:	f001 f8b2 	bl	8003638 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	0018      	movs	r0, r3
 80024d8:	f000 ffc9 	bl	800346e <I2C_Flush_TXDR>
 80024dc:	e0ce      	b.n	800267c <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	09db      	lsrs	r3, r3, #7
 80024e2:	001a      	movs	r2, r3
 80024e4:	2301      	movs	r3, #1
 80024e6:	4013      	ands	r3, r2
 80024e8:	d100      	bne.n	80024ec <I2C_Master_ISR_DMA+0x70>
 80024ea:	e07e      	b.n	80025ea <I2C_Master_ISR_DMA+0x16e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	001a      	movs	r2, r3
 80024f2:	2301      	movs	r3, #1
 80024f4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80024f6:	d100      	bne.n	80024fa <I2C_Master_ISR_DMA+0x7e>
 80024f8:	e077      	b.n	80025ea <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2140      	movs	r1, #64	; 0x40
 8002506:	438a      	bics	r2, r1
 8002508:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d055      	beq.n	80025c0 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	b29a      	uxth	r2, r3
 800251c:	2312      	movs	r3, #18
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	0592      	lsls	r2, r2, #22
 8002522:	0d92      	lsrs	r2, r2, #22
 8002524:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800252a:	b29b      	uxth	r3, r3
 800252c:	2bff      	cmp	r3, #255	; 0xff
 800252e:	d906      	bls.n	800253e <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	22ff      	movs	r2, #255	; 0xff
 8002534:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	045b      	lsls	r3, r3, #17
 800253a:	617b      	str	r3, [r7, #20]
 800253c:	e010      	b.n	8002560 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	4a50      	ldr	r2, [pc, #320]	; (8002690 <I2C_Master_ISR_DMA+0x214>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d003      	beq.n	800255a <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e002      	b.n	8002560 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800255a:	2380      	movs	r3, #128	; 0x80
 800255c:	049b      	lsls	r3, r3, #18
 800255e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	b2da      	uxtb	r2, r3
 8002566:	697c      	ldr	r4, [r7, #20]
 8002568:	2312      	movs	r3, #18
 800256a:	18fb      	adds	r3, r7, r3
 800256c:	8819      	ldrh	r1, [r3, #0]
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	2300      	movs	r3, #0
 8002572:	9300      	str	r3, [sp, #0]
 8002574:	0023      	movs	r3, r4
 8002576:	f001 f825 	bl	80035c4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29a      	uxth	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2241      	movs	r2, #65	; 0x41
 8002590:	5c9b      	ldrb	r3, [r3, r2]
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b22      	cmp	r3, #34	; 0x22
 8002596:	d109      	bne.n	80025ac <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	0209      	lsls	r1, r1, #8
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80025aa:	e067      	b.n	800267c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	01c9      	lsls	r1, r1, #7
 80025ba:	430a      	orrs	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80025be:	e05d      	b.n	800267c <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	685a      	ldr	r2, [r3, #4]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	049b      	lsls	r3, r3, #18
 80025ca:	401a      	ands	r2, r3
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	049b      	lsls	r3, r3, #18
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d004      	beq.n	80025de <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	0018      	movs	r0, r3
 80025d8:	f000 fb26 	bl	8002c28 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80025dc:	e04e      	b.n	800267c <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2140      	movs	r1, #64	; 0x40
 80025e2:	0018      	movs	r0, r3
 80025e4:	f000 fe18 	bl	8003218 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80025e8:	e048      	b.n	800267c <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	099b      	lsrs	r3, r3, #6
 80025ee:	001a      	movs	r2, r3
 80025f0:	2301      	movs	r3, #1
 80025f2:	4013      	ands	r3, r2
 80025f4:	d02e      	beq.n	8002654 <I2C_Master_ISR_DMA+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	099b      	lsrs	r3, r3, #6
 80025fa:	001a      	movs	r2, r3
 80025fc:	2301      	movs	r3, #1
 80025fe:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8002600:	d028      	beq.n	8002654 <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002606:	b29b      	uxth	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d11d      	bne.n	8002648 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	2380      	movs	r3, #128	; 0x80
 8002614:	049b      	lsls	r3, r3, #18
 8002616:	401a      	ands	r2, r3
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	049b      	lsls	r3, r3, #18
 800261c:	429a      	cmp	r2, r3
 800261e:	d02c      	beq.n	800267a <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002624:	4a1a      	ldr	r2, [pc, #104]	; (8002690 <I2C_Master_ISR_DMA+0x214>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d109      	bne.n	800263e <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2180      	movs	r1, #128	; 0x80
 8002636:	01c9      	lsls	r1, r1, #7
 8002638:	430a      	orrs	r2, r1
 800263a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800263c:	e01d      	b.n	800267a <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	0018      	movs	r0, r3
 8002642:	f000 faf1 	bl	8002c28 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8002646:	e018      	b.n	800267a <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2140      	movs	r1, #64	; 0x40
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fde3 	bl	8003218 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002652:	e012      	b.n	800267a <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	095b      	lsrs	r3, r3, #5
 8002658:	001a      	movs	r2, r3
 800265a:	2301      	movs	r3, #1
 800265c:	4013      	ands	r3, r2
 800265e:	d00d      	beq.n	800267c <I2C_Master_ISR_DMA+0x200>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	095b      	lsrs	r3, r3, #5
 8002664:	001a      	movs	r2, r3
 8002666:	2301      	movs	r3, #1
 8002668:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800266a:	d007      	beq.n	800267c <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	0011      	movs	r1, r2
 8002672:	0018      	movs	r0, r3
 8002674:	f000 fb80 	bl	8002d78 <I2C_ITMasterCplt>
 8002678:	e000      	b.n	800267c <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 800267a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2240      	movs	r2, #64	; 0x40
 8002680:	2100      	movs	r1, #0
 8002682:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	0018      	movs	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	b007      	add	sp, #28
 800268c:	bd90      	pop	{r4, r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	ffff0000 	.word	0xffff0000

08002694 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8002694:	b590      	push	{r4, r7, lr}
 8002696:	b089      	sub	sp, #36	; 0x24
 8002698:	af02      	add	r7, sp, #8
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80026a0:	4b92      	ldr	r3, [pc, #584]	; (80028ec <I2C_Mem_ISR_DMA+0x258>)
 80026a2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	2240      	movs	r2, #64	; 0x40
 80026a8:	5c9b      	ldrb	r3, [r3, r2]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <I2C_Mem_ISR_DMA+0x1e>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e118      	b.n	80028e4 <I2C_Mem_ISR_DMA+0x250>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2240      	movs	r2, #64	; 0x40
 80026b6:	2101      	movs	r1, #1
 80026b8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	091b      	lsrs	r3, r3, #4
 80026be:	001a      	movs	r2, r3
 80026c0:	2301      	movs	r3, #1
 80026c2:	4013      	ands	r3, r2
 80026c4:	d019      	beq.n	80026fa <I2C_Mem_ISR_DMA+0x66>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	091b      	lsrs	r3, r3, #4
 80026ca:	001a      	movs	r2, r3
 80026cc:	2301      	movs	r3, #1
 80026ce:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80026d0:	d013      	beq.n	80026fa <I2C_Mem_ISR_DMA+0x66>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2210      	movs	r2, #16
 80026d8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026de:	2204      	movs	r2, #4
 80026e0:	431a      	orrs	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2120      	movs	r1, #32
 80026ea:	0018      	movs	r0, r3
 80026ec:	f000 ffa4 	bl	8003638 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	0018      	movs	r0, r3
 80026f4:	f000 febb 	bl	800346e <I2C_Flush_TXDR>
 80026f8:	e0ef      	b.n	80028da <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	001a      	movs	r2, r3
 8002700:	2301      	movs	r3, #1
 8002702:	4013      	ands	r3, r2
 8002704:	d00f      	beq.n	8002726 <I2C_Mem_ISR_DMA+0x92>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	085b      	lsrs	r3, r3, #1
 800270a:	001a      	movs	r2, r3
 800270c:	2301      	movs	r3, #1
 800270e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002710:	d009      	beq.n	8002726 <I2C_Mem_ISR_DMA+0x92>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800271a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2201      	movs	r2, #1
 8002720:	4252      	negs	r2, r2
 8002722:	651a      	str	r2, [r3, #80]	; 0x50
 8002724:	e0d9      	b.n	80028da <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	09db      	lsrs	r3, r3, #7
 800272a:	001a      	movs	r2, r3
 800272c:	2301      	movs	r3, #1
 800272e:	4013      	ands	r3, r2
 8002730:	d060      	beq.n	80027f4 <I2C_Mem_ISR_DMA+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	001a      	movs	r2, r3
 8002738:	2301      	movs	r3, #1
 800273a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800273c:	d05a      	beq.n	80027f4 <I2C_Mem_ISR_DMA+0x160>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2110      	movs	r1, #16
 8002742:	0018      	movs	r0, r3
 8002744:	f000 ff78 	bl	8003638 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d04a      	beq.n	80027e8 <I2C_Mem_ISR_DMA+0x154>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	2bff      	cmp	r3, #255	; 0xff
 800275a:	d910      	bls.n	800277e <I2C_Mem_ISR_DMA+0xea>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	22ff      	movs	r2, #255	; 0xff
 8002760:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	b299      	uxth	r1, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800276c:	b2da      	uxtb	r2, r3
 800276e:	2380      	movs	r3, #128	; 0x80
 8002770:	045b      	lsls	r3, r3, #17
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	2400      	movs	r4, #0
 8002776:	9400      	str	r4, [sp, #0]
 8002778:	f000 ff24 	bl	80035c4 <I2C_TransferConfig>
 800277c:	e011      	b.n	80027a2 <I2C_Mem_ISR_DMA+0x10e>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29a      	uxth	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800278c:	b299      	uxth	r1, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002792:	b2da      	uxtb	r2, r3
 8002794:	2380      	movs	r3, #128	; 0x80
 8002796:	049b      	lsls	r3, r3, #18
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	2400      	movs	r4, #0
 800279c:	9400      	str	r4, [sp, #0]
 800279e:	f000 ff11 	bl	80035c4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2241      	movs	r2, #65	; 0x41
 80027b8:	5c9b      	ldrb	r3, [r3, r2]
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b22      	cmp	r3, #34	; 0x22
 80027be:	d109      	bne.n	80027d4 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2180      	movs	r1, #128	; 0x80
 80027cc:	0209      	lsls	r1, r1, #8
 80027ce:	430a      	orrs	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80027d2:	e082      	b.n	80028da <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2180      	movs	r1, #128	; 0x80
 80027e0:	01c9      	lsls	r1, r1, #7
 80027e2:	430a      	orrs	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80027e6:	e078      	b.n	80028da <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2140      	movs	r1, #64	; 0x40
 80027ec:	0018      	movs	r0, r3
 80027ee:	f000 fd13 	bl	8003218 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80027f2:	e072      	b.n	80028da <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	099b      	lsrs	r3, r3, #6
 80027f8:	001a      	movs	r2, r3
 80027fa:	2301      	movs	r3, #1
 80027fc:	4013      	ands	r3, r2
 80027fe:	d05a      	beq.n	80028b6 <I2C_Mem_ISR_DMA+0x222>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	099b      	lsrs	r3, r3, #6
 8002804:	001a      	movs	r2, r3
 8002806:	2301      	movs	r3, #1
 8002808:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800280a:	d054      	beq.n	80028b6 <I2C_Mem_ISR_DMA+0x222>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	2241      	movs	r2, #65	; 0x41
 8002810:	5c9b      	ldrb	r3, [r3, r2]
 8002812:	b2db      	uxtb	r3, r3
 8002814:	2b22      	cmp	r3, #34	; 0x22
 8002816:	d101      	bne.n	800281c <I2C_Mem_ISR_DMA+0x188>
    {
      direction = I2C_GENERATE_START_READ;
 8002818:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <I2C_Mem_ISR_DMA+0x25c>)
 800281a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002820:	b29b      	uxth	r3, r3
 8002822:	2bff      	cmp	r3, #255	; 0xff
 8002824:	d911      	bls.n	800284a <I2C_Mem_ISR_DMA+0x1b6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	22ff      	movs	r2, #255	; 0xff
 800282a:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002830:	b299      	uxth	r1, r3
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002836:	b2da      	uxtb	r2, r3
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	045c      	lsls	r4, r3, #17
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	0023      	movs	r3, r4
 8002844:	f000 febe 	bl	80035c4 <I2C_TransferConfig>
 8002848:	e012      	b.n	8002870 <I2C_Mem_ISR_DMA+0x1dc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002858:	b299      	uxth	r1, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	b2da      	uxtb	r2, r3
 8002860:	2380      	movs	r3, #128	; 0x80
 8002862:	049c      	lsls	r4, r3, #18
 8002864:	68f8      	ldr	r0, [r7, #12]
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	0023      	movs	r3, r4
 800286c:	f000 feaa 	bl	80035c4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002874:	b29a      	uxth	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	b29a      	uxth	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2241      	movs	r2, #65	; 0x41
 8002886:	5c9b      	ldrb	r3, [r3, r2]
 8002888:	b2db      	uxtb	r3, r3
 800288a:	2b22      	cmp	r3, #34	; 0x22
 800288c:	d109      	bne.n	80028a2 <I2C_Mem_ISR_DMA+0x20e>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2180      	movs	r1, #128	; 0x80
 800289a:	0209      	lsls	r1, r1, #8
 800289c:	430a      	orrs	r2, r1
 800289e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028a0:	e01b      	b.n	80028da <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2180      	movs	r1, #128	; 0x80
 80028ae:	01c9      	lsls	r1, r1, #7
 80028b0:	430a      	orrs	r2, r1
 80028b2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80028b4:	e011      	b.n	80028da <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	001a      	movs	r2, r3
 80028bc:	2301      	movs	r3, #1
 80028be:	4013      	ands	r3, r2
 80028c0:	d00b      	beq.n	80028da <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	095b      	lsrs	r3, r3, #5
 80028c6:	001a      	movs	r2, r3
 80028c8:	2301      	movs	r3, #1
 80028ca:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80028cc:	d005      	beq.n	80028da <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80028ce:	68ba      	ldr	r2, [r7, #8]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	0011      	movs	r1, r2
 80028d4:	0018      	movs	r0, r3
 80028d6:	f000 fa4f 	bl	8002d78 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2240      	movs	r2, #64	; 0x40
 80028de:	2100      	movs	r1, #0
 80028e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	0018      	movs	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	b007      	add	sp, #28
 80028ea:	bd90      	pop	{r4, r7, pc}
 80028ec:	80002000 	.word	0x80002000
 80028f0:	80002400 	.word	0x80002400

080028f4 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b088      	sub	sp, #32
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2240      	movs	r2, #64	; 0x40
 800290e:	5c9b      	ldrb	r3, [r3, r2]
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <I2C_Slave_ISR_DMA+0x24>
 8002914:	2302      	movs	r3, #2
 8002916:	e0dd      	b.n	8002ad4 <I2C_Slave_ISR_DMA+0x1e0>
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2240      	movs	r2, #64	; 0x40
 800291c:	2101      	movs	r1, #1
 800291e:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	095b      	lsrs	r3, r3, #5
 8002924:	001a      	movs	r2, r3
 8002926:	2301      	movs	r3, #1
 8002928:	4013      	ands	r3, r2
 800292a:	d00b      	beq.n	8002944 <I2C_Slave_ISR_DMA+0x50>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	095b      	lsrs	r3, r3, #5
 8002930:	001a      	movs	r2, r3
 8002932:	2301      	movs	r3, #1
 8002934:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002936:	d005      	beq.n	8002944 <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8002938:	68ba      	ldr	r2, [r7, #8]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	0011      	movs	r1, r2
 800293e:	0018      	movs	r0, r3
 8002940:	f000 faec 	bl	8002f1c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	091b      	lsrs	r3, r3, #4
 8002948:	001a      	movs	r2, r3
 800294a:	2301      	movs	r3, #1
 800294c:	4013      	ands	r3, r2
 800294e:	d100      	bne.n	8002952 <I2C_Slave_ISR_DMA+0x5e>
 8002950:	e0a9      	b.n	8002aa6 <I2C_Slave_ISR_DMA+0x1b2>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	091b      	lsrs	r3, r3, #4
 8002956:	001a      	movs	r2, r3
 8002958:	2301      	movs	r3, #1
 800295a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800295c:	d100      	bne.n	8002960 <I2C_Slave_ISR_DMA+0x6c>
 800295e:	e0a2      	b.n	8002aa6 <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	0b9b      	lsrs	r3, r3, #14
 8002964:	001a      	movs	r2, r3
 8002966:	2301      	movs	r3, #1
 8002968:	4013      	ands	r3, r2
 800296a:	d106      	bne.n	800297a <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	0bdb      	lsrs	r3, r3, #15
 8002970:	001a      	movs	r2, r3
 8002972:	2301      	movs	r3, #1
 8002974:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002976:	d100      	bne.n	800297a <I2C_Slave_ISR_DMA+0x86>
 8002978:	e08e      	b.n	8002a98 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00d      	beq.n	800299e <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0bdb      	lsrs	r3, r3, #15
 8002986:	001a      	movs	r2, r3
 8002988:	2301      	movs	r3, #1
 800298a:	4013      	ands	r3, r2
 800298c:	d007      	beq.n	800299e <I2C_Slave_ISR_DMA+0xaa>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d101      	bne.n	800299e <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 800299a:	2301      	movs	r3, #1
 800299c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00d      	beq.n	80029c2 <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	0b9b      	lsrs	r3, r3, #14
 80029aa:	001a      	movs	r2, r3
 80029ac:	2301      	movs	r3, #1
 80029ae:	4013      	ands	r3, r2
 80029b0:	d007      	beq.n	80029c2 <I2C_Slave_ISR_DMA+0xce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 80029be:	2301      	movs	r3, #1
 80029c0:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d12d      	bne.n	8002a24 <I2C_Slave_ISR_DMA+0x130>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2241      	movs	r2, #65	; 0x41
 80029cc:	5c9b      	ldrb	r3, [r3, r2]
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b28      	cmp	r3, #40	; 0x28
 80029d2:	d10b      	bne.n	80029ec <I2C_Slave_ISR_DMA+0xf8>
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	049b      	lsls	r3, r3, #18
 80029da:	429a      	cmp	r2, r3
 80029dc:	d106      	bne.n	80029ec <I2C_Slave_ISR_DMA+0xf8>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	0011      	movs	r1, r2
 80029e4:	0018      	movs	r0, r3
 80029e6:	f000 fbbd 	bl	8003164 <I2C_ITListenCplt>
 80029ea:	e054      	b.n	8002a96 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2241      	movs	r2, #65	; 0x41
 80029f0:	5c9b      	ldrb	r3, [r3, r2]
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b29      	cmp	r3, #41	; 0x29
 80029f6:	d110      	bne.n	8002a1a <I2C_Slave_ISR_DMA+0x126>
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	4a38      	ldr	r2, [pc, #224]	; (8002adc <I2C_Slave_ISR_DMA+0x1e8>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00c      	beq.n	8002a1a <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2210      	movs	r2, #16
 8002a06:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 fd2f 	bl	800346e <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	0018      	movs	r0, r3
 8002a14:	f000 f94a 	bl	8002cac <I2C_ITSlaveSeqCplt>
 8002a18:	e03d      	b.n	8002a96 <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2210      	movs	r2, #16
 8002a20:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8002a22:	e03e      	b.n	8002aa2 <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2210      	movs	r2, #16
 8002a2a:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a30:	2204      	movs	r2, #4
 8002a32:	431a      	orrs	r2, r3
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8002a38:	2317      	movs	r3, #23
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	2141      	movs	r1, #65	; 0x41
 8002a40:	5c52      	ldrb	r2, [r2, r1]
 8002a42:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d004      	beq.n	8002a54 <I2C_Slave_ISR_DMA+0x160>
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	2380      	movs	r3, #128	; 0x80
 8002a4e:	045b      	lsls	r3, r3, #17
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d126      	bne.n	8002aa2 <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002a54:	2217      	movs	r2, #23
 8002a56:	18bb      	adds	r3, r7, r2
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	2b21      	cmp	r3, #33	; 0x21
 8002a5c:	d003      	beq.n	8002a66 <I2C_Slave_ISR_DMA+0x172>
 8002a5e:	18bb      	adds	r3, r7, r2
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b29      	cmp	r3, #41	; 0x29
 8002a64:	d103      	bne.n	8002a6e <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2221      	movs	r2, #33	; 0x21
 8002a6a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a6c:	e00b      	b.n	8002a86 <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a6e:	2217      	movs	r2, #23
 8002a70:	18bb      	adds	r3, r7, r2
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b22      	cmp	r3, #34	; 0x22
 8002a76:	d003      	beq.n	8002a80 <I2C_Slave_ISR_DMA+0x18c>
 8002a78:	18bb      	adds	r3, r7, r2
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b2a      	cmp	r3, #42	; 0x2a
 8002a7e:	d102      	bne.n	8002a86 <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2222      	movs	r2, #34	; 0x22
 8002a84:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	0011      	movs	r1, r2
 8002a8e:	0018      	movs	r0, r3
 8002a90:	f000 fbc2 	bl	8003218 <I2C_ITError>
      if (treatdmanack == 1U)
 8002a94:	e005      	b.n	8002aa2 <I2C_Slave_ISR_DMA+0x1ae>
 8002a96:	e004      	b.n	8002aa2 <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002aa0:	e013      	b.n	8002aca <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 8002aa2:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002aa4:	e011      	b.n	8002aca <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	08db      	lsrs	r3, r3, #3
 8002aaa:	001a      	movs	r2, r3
 8002aac:	2301      	movs	r3, #1
 8002aae:	4013      	ands	r3, r2
 8002ab0:	d00b      	beq.n	8002aca <I2C_Slave_ISR_DMA+0x1d6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	08db      	lsrs	r3, r3, #3
 8002ab6:	001a      	movs	r2, r3
 8002ab8:	2301      	movs	r3, #1
 8002aba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002abc:	d005      	beq.n	8002aca <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	0011      	movs	r1, r2
 8002ac4:	0018      	movs	r0, r3
 8002ac6:	f000 f80b 	bl	8002ae0 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2240      	movs	r2, #64	; 0x40
 8002ace:	2100      	movs	r1, #0
 8002ad0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b008      	add	sp, #32
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	ffff0000 	.word	0xffff0000

08002ae0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ae0:	b5b0      	push	{r4, r5, r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2241      	movs	r2, #65	; 0x41
 8002aee:	5c9b      	ldrb	r3, [r3, r2]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	001a      	movs	r2, r3
 8002af4:	2328      	movs	r3, #40	; 0x28
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b28      	cmp	r3, #40	; 0x28
 8002afa:	d000      	beq.n	8002afe <I2C_ITAddrCplt+0x1e>
 8002afc:	e088      	b.n	8002c10 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	699b      	ldr	r3, [r3, #24]
 8002b04:	0c1b      	lsrs	r3, r3, #16
 8002b06:	b2da      	uxtb	r2, r3
 8002b08:	250f      	movs	r5, #15
 8002b0a:	197b      	adds	r3, r7, r5
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	400a      	ands	r2, r1
 8002b10:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	0c1b      	lsrs	r3, r3, #16
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	200c      	movs	r0, #12
 8002b1e:	183b      	adds	r3, r7, r0
 8002b20:	21fe      	movs	r1, #254	; 0xfe
 8002b22:	400a      	ands	r2, r1
 8002b24:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	240a      	movs	r4, #10
 8002b30:	193b      	adds	r3, r7, r4
 8002b32:	0592      	lsls	r2, r2, #22
 8002b34:	0d92      	lsrs	r2, r2, #22
 8002b36:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	2308      	movs	r3, #8
 8002b42:	18fb      	adds	r3, r7, r3
 8002b44:	21fe      	movs	r1, #254	; 0xfe
 8002b46:	400a      	ands	r2, r1
 8002b48:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d148      	bne.n	8002be4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002b52:	0021      	movs	r1, r4
 8002b54:	187b      	adds	r3, r7, r1
 8002b56:	881b      	ldrh	r3, [r3, #0]
 8002b58:	09db      	lsrs	r3, r3, #7
 8002b5a:	b29a      	uxth	r2, r3
 8002b5c:	183b      	adds	r3, r7, r0
 8002b5e:	881b      	ldrh	r3, [r3, #0]
 8002b60:	4053      	eors	r3, r2
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	001a      	movs	r2, r3
 8002b66:	2306      	movs	r3, #6
 8002b68:	4013      	ands	r3, r2
 8002b6a:	d120      	bne.n	8002bae <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8002b6c:	183b      	adds	r3, r7, r0
 8002b6e:	187a      	adds	r2, r7, r1
 8002b70:	8812      	ldrh	r2, [r2, #0]
 8002b72:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b78:	1c5a      	adds	r2, r3, #1
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d14c      	bne.n	8002c20 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2208      	movs	r2, #8
 8002b92:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2240      	movs	r2, #64	; 0x40
 8002b98:	2100      	movs	r1, #0
 8002b9a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b9c:	183b      	adds	r3, r7, r0
 8002b9e:	881a      	ldrh	r2, [r3, #0]
 8002ba0:	197b      	adds	r3, r7, r5
 8002ba2:	7819      	ldrb	r1, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f7ff f9e2 	bl	8001f70 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002bac:	e038      	b.n	8002c20 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002bae:	240c      	movs	r4, #12
 8002bb0:	193b      	adds	r3, r7, r4
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	18ba      	adds	r2, r7, r2
 8002bb6:	8812      	ldrh	r2, [r2, #0]
 8002bb8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002bba:	2380      	movs	r3, #128	; 0x80
 8002bbc:	021a      	lsls	r2, r3, #8
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	0011      	movs	r1, r2
 8002bc2:	0018      	movs	r0, r3
 8002bc4:	f000 fdc6 	bl	8003754 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2240      	movs	r2, #64	; 0x40
 8002bcc:	2100      	movs	r1, #0
 8002bce:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002bd0:	193b      	adds	r3, r7, r4
 8002bd2:	881a      	ldrh	r2, [r3, #0]
 8002bd4:	230f      	movs	r3, #15
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	7819      	ldrb	r1, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	f7ff f9c7 	bl	8001f70 <HAL_I2C_AddrCallback>
}
 8002be2:	e01d      	b.n	8002c20 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002be4:	2380      	movs	r3, #128	; 0x80
 8002be6:	021a      	lsls	r2, r3, #8
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	0011      	movs	r1, r2
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 fdb1 	bl	8003754 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2240      	movs	r2, #64	; 0x40
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002bfa:	230c      	movs	r3, #12
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	881a      	ldrh	r2, [r3, #0]
 8002c00:	230f      	movs	r3, #15
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	7819      	ldrb	r1, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	0018      	movs	r0, r3
 8002c0a:	f7ff f9b1 	bl	8001f70 <HAL_I2C_AddrCallback>
}
 8002c0e:	e007      	b.n	8002c20 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2208      	movs	r2, #8
 8002c16:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2240      	movs	r2, #64	; 0x40
 8002c1c:	2100      	movs	r1, #0
 8002c1e:	5499      	strb	r1, [r3, r2]
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bdb0      	pop	{r4, r5, r7, pc}

08002c28 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2242      	movs	r2, #66	; 0x42
 8002c34:	2100      	movs	r1, #0
 8002c36:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2241      	movs	r2, #65	; 0x41
 8002c3c:	5c9b      	ldrb	r3, [r3, r2]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b21      	cmp	r3, #33	; 0x21
 8002c42:	d117      	bne.n	8002c74 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2241      	movs	r2, #65	; 0x41
 8002c48:	2120      	movs	r1, #32
 8002c4a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2211      	movs	r2, #17
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	f000 fd79 	bl	8003754 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2240      	movs	r2, #64	; 0x40
 8002c66:	2100      	movs	r1, #0
 8002c68:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	0018      	movs	r0, r3
 8002c6e:	f7fe f82b 	bl	8000cc8 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002c72:	e016      	b.n	8002ca2 <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2241      	movs	r2, #65	; 0x41
 8002c78:	2120      	movs	r1, #32
 8002c7a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2212      	movs	r2, #18
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2102      	movs	r1, #2
 8002c8c:	0018      	movs	r0, r3
 8002c8e:	f000 fd61 	bl	8003754 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2240      	movs	r2, #64	; 0x40
 8002c96:	2100      	movs	r1, #0
 8002c98:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	f7ff f94f 	bl	8001f40 <HAL_I2C_MasterRxCpltCallback>
}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b002      	add	sp, #8
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2242      	movs	r2, #66	; 0x42
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	0b9b      	lsrs	r3, r3, #14
 8002cc8:	001a      	movs	r2, r3
 8002cca:	2301      	movs	r3, #1
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d008      	beq.n	8002ce2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4925      	ldr	r1, [pc, #148]	; (8002d70 <I2C_ITSlaveSeqCplt+0xc4>)
 8002cdc:	400a      	ands	r2, r1
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e00d      	b.n	8002cfe <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	0bdb      	lsrs	r3, r3, #15
 8002ce6:	001a      	movs	r2, r3
 8002ce8:	2301      	movs	r3, #1
 8002cea:	4013      	ands	r3, r2
 8002cec:	d007      	beq.n	8002cfe <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	491e      	ldr	r1, [pc, #120]	; (8002d74 <I2C_ITSlaveSeqCplt+0xc8>)
 8002cfa:	400a      	ands	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2241      	movs	r2, #65	; 0x41
 8002d02:	5c9b      	ldrb	r3, [r3, r2]
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b29      	cmp	r3, #41	; 0x29
 8002d08:	d114      	bne.n	8002d34 <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2241      	movs	r2, #65	; 0x41
 8002d0e:	2128      	movs	r1, #40	; 0x28
 8002d10:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2221      	movs	r2, #33	; 0x21
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	0018      	movs	r0, r3
 8002d1e:	f000 fd19 	bl	8003754 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2240      	movs	r2, #64	; 0x40
 8002d26:	2100      	movs	r1, #0
 8002d28:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7ff f90f 	bl	8001f50 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d32:	e019      	b.n	8002d68 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2241      	movs	r2, #65	; 0x41
 8002d38:	5c9b      	ldrb	r3, [r3, r2]
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d3e:	d113      	bne.n	8002d68 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2241      	movs	r2, #65	; 0x41
 8002d44:	2128      	movs	r1, #40	; 0x28
 8002d46:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2222      	movs	r2, #34	; 0x22
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2102      	movs	r1, #2
 8002d52:	0018      	movs	r0, r3
 8002d54:	f000 fcfe 	bl	8003754 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2240      	movs	r2, #64	; 0x40
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	0018      	movs	r0, r3
 8002d64:	f7ff f8fc 	bl	8001f60 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b004      	add	sp, #16
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	ffffbfff 	.word	0xffffbfff
 8002d74:	ffff7fff 	.word	0xffff7fff

08002d78 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2241      	movs	r2, #65	; 0x41
 8002d92:	5c9b      	ldrb	r3, [r3, r2]
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	2b21      	cmp	r3, #33	; 0x21
 8002d98:	d108      	bne.n	8002dac <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2101      	movs	r1, #1
 8002d9e:	0018      	movs	r0, r3
 8002da0:	f000 fcd8 	bl	8003754 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2211      	movs	r2, #17
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
 8002daa:	e00d      	b.n	8002dc8 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2241      	movs	r2, #65	; 0x41
 8002db0:	5c9b      	ldrb	r3, [r3, r2]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b22      	cmp	r3, #34	; 0x22
 8002db6:	d107      	bne.n	8002dc8 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2102      	movs	r1, #2
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f000 fcc9 	bl	8003754 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2212      	movs	r2, #18
 8002dc6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4950      	ldr	r1, [pc, #320]	; (8002f14 <I2C_ITMasterCplt+0x19c>)
 8002dd4:	400a      	ands	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4d      	ldr	r2, [pc, #308]	; (8002f18 <I2C_ITMasterCplt+0x1a0>)
 8002de2:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	091b      	lsrs	r3, r3, #4
 8002de8:	001a      	movs	r2, r3
 8002dea:	2301      	movs	r3, #1
 8002dec:	4013      	ands	r3, r2
 8002dee:	d009      	beq.n	8002e04 <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2210      	movs	r2, #16
 8002df6:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	2204      	movs	r2, #4
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2241      	movs	r2, #65	; 0x41
 8002e08:	5c9b      	ldrb	r3, [r3, r2]
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b60      	cmp	r3, #96	; 0x60
 8002e0e:	d10b      	bne.n	8002e28 <I2C_ITMasterCplt+0xb0>
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	089b      	lsrs	r3, r3, #2
 8002e14:	001a      	movs	r2, r3
 8002e16:	2301      	movs	r3, #1
 8002e18:	4013      	ands	r3, r2
 8002e1a:	d005      	beq.n	8002e28 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002e26:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 fb1f 	bl	800346e <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2241      	movs	r2, #65	; 0x41
 8002e3a:	5c9b      	ldrb	r3, [r3, r2]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b60      	cmp	r3, #96	; 0x60
 8002e40:	d002      	beq.n	8002e48 <I2C_ITMasterCplt+0xd0>
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0011      	movs	r1, r2
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 f9e1 	bl	8003218 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002e56:	e058      	b.n	8002f0a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2241      	movs	r2, #65	; 0x41
 8002e5c:	5c9b      	ldrb	r3, [r3, r2]
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	2b21      	cmp	r3, #33	; 0x21
 8002e62:	d126      	bne.n	8002eb2 <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2241      	movs	r2, #65	; 0x41
 8002e68:	2120      	movs	r1, #32
 8002e6a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2242      	movs	r2, #66	; 0x42
 8002e76:	5c9b      	ldrb	r3, [r3, r2]
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d10c      	bne.n	8002e98 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2242      	movs	r2, #66	; 0x42
 8002e82:	2100      	movs	r1, #0
 8002e84:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2240      	movs	r2, #64	; 0x40
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	0018      	movs	r0, r3
 8002e92:	f7ff f885 	bl	8001fa0 <HAL_I2C_MemTxCpltCallback>
}
 8002e96:	e038      	b.n	8002f0a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2242      	movs	r2, #66	; 0x42
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2240      	movs	r2, #64	; 0x40
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	f7fd ff0c 	bl	8000cc8 <HAL_I2C_MasterTxCpltCallback>
}
 8002eb0:	e02b      	b.n	8002f0a <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2241      	movs	r2, #65	; 0x41
 8002eb6:	5c9b      	ldrb	r3, [r3, r2]
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b22      	cmp	r3, #34	; 0x22
 8002ebc:	d125      	bne.n	8002f0a <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2241      	movs	r2, #65	; 0x41
 8002ec2:	2120      	movs	r1, #32
 8002ec4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2242      	movs	r2, #66	; 0x42
 8002ed0:	5c9b      	ldrb	r3, [r3, r2]
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b40      	cmp	r3, #64	; 0x40
 8002ed6:	d10c      	bne.n	8002ef2 <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2242      	movs	r2, #66	; 0x42
 8002edc:	2100      	movs	r1, #0
 8002ede:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2240      	movs	r2, #64	; 0x40
 8002ee4:	2100      	movs	r1, #0
 8002ee6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	0018      	movs	r0, r3
 8002eec:	f7ff f860 	bl	8001fb0 <HAL_I2C_MemRxCpltCallback>
}
 8002ef0:	e00b      	b.n	8002f0a <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2242      	movs	r2, #66	; 0x42
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2240      	movs	r2, #64	; 0x40
 8002efe:	2100      	movs	r1, #0
 8002f00:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	0018      	movs	r0, r3
 8002f06:	f7ff f81b 	bl	8001f40 <HAL_I2C_MasterRxCpltCallback>
}
 8002f0a:	46c0      	nop			; (mov r8, r8)
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b006      	add	sp, #24
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	fe00e800 	.word	0xfe00e800
 8002f18:	ffff0000 	.word	0xffff0000

08002f1c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f32:	200f      	movs	r0, #15
 8002f34:	183b      	adds	r3, r7, r0
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	2141      	movs	r1, #65	; 0x41
 8002f3a:	5c52      	ldrb	r2, [r2, r1]
 8002f3c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2220      	movs	r2, #32
 8002f44:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f46:	183b      	adds	r3, r7, r0
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	2b21      	cmp	r3, #33	; 0x21
 8002f4c:	d003      	beq.n	8002f56 <I2C_ITSlaveCplt+0x3a>
 8002f4e:	183b      	adds	r3, r7, r0
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b29      	cmp	r3, #41	; 0x29
 8002f54:	d109      	bne.n	8002f6a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002f56:	4a7d      	ldr	r2, [pc, #500]	; (800314c <I2C_ITSlaveCplt+0x230>)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	0011      	movs	r1, r2
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f000 fbf9 	bl	8003754 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2221      	movs	r2, #33	; 0x21
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
 8002f68:	e011      	b.n	8002f8e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002f6a:	220f      	movs	r2, #15
 8002f6c:	18bb      	adds	r3, r7, r2
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	2b22      	cmp	r3, #34	; 0x22
 8002f72:	d003      	beq.n	8002f7c <I2C_ITSlaveCplt+0x60>
 8002f74:	18bb      	adds	r3, r7, r2
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b2a      	cmp	r3, #42	; 0x2a
 8002f7a:	d108      	bne.n	8002f8e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002f7c:	4a74      	ldr	r2, [pc, #464]	; (8003150 <I2C_ITSlaveCplt+0x234>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0011      	movs	r1, r2
 8002f82:	0018      	movs	r0, r3
 8002f84:	f000 fbe6 	bl	8003754 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2222      	movs	r2, #34	; 0x22
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2180      	movs	r1, #128	; 0x80
 8002f9a:	0209      	lsls	r1, r1, #8
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	496a      	ldr	r1, [pc, #424]	; (8003154 <I2C_ITSlaveCplt+0x238>)
 8002fac:	400a      	ands	r2, r1
 8002fae:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	0018      	movs	r0, r3
 8002fb4:	f000 fa5b 	bl	800346e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	0b9b      	lsrs	r3, r3, #14
 8002fbc:	001a      	movs	r2, r3
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d013      	beq.n	8002fec <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4962      	ldr	r1, [pc, #392]	; (8003158 <I2C_ITSlaveCplt+0x23c>)
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d020      	beq.n	800301e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002fea:	e018      	b.n	800301e <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	0bdb      	lsrs	r3, r3, #15
 8002ff0:	001a      	movs	r2, r3
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d012      	beq.n	800301e <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4956      	ldr	r1, [pc, #344]	; (800315c <I2C_ITSlaveCplt+0x240>)
 8003004:	400a      	ands	r2, r1
 8003006:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800300c:	2b00      	cmp	r3, #0
 800300e:	d006      	beq.n	800301e <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	b29a      	uxth	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	001a      	movs	r2, r3
 8003024:	2301      	movs	r3, #1
 8003026:	4013      	ands	r3, r2
 8003028:	d020      	beq.n	800306c <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	2204      	movs	r2, #4
 800302e:	4393      	bics	r3, r2
 8003030:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00c      	beq.n	800306c <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003056:	3b01      	subs	r3, #1
 8003058:	b29a      	uxth	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	3b01      	subs	r3, #1
 8003066:	b29a      	uxth	r2, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003070:	b29b      	uxth	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d005      	beq.n	8003082 <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	2204      	movs	r2, #4
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2242      	movs	r2, #66	; 0x42
 8003086:	2100      	movs	r1, #0
 8003088:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003094:	2b00      	cmp	r3, #0
 8003096:	d013      	beq.n	80030c0 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	0011      	movs	r1, r2
 80030a0:	0018      	movs	r0, r3
 80030a2:	f000 f8b9 	bl	8003218 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2241      	movs	r2, #65	; 0x41
 80030aa:	5c9b      	ldrb	r3, [r3, r2]
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b28      	cmp	r3, #40	; 0x28
 80030b0:	d147      	bne.n	8003142 <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	0011      	movs	r1, r2
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 f853 	bl	8003164 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030be:	e040      	b.n	8003142 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	4a26      	ldr	r2, [pc, #152]	; (8003160 <I2C_ITSlaveCplt+0x244>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d016      	beq.n	80030f8 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f7ff fded 	bl	8002cac <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a22      	ldr	r2, [pc, #136]	; (8003160 <I2C_ITSlaveCplt+0x244>)
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2241      	movs	r2, #65	; 0x41
 80030dc:	2120      	movs	r1, #32
 80030de:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2240      	movs	r2, #64	; 0x40
 80030ea:	2100      	movs	r1, #0
 80030ec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7fe ff4d 	bl	8001f90 <HAL_I2C_ListenCpltCallback>
}
 80030f6:	e024      	b.n	8003142 <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2241      	movs	r2, #65	; 0x41
 80030fc:	5c9b      	ldrb	r3, [r3, r2]
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b22      	cmp	r3, #34	; 0x22
 8003102:	d10f      	bne.n	8003124 <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2241      	movs	r2, #65	; 0x41
 8003108:	2120      	movs	r1, #32
 800310a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2240      	movs	r2, #64	; 0x40
 8003116:	2100      	movs	r1, #0
 8003118:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	0018      	movs	r0, r3
 800311e:	f7fe ff1f 	bl	8001f60 <HAL_I2C_SlaveRxCpltCallback>
}
 8003122:	e00e      	b.n	8003142 <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2241      	movs	r2, #65	; 0x41
 8003128:	2120      	movs	r1, #32
 800312a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2240      	movs	r2, #64	; 0x40
 8003136:	2100      	movs	r1, #0
 8003138:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	0018      	movs	r0, r3
 800313e:	f7fe ff07 	bl	8001f50 <HAL_I2C_SlaveTxCpltCallback>
}
 8003142:	46c0      	nop			; (mov r8, r8)
 8003144:	46bd      	mov	sp, r7
 8003146:	b006      	add	sp, #24
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	00008001 	.word	0x00008001
 8003150:	00008002 	.word	0x00008002
 8003154:	fe00e800 	.word	0xfe00e800
 8003158:	ffffbfff 	.word	0xffffbfff
 800315c:	ffff7fff 	.word	0xffff7fff
 8003160:	ffff0000 	.word	0xffff0000

08003164 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a27      	ldr	r2, [pc, #156]	; (8003210 <I2C_ITListenCplt+0xac>)
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2241      	movs	r2, #65	; 0x41
 800317e:	2120      	movs	r1, #32
 8003180:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2242      	movs	r2, #66	; 0x42
 8003186:	2100      	movs	r1, #0
 8003188:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	089b      	lsrs	r3, r3, #2
 8003194:	001a      	movs	r2, r3
 8003196:	2301      	movs	r3, #1
 8003198:	4013      	ands	r3, r2
 800319a:	d022      	beq.n	80031e2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	b2d2      	uxtb	r2, r2
 80031a8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d012      	beq.n	80031e2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031c0:	3b01      	subs	r3, #1
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	3b01      	subs	r3, #1
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031da:	2204      	movs	r2, #4
 80031dc:	431a      	orrs	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80031e2:	4a0c      	ldr	r2, [pc, #48]	; (8003214 <I2C_ITListenCplt+0xb0>)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	0011      	movs	r1, r2
 80031e8:	0018      	movs	r0, r3
 80031ea:	f000 fab3 	bl	8003754 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2210      	movs	r2, #16
 80031f4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2240      	movs	r2, #64	; 0x40
 80031fa:	2100      	movs	r1, #0
 80031fc:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	0018      	movs	r0, r3
 8003202:	f7fe fec5 	bl	8001f90 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003206:	46c0      	nop			; (mov r8, r8)
 8003208:	46bd      	mov	sp, r7
 800320a:	b002      	add	sp, #8
 800320c:	bd80      	pop	{r7, pc}
 800320e:	46c0      	nop			; (mov r8, r8)
 8003210:	ffff0000 	.word	0xffff0000
 8003214:	00008003 	.word	0x00008003

08003218 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003222:	200f      	movs	r0, #15
 8003224:	183b      	adds	r3, r7, r0
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	2141      	movs	r1, #65	; 0x41
 800322a:	5c52      	ldrb	r2, [r2, r1]
 800322c:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2242      	movs	r2, #66	; 0x42
 8003232:	2100      	movs	r1, #0
 8003234:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a72      	ldr	r2, [pc, #456]	; (8003404 <I2C_ITError+0x1ec>)
 800323a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	431a      	orrs	r2, r3
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800324e:	183b      	adds	r3, r7, r0
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b28      	cmp	r3, #40	; 0x28
 8003254:	d007      	beq.n	8003266 <I2C_ITError+0x4e>
 8003256:	183b      	adds	r3, r7, r0
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b29      	cmp	r3, #41	; 0x29
 800325c:	d003      	beq.n	8003266 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800325e:	183b      	adds	r3, r7, r0
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b2a      	cmp	r3, #42	; 0x2a
 8003264:	d10c      	bne.n	8003280 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2103      	movs	r1, #3
 800326a:	0018      	movs	r0, r3
 800326c:	f000 fa72 	bl	8003754 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2241      	movs	r2, #65	; 0x41
 8003274:	2128      	movs	r1, #40	; 0x28
 8003276:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a63      	ldr	r2, [pc, #396]	; (8003408 <I2C_ITError+0x1f0>)
 800327c:	635a      	str	r2, [r3, #52]	; 0x34
 800327e:	e032      	b.n	80032e6 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003280:	4a62      	ldr	r2, [pc, #392]	; (800340c <I2C_ITError+0x1f4>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	0011      	movs	r1, r2
 8003286:	0018      	movs	r0, r3
 8003288:	f000 fa64 	bl	8003754 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	0018      	movs	r0, r3
 8003290:	f000 f8ed 	bl	800346e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2241      	movs	r2, #65	; 0x41
 8003298:	5c9b      	ldrb	r3, [r3, r2]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b60      	cmp	r3, #96	; 0x60
 800329e:	d01f      	beq.n	80032e0 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2241      	movs	r2, #65	; 0x41
 80032a4:	2120      	movs	r1, #32
 80032a6:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	699b      	ldr	r3, [r3, #24]
 80032ae:	2220      	movs	r2, #32
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d114      	bne.n	80032e0 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	2210      	movs	r2, #16
 80032be:	4013      	ands	r3, r2
 80032c0:	2b10      	cmp	r3, #16
 80032c2:	d109      	bne.n	80032d8 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2210      	movs	r2, #16
 80032ca:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d0:	2204      	movs	r2, #4
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2220      	movs	r2, #32
 80032de:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d03b      	beq.n	800336c <I2C_ITError+0x154>
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2b11      	cmp	r3, #17
 80032f8:	d002      	beq.n	8003300 <I2C_ITError+0xe8>
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b21      	cmp	r3, #33	; 0x21
 80032fe:	d135      	bne.n	800336c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	01db      	lsls	r3, r3, #7
 800330a:	401a      	ands	r2, r3
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	01db      	lsls	r3, r3, #7
 8003310:	429a      	cmp	r2, r3
 8003312:	d107      	bne.n	8003324 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	493c      	ldr	r1, [pc, #240]	; (8003410 <I2C_ITError+0x1f8>)
 8003320:	400a      	ands	r2, r1
 8003322:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	0018      	movs	r0, r3
 800332a:	f7fe fa0e 	bl	800174a <HAL_DMA_GetState>
 800332e:	0003      	movs	r3, r0
 8003330:	2b01      	cmp	r3, #1
 8003332:	d016      	beq.n	8003362 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003338:	4a36      	ldr	r2, [pc, #216]	; (8003414 <I2C_ITError+0x1fc>)
 800333a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2240      	movs	r2, #64	; 0x40
 8003340:	2100      	movs	r1, #0
 8003342:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003348:	0018      	movs	r0, r3
 800334a:	f7fe f917 	bl	800157c <HAL_DMA_Abort_IT>
 800334e:	1e03      	subs	r3, r0, #0
 8003350:	d051      	beq.n	80033f6 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003356:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335c:	0018      	movs	r0, r3
 800335e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003360:	e049      	b.n	80033f6 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	0018      	movs	r0, r3
 8003366:	f000 f859 	bl	800341c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800336a:	e044      	b.n	80033f6 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003370:	2b00      	cmp	r3, #0
 8003372:	d03b      	beq.n	80033ec <I2C_ITError+0x1d4>
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b12      	cmp	r3, #18
 8003378:	d002      	beq.n	8003380 <I2C_ITError+0x168>
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	2b22      	cmp	r3, #34	; 0x22
 800337e:	d135      	bne.n	80033ec <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	401a      	ands	r2, r3
 800338c:	2380      	movs	r3, #128	; 0x80
 800338e:	021b      	lsls	r3, r3, #8
 8003390:	429a      	cmp	r2, r3
 8003392:	d107      	bne.n	80033a4 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	491e      	ldr	r1, [pc, #120]	; (8003418 <I2C_ITError+0x200>)
 80033a0:	400a      	ands	r2, r1
 80033a2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a8:	0018      	movs	r0, r3
 80033aa:	f7fe f9ce 	bl	800174a <HAL_DMA_GetState>
 80033ae:	0003      	movs	r3, r0
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d016      	beq.n	80033e2 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	4a16      	ldr	r2, [pc, #88]	; (8003414 <I2C_ITError+0x1fc>)
 80033ba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2240      	movs	r2, #64	; 0x40
 80033c0:	2100      	movs	r1, #0
 80033c2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7fe f8d7 	bl	800157c <HAL_DMA_Abort_IT>
 80033ce:	1e03      	subs	r3, r0, #0
 80033d0:	d013      	beq.n	80033fa <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033dc:	0018      	movs	r0, r3
 80033de:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033e0:	e00b      	b.n	80033fa <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	0018      	movs	r0, r3
 80033e6:	f000 f819 	bl	800341c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033ea:	e006      	b.n	80033fa <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	0018      	movs	r0, r3
 80033f0:	f000 f814 	bl	800341c <I2C_TreatErrorCallback>
  }
}
 80033f4:	e002      	b.n	80033fc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80033f6:	46c0      	nop			; (mov r8, r8)
 80033f8:	e000      	b.n	80033fc <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80033fa:	46c0      	nop			; (mov r8, r8)
}
 80033fc:	46c0      	nop			; (mov r8, r8)
 80033fe:	46bd      	mov	sp, r7
 8003400:	b004      	add	sp, #16
 8003402:	bd80      	pop	{r7, pc}
 8003404:	ffff0000 	.word	0xffff0000
 8003408:	08002255 	.word	0x08002255
 800340c:	00008003 	.word	0x00008003
 8003410:	ffffbfff 	.word	0xffffbfff
 8003414:	08003587 	.word	0x08003587
 8003418:	ffff7fff 	.word	0xffff7fff

0800341c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2241      	movs	r2, #65	; 0x41
 8003428:	5c9b      	ldrb	r3, [r3, r2]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b60      	cmp	r3, #96	; 0x60
 800342e:	d10f      	bne.n	8003450 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2241      	movs	r2, #65	; 0x41
 8003434:	2120      	movs	r1, #32
 8003436:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2240      	movs	r2, #64	; 0x40
 8003442:	2100      	movs	r1, #0
 8003444:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	0018      	movs	r0, r3
 800344a:	f7fe fdb9 	bl	8001fc0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800344e:	e00a      	b.n	8003466 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2240      	movs	r2, #64	; 0x40
 800345a:	2100      	movs	r1, #0
 800345c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	0018      	movs	r0, r3
 8003462:	f7fd fc3f 	bl	8000ce4 <HAL_I2C_ErrorCallback>
}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	46bd      	mov	sp, r7
 800346a:	b002      	add	sp, #8
 800346c:	bd80      	pop	{r7, pc}

0800346e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800346e:	b580      	push	{r7, lr}
 8003470:	b082      	sub	sp, #8
 8003472:	af00      	add	r7, sp, #0
 8003474:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	2202      	movs	r2, #2
 800347e:	4013      	ands	r3, r2
 8003480:	2b02      	cmp	r3, #2
 8003482:	d103      	bne.n	800348c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2200      	movs	r2, #0
 800348a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2201      	movs	r2, #1
 8003494:	4013      	ands	r3, r2
 8003496:	2b01      	cmp	r3, #1
 8003498:	d007      	beq.n	80034aa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	699a      	ldr	r2, [r3, #24]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	2101      	movs	r1, #1
 80034a6:	430a      	orrs	r2, r1
 80034a8:	619a      	str	r2, [r3, #24]
  }
}
 80034aa:	46c0      	nop			; (mov r8, r8)
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b002      	add	sp, #8
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4920      	ldr	r1, [pc, #128]	; (8003550 <I2C_DMAMasterTransmitCplt+0x9c>)
 80034ce:	400a      	ands	r2, r1
 80034d0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d105      	bne.n	80034e8 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2120      	movs	r1, #32
 80034e0:	0018      	movs	r0, r3
 80034e2:	f000 f8a9 	bl	8003638 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80034e6:	e02e      	b.n	8003546 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80034f0:	189a      	adds	r2, r3, r2
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	2bff      	cmp	r3, #255	; 0xff
 80034fe:	d903      	bls.n	8003508 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	22ff      	movs	r2, #255	; 0xff
 8003504:	851a      	strh	r2, [r3, #40]	; 0x28
 8003506:	e004      	b.n	8003512 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	0019      	movs	r1, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3328      	adds	r3, #40	; 0x28
 8003522:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8003528:	f7fd ff8a 	bl	8001440 <HAL_DMA_Start_IT>
 800352c:	1e03      	subs	r3, r0, #0
 800352e:	d005      	beq.n	800353c <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2110      	movs	r1, #16
 8003534:	0018      	movs	r0, r3
 8003536:	f7ff fe6f 	bl	8003218 <I2C_ITError>
}
 800353a:	e004      	b.n	8003546 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2140      	movs	r1, #64	; 0x40
 8003540:	0018      	movs	r0, r3
 8003542:	f000 f879 	bl	8003638 <I2C_Enable_IRQ>
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b004      	add	sp, #16
 800354c:	bd80      	pop	{r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	ffffbfff 	.word	0xffffbfff

08003554 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	685a      	ldr	r2, [r3, #4]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2180      	movs	r1, #128	; 0x80
 800356e:	0209      	lsls	r1, r1, #8
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2110      	movs	r1, #16
 8003578:	0018      	movs	r0, r3
 800357a:	f7ff fe4d 	bl	8003218 <I2C_ITError>
}
 800357e:	46c0      	nop			; (mov r8, r8)
 8003580:	46bd      	mov	sp, r7
 8003582:	b004      	add	sp, #16
 8003584:	bd80      	pop	{r7, pc}

08003586 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b084      	sub	sp, #16
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	2b00      	cmp	r3, #0
 800359a:	d003      	beq.n	80035a4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035a0:	2200      	movs	r2, #0
 80035a2:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	2200      	movs	r2, #0
 80035b2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	0018      	movs	r0, r3
 80035b8:	f7ff ff30 	bl	800341c <I2C_TreatErrorCallback>
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b004      	add	sp, #16
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80035c4:	b590      	push	{r4, r7, lr}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	0008      	movs	r0, r1
 80035ce:	0011      	movs	r1, r2
 80035d0:	607b      	str	r3, [r7, #4]
 80035d2:	240a      	movs	r4, #10
 80035d4:	193b      	adds	r3, r7, r4
 80035d6:	1c02      	adds	r2, r0, #0
 80035d8:	801a      	strh	r2, [r3, #0]
 80035da:	2009      	movs	r0, #9
 80035dc:	183b      	adds	r3, r7, r0
 80035de:	1c0a      	adds	r2, r1, #0
 80035e0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035e2:	193b      	adds	r3, r7, r4
 80035e4:	881b      	ldrh	r3, [r3, #0]
 80035e6:	059b      	lsls	r3, r3, #22
 80035e8:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035ea:	183b      	adds	r3, r7, r0
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	0419      	lsls	r1, r3, #16
 80035f0:	23ff      	movs	r3, #255	; 0xff
 80035f2:	041b      	lsls	r3, r3, #16
 80035f4:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035f6:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80035fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fe:	4313      	orrs	r3, r2
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	085b      	lsrs	r3, r3, #1
 8003604:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800360e:	0d51      	lsrs	r1, r2, #21
 8003610:	2280      	movs	r2, #128	; 0x80
 8003612:	00d2      	lsls	r2, r2, #3
 8003614:	400a      	ands	r2, r1
 8003616:	4907      	ldr	r1, [pc, #28]	; (8003634 <I2C_TransferConfig+0x70>)
 8003618:	430a      	orrs	r2, r1
 800361a:	43d2      	mvns	r2, r2
 800361c:	401a      	ands	r2, r3
 800361e:	0011      	movs	r1, r2
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	46bd      	mov	sp, r7
 800362e:	b007      	add	sp, #28
 8003630:	bd90      	pop	{r4, r7, pc}
 8003632:	46c0      	nop			; (mov r8, r8)
 8003634:	03ff63ff 	.word	0x03ff63ff

08003638 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	000a      	movs	r2, r1
 8003642:	1cbb      	adds	r3, r7, #2
 8003644:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800364e:	4b3e      	ldr	r3, [pc, #248]	; (8003748 <I2C_Enable_IRQ+0x110>)
 8003650:	429a      	cmp	r2, r3
 8003652:	d035      	beq.n	80036c0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003658:	4b3c      	ldr	r3, [pc, #240]	; (800374c <I2C_Enable_IRQ+0x114>)
 800365a:	429a      	cmp	r2, r3
 800365c:	d030      	beq.n	80036c0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003662:	4b3b      	ldr	r3, [pc, #236]	; (8003750 <I2C_Enable_IRQ+0x118>)
 8003664:	429a      	cmp	r2, r3
 8003666:	d02b      	beq.n	80036c0 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003668:	1cbb      	adds	r3, r7, #2
 800366a:	2200      	movs	r2, #0
 800366c:	5e9b      	ldrsh	r3, [r3, r2]
 800366e:	2b00      	cmp	r3, #0
 8003670:	da03      	bge.n	800367a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	22b8      	movs	r2, #184	; 0xb8
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800367a:	1cbb      	adds	r3, r7, #2
 800367c:	881b      	ldrh	r3, [r3, #0]
 800367e:	2201      	movs	r2, #1
 8003680:	4013      	ands	r3, r2
 8003682:	d003      	beq.n	800368c <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	22f2      	movs	r2, #242	; 0xf2
 8003688:	4313      	orrs	r3, r2
 800368a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800368c:	1cbb      	adds	r3, r7, #2
 800368e:	881b      	ldrh	r3, [r3, #0]
 8003690:	2202      	movs	r2, #2
 8003692:	4013      	ands	r3, r2
 8003694:	d003      	beq.n	800369e <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	22f4      	movs	r2, #244	; 0xf4
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800369e:	1cbb      	adds	r3, r7, #2
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	2b10      	cmp	r3, #16
 80036a4:	d103      	bne.n	80036ae <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2290      	movs	r2, #144	; 0x90
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036ae:	1cbb      	adds	r3, r7, #2
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	2b20      	cmp	r3, #32
 80036b4:	d13c      	bne.n	8003730 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80036be:	e037      	b.n	8003730 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80036c0:	1cbb      	adds	r3, r7, #2
 80036c2:	2200      	movs	r2, #0
 80036c4:	5e9b      	ldrsh	r3, [r3, r2]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	da03      	bge.n	80036d2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	22b8      	movs	r2, #184	; 0xb8
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80036d2:	1cbb      	adds	r3, r7, #2
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	2201      	movs	r2, #1
 80036d8:	4013      	ands	r3, r2
 80036da:	d003      	beq.n	80036e4 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	22f2      	movs	r2, #242	; 0xf2
 80036e0:	4313      	orrs	r3, r2
 80036e2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80036e4:	1cbb      	adds	r3, r7, #2
 80036e6:	881b      	ldrh	r3, [r3, #0]
 80036e8:	2202      	movs	r2, #2
 80036ea:	4013      	ands	r3, r2
 80036ec:	d003      	beq.n	80036f6 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	22f4      	movs	r2, #244	; 0xf4
 80036f2:	4313      	orrs	r3, r2
 80036f4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80036f6:	1cbb      	adds	r3, r7, #2
 80036f8:	881b      	ldrh	r3, [r3, #0]
 80036fa:	2b10      	cmp	r3, #16
 80036fc:	d103      	bne.n	8003706 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2290      	movs	r2, #144	; 0x90
 8003702:	4313      	orrs	r3, r2
 8003704:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003706:	1cbb      	adds	r3, r7, #2
 8003708:	881b      	ldrh	r3, [r3, #0]
 800370a:	2b20      	cmp	r3, #32
 800370c:	d103      	bne.n	8003716 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2260      	movs	r2, #96	; 0x60
 8003712:	4313      	orrs	r3, r2
 8003714:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800371a:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <I2C_Enable_IRQ+0x118>)
 800371c:	429a      	cmp	r2, r3
 800371e:	d007      	beq.n	8003730 <I2C_Enable_IRQ+0xf8>
 8003720:	1cbb      	adds	r3, r7, #2
 8003722:	881b      	ldrh	r3, [r3, #0]
 8003724:	2b40      	cmp	r3, #64	; 0x40
 8003726:	d103      	bne.n	8003730 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2240      	movs	r2, #64	; 0x40
 800372c:	4313      	orrs	r3, r2
 800372e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6819      	ldr	r1, [r3, #0]
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	430a      	orrs	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	46bd      	mov	sp, r7
 8003744:	b004      	add	sp, #16
 8003746:	bd80      	pop	{r7, pc}
 8003748:	0800247d 	.word	0x0800247d
 800374c:	080028f5 	.word	0x080028f5
 8003750:	08002695 	.word	0x08002695

08003754 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	000a      	movs	r2, r1
 800375e:	1cbb      	adds	r3, r7, #2
 8003760:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003766:	1cbb      	adds	r3, r7, #2
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	2201      	movs	r2, #1
 800376c:	4013      	ands	r3, r2
 800376e:	d010      	beq.n	8003792 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2242      	movs	r2, #66	; 0x42
 8003774:	4313      	orrs	r3, r2
 8003776:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2241      	movs	r2, #65	; 0x41
 800377c:	5c9b      	ldrb	r3, [r3, r2]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	001a      	movs	r2, r3
 8003782:	2328      	movs	r3, #40	; 0x28
 8003784:	4013      	ands	r3, r2
 8003786:	2b28      	cmp	r3, #40	; 0x28
 8003788:	d003      	beq.n	8003792 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	22b0      	movs	r2, #176	; 0xb0
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003792:	1cbb      	adds	r3, r7, #2
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	2202      	movs	r2, #2
 8003798:	4013      	ands	r3, r2
 800379a:	d010      	beq.n	80037be <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2244      	movs	r2, #68	; 0x44
 80037a0:	4313      	orrs	r3, r2
 80037a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2241      	movs	r2, #65	; 0x41
 80037a8:	5c9b      	ldrb	r3, [r3, r2]
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	001a      	movs	r2, r3
 80037ae:	2328      	movs	r3, #40	; 0x28
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b28      	cmp	r3, #40	; 0x28
 80037b4:	d003      	beq.n	80037be <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	22b0      	movs	r2, #176	; 0xb0
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80037be:	1cbb      	adds	r3, r7, #2
 80037c0:	2200      	movs	r2, #0
 80037c2:	5e9b      	ldrsh	r3, [r3, r2]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	da03      	bge.n	80037d0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	22b8      	movs	r2, #184	; 0xb8
 80037cc:	4313      	orrs	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037d0:	1cbb      	adds	r3, r7, #2
 80037d2:	881b      	ldrh	r3, [r3, #0]
 80037d4:	2b10      	cmp	r3, #16
 80037d6:	d103      	bne.n	80037e0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2290      	movs	r2, #144	; 0x90
 80037dc:	4313      	orrs	r3, r2
 80037de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037e0:	1cbb      	adds	r3, r7, #2
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	2b20      	cmp	r3, #32
 80037e6:	d103      	bne.n	80037f0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2220      	movs	r2, #32
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80037f0:	1cbb      	adds	r3, r7, #2
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	2b40      	cmp	r3, #64	; 0x40
 80037f6:	d103      	bne.n	8003800 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2240      	movs	r2, #64	; 0x40
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	43d9      	mvns	r1, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	400a      	ands	r2, r1
 8003810:	601a      	str	r2, [r3, #0]
}
 8003812:	46c0      	nop			; (mov r8, r8)
 8003814:	46bd      	mov	sp, r7
 8003816:	b004      	add	sp, #16
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b082      	sub	sp, #8
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2241      	movs	r2, #65	; 0x41
 800382a:	5c9b      	ldrb	r3, [r3, r2]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b20      	cmp	r3, #32
 8003830:	d138      	bne.n	80038a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2240      	movs	r2, #64	; 0x40
 8003836:	5c9b      	ldrb	r3, [r3, r2]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800383c:	2302      	movs	r3, #2
 800383e:	e032      	b.n	80038a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2240      	movs	r2, #64	; 0x40
 8003844:	2101      	movs	r1, #1
 8003846:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2241      	movs	r2, #65	; 0x41
 800384c:	2124      	movs	r1, #36	; 0x24
 800384e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2101      	movs	r1, #1
 800385c:	438a      	bics	r2, r1
 800385e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4911      	ldr	r1, [pc, #68]	; (80038b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800386c:	400a      	ands	r2, r1
 800386e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2101      	movs	r1, #1
 800388c:	430a      	orrs	r2, r1
 800388e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2241      	movs	r2, #65	; 0x41
 8003894:	2120      	movs	r1, #32
 8003896:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2240      	movs	r2, #64	; 0x40
 800389c:	2100      	movs	r1, #0
 800389e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	e000      	b.n	80038a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
  }
}
 80038a6:	0018      	movs	r0, r3
 80038a8:	46bd      	mov	sp, r7
 80038aa:	b002      	add	sp, #8
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	ffffefff 	.word	0xffffefff

080038b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2241      	movs	r2, #65	; 0x41
 80038c2:	5c9b      	ldrb	r3, [r3, r2]
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d139      	bne.n	800393e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2240      	movs	r2, #64	; 0x40
 80038ce:	5c9b      	ldrb	r3, [r3, r2]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e033      	b.n	8003940 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2240      	movs	r2, #64	; 0x40
 80038dc:	2101      	movs	r1, #1
 80038de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2241      	movs	r2, #65	; 0x41
 80038e4:	2124      	movs	r1, #36	; 0x24
 80038e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2101      	movs	r1, #1
 80038f4:	438a      	bics	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4a11      	ldr	r2, [pc, #68]	; (8003948 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003904:	4013      	ands	r3, r2
 8003906:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	021b      	lsls	r3, r3, #8
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2101      	movs	r1, #1
 8003926:	430a      	orrs	r2, r1
 8003928:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2241      	movs	r2, #65	; 0x41
 800392e:	2120      	movs	r1, #32
 8003930:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2240      	movs	r2, #64	; 0x40
 8003936:	2100      	movs	r1, #0
 8003938:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
  }
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	b004      	add	sp, #16
 8003946:	bd80      	pop	{r7, pc}
 8003948:	fffff0ff 	.word	0xfffff0ff

0800394c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e301      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2201      	movs	r2, #1
 8003964:	4013      	ands	r3, r2
 8003966:	d100      	bne.n	800396a <HAL_RCC_OscConfig+0x1e>
 8003968:	e08d      	b.n	8003a86 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800396a:	4bc3      	ldr	r3, [pc, #780]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	220c      	movs	r2, #12
 8003970:	4013      	ands	r3, r2
 8003972:	2b04      	cmp	r3, #4
 8003974:	d00e      	beq.n	8003994 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003976:	4bc0      	ldr	r3, [pc, #768]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	220c      	movs	r2, #12
 800397c:	4013      	ands	r3, r2
 800397e:	2b08      	cmp	r3, #8
 8003980:	d116      	bne.n	80039b0 <HAL_RCC_OscConfig+0x64>
 8003982:	4bbd      	ldr	r3, [pc, #756]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	2380      	movs	r3, #128	; 0x80
 8003988:	025b      	lsls	r3, r3, #9
 800398a:	401a      	ands	r2, r3
 800398c:	2380      	movs	r3, #128	; 0x80
 800398e:	025b      	lsls	r3, r3, #9
 8003990:	429a      	cmp	r2, r3
 8003992:	d10d      	bne.n	80039b0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	4bb8      	ldr	r3, [pc, #736]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	2380      	movs	r3, #128	; 0x80
 800399a:	029b      	lsls	r3, r3, #10
 800399c:	4013      	ands	r3, r2
 800399e:	d100      	bne.n	80039a2 <HAL_RCC_OscConfig+0x56>
 80039a0:	e070      	b.n	8003a84 <HAL_RCC_OscConfig+0x138>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d000      	beq.n	80039ac <HAL_RCC_OscConfig+0x60>
 80039aa:	e06b      	b.n	8003a84 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e2d8      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x7c>
 80039b8:	4baf      	ldr	r3, [pc, #700]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	4bae      	ldr	r3, [pc, #696]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039be:	2180      	movs	r1, #128	; 0x80
 80039c0:	0249      	lsls	r1, r1, #9
 80039c2:	430a      	orrs	r2, r1
 80039c4:	601a      	str	r2, [r3, #0]
 80039c6:	e02f      	b.n	8003a28 <HAL_RCC_OscConfig+0xdc>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10c      	bne.n	80039ea <HAL_RCC_OscConfig+0x9e>
 80039d0:	4ba9      	ldr	r3, [pc, #676]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	4ba8      	ldr	r3, [pc, #672]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039d6:	49a9      	ldr	r1, [pc, #676]	; (8003c7c <HAL_RCC_OscConfig+0x330>)
 80039d8:	400a      	ands	r2, r1
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	4ba6      	ldr	r3, [pc, #664]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	4ba5      	ldr	r3, [pc, #660]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039e2:	49a7      	ldr	r1, [pc, #668]	; (8003c80 <HAL_RCC_OscConfig+0x334>)
 80039e4:	400a      	ands	r2, r1
 80039e6:	601a      	str	r2, [r3, #0]
 80039e8:	e01e      	b.n	8003a28 <HAL_RCC_OscConfig+0xdc>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d10e      	bne.n	8003a10 <HAL_RCC_OscConfig+0xc4>
 80039f2:	4ba1      	ldr	r3, [pc, #644]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	4ba0      	ldr	r3, [pc, #640]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 80039f8:	2180      	movs	r1, #128	; 0x80
 80039fa:	02c9      	lsls	r1, r1, #11
 80039fc:	430a      	orrs	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	4b9d      	ldr	r3, [pc, #628]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	4b9c      	ldr	r3, [pc, #624]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a06:	2180      	movs	r1, #128	; 0x80
 8003a08:	0249      	lsls	r1, r1, #9
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0xdc>
 8003a10:	4b99      	ldr	r3, [pc, #612]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	4b98      	ldr	r3, [pc, #608]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a16:	4999      	ldr	r1, [pc, #612]	; (8003c7c <HAL_RCC_OscConfig+0x330>)
 8003a18:	400a      	ands	r2, r1
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	4b96      	ldr	r3, [pc, #600]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	4b95      	ldr	r3, [pc, #596]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a22:	4997      	ldr	r1, [pc, #604]	; (8003c80 <HAL_RCC_OscConfig+0x334>)
 8003a24:	400a      	ands	r2, r1
 8003a26:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d014      	beq.n	8003a5a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a30:	f7fd fbb2 	bl	8001198 <HAL_GetTick>
 8003a34:	0003      	movs	r3, r0
 8003a36:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a38:	e008      	b.n	8003a4c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a3a:	f7fd fbad 	bl	8001198 <HAL_GetTick>
 8003a3e:	0002      	movs	r2, r0
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	2b64      	cmp	r3, #100	; 0x64
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e28a      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4c:	4b8a      	ldr	r3, [pc, #552]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	2380      	movs	r3, #128	; 0x80
 8003a52:	029b      	lsls	r3, r3, #10
 8003a54:	4013      	ands	r3, r2
 8003a56:	d0f0      	beq.n	8003a3a <HAL_RCC_OscConfig+0xee>
 8003a58:	e015      	b.n	8003a86 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a5a:	f7fd fb9d 	bl	8001198 <HAL_GetTick>
 8003a5e:	0003      	movs	r3, r0
 8003a60:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a62:	e008      	b.n	8003a76 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a64:	f7fd fb98 	bl	8001198 <HAL_GetTick>
 8003a68:	0002      	movs	r2, r0
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b64      	cmp	r3, #100	; 0x64
 8003a70:	d901      	bls.n	8003a76 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e275      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a76:	4b80      	ldr	r3, [pc, #512]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	029b      	lsls	r3, r3, #10
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d1f0      	bne.n	8003a64 <HAL_RCC_OscConfig+0x118>
 8003a82:	e000      	b.n	8003a86 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a84:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d100      	bne.n	8003a92 <HAL_RCC_OscConfig+0x146>
 8003a90:	e069      	b.n	8003b66 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003a92:	4b79      	ldr	r3, [pc, #484]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	220c      	movs	r2, #12
 8003a98:	4013      	ands	r3, r2
 8003a9a:	d00b      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003a9c:	4b76      	ldr	r3, [pc, #472]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	220c      	movs	r2, #12
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d11c      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x196>
 8003aa8:	4b73      	ldr	r3, [pc, #460]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	2380      	movs	r3, #128	; 0x80
 8003aae:	025b      	lsls	r3, r3, #9
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	d116      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ab4:	4b70      	ldr	r3, [pc, #448]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	4013      	ands	r3, r2
 8003abc:	d005      	beq.n	8003aca <HAL_RCC_OscConfig+0x17e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d001      	beq.n	8003aca <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e24b      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aca:	4b6b      	ldr	r3, [pc, #428]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	22f8      	movs	r2, #248	; 0xf8
 8003ad0:	4393      	bics	r3, r2
 8003ad2:	0019      	movs	r1, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	00da      	lsls	r2, r3, #3
 8003ada:	4b67      	ldr	r3, [pc, #412]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003adc:	430a      	orrs	r2, r1
 8003ade:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ae0:	e041      	b.n	8003b66 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d024      	beq.n	8003b34 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aea:	4b63      	ldr	r3, [pc, #396]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	4b62      	ldr	r3, [pc, #392]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003af0:	2101      	movs	r1, #1
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af6:	f7fd fb4f 	bl	8001198 <HAL_GetTick>
 8003afa:	0003      	movs	r3, r0
 8003afc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b00:	f7fd fb4a 	bl	8001198 <HAL_GetTick>
 8003b04:	0002      	movs	r2, r0
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e227      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b12:	4b59      	ldr	r3, [pc, #356]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2202      	movs	r2, #2
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d0f1      	beq.n	8003b00 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1c:	4b56      	ldr	r3, [pc, #344]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	22f8      	movs	r2, #248	; 0xf8
 8003b22:	4393      	bics	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00da      	lsls	r2, r3, #3
 8003b2c:	4b52      	ldr	r3, [pc, #328]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	e018      	b.n	8003b66 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b34:	4b50      	ldr	r3, [pc, #320]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	4b4f      	ldr	r3, [pc, #316]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b3a:	2101      	movs	r1, #1
 8003b3c:	438a      	bics	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fd fb2a 	bl	8001198 <HAL_GetTick>
 8003b44:	0003      	movs	r3, r0
 8003b46:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b48:	e008      	b.n	8003b5c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b4a:	f7fd fb25 	bl	8001198 <HAL_GetTick>
 8003b4e:	0002      	movs	r2, r0
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d901      	bls.n	8003b5c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e202      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b5c:	4b46      	ldr	r3, [pc, #280]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2202      	movs	r2, #2
 8003b62:	4013      	ands	r3, r2
 8003b64:	d1f1      	bne.n	8003b4a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d036      	beq.n	8003bde <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d019      	beq.n	8003bac <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b78:	4b3f      	ldr	r3, [pc, #252]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b7c:	4b3e      	ldr	r3, [pc, #248]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003b7e:	2101      	movs	r1, #1
 8003b80:	430a      	orrs	r2, r1
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b84:	f7fd fb08 	bl	8001198 <HAL_GetTick>
 8003b88:	0003      	movs	r3, r0
 8003b8a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b8c:	e008      	b.n	8003ba0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8e:	f7fd fb03 	bl	8001198 <HAL_GetTick>
 8003b92:	0002      	movs	r2, r0
 8003b94:	69bb      	ldr	r3, [r7, #24]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d901      	bls.n	8003ba0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e1e0      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ba0:	4b35      	ldr	r3, [pc, #212]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2202      	movs	r2, #2
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d0f1      	beq.n	8003b8e <HAL_RCC_OscConfig+0x242>
 8003baa:	e018      	b.n	8003bde <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bac:	4b32      	ldr	r3, [pc, #200]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bb0:	4b31      	ldr	r3, [pc, #196]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003bb2:	2101      	movs	r1, #1
 8003bb4:	438a      	bics	r2, r1
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bb8:	f7fd faee 	bl	8001198 <HAL_GetTick>
 8003bbc:	0003      	movs	r3, r0
 8003bbe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc2:	f7fd fae9 	bl	8001198 <HAL_GetTick>
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e1c6      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bd4:	4b28      	ldr	r3, [pc, #160]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd8:	2202      	movs	r2, #2
 8003bda:	4013      	ands	r3, r2
 8003bdc:	d1f1      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2204      	movs	r2, #4
 8003be4:	4013      	ands	r3, r2
 8003be6:	d100      	bne.n	8003bea <HAL_RCC_OscConfig+0x29e>
 8003be8:	e0b4      	b.n	8003d54 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bea:	201f      	movs	r0, #31
 8003bec:	183b      	adds	r3, r7, r0
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bf2:	4b21      	ldr	r3, [pc, #132]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003bf4:	69da      	ldr	r2, [r3, #28]
 8003bf6:	2380      	movs	r3, #128	; 0x80
 8003bf8:	055b      	lsls	r3, r3, #21
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	d110      	bne.n	8003c20 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bfe:	4b1e      	ldr	r3, [pc, #120]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003c04:	2180      	movs	r1, #128	; 0x80
 8003c06:	0549      	lsls	r1, r1, #21
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	61da      	str	r2, [r3, #28]
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003c0e:	69da      	ldr	r2, [r3, #28]
 8003c10:	2380      	movs	r3, #128	; 0x80
 8003c12:	055b      	lsls	r3, r3, #21
 8003c14:	4013      	ands	r3, r2
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c1a:	183b      	adds	r3, r7, r0
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c20:	4b18      	ldr	r3, [pc, #96]	; (8003c84 <HAL_RCC_OscConfig+0x338>)
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4013      	ands	r3, r2
 8003c2a:	d11a      	bne.n	8003c62 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c2c:	4b15      	ldr	r3, [pc, #84]	; (8003c84 <HAL_RCC_OscConfig+0x338>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <HAL_RCC_OscConfig+0x338>)
 8003c32:	2180      	movs	r1, #128	; 0x80
 8003c34:	0049      	lsls	r1, r1, #1
 8003c36:	430a      	orrs	r2, r1
 8003c38:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c3a:	f7fd faad 	bl	8001198 <HAL_GetTick>
 8003c3e:	0003      	movs	r3, r0
 8003c40:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c42:	e008      	b.n	8003c56 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c44:	f7fd faa8 	bl	8001198 <HAL_GetTick>
 8003c48:	0002      	movs	r2, r0
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	1ad3      	subs	r3, r2, r3
 8003c4e:	2b64      	cmp	r3, #100	; 0x64
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e185      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_OscConfig+0x338>)
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d0f0      	beq.n	8003c44 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d10e      	bne.n	8003c88 <HAL_RCC_OscConfig+0x33c>
 8003c6a:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003c6c:	6a1a      	ldr	r2, [r3, #32]
 8003c6e:	4b02      	ldr	r3, [pc, #8]	; (8003c78 <HAL_RCC_OscConfig+0x32c>)
 8003c70:	2101      	movs	r1, #1
 8003c72:	430a      	orrs	r2, r1
 8003c74:	621a      	str	r2, [r3, #32]
 8003c76:	e035      	b.n	8003ce4 <HAL_RCC_OscConfig+0x398>
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	fffeffff 	.word	0xfffeffff
 8003c80:	fffbffff 	.word	0xfffbffff
 8003c84:	40007000 	.word	0x40007000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10c      	bne.n	8003caa <HAL_RCC_OscConfig+0x35e>
 8003c90:	4bb6      	ldr	r3, [pc, #728]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003c92:	6a1a      	ldr	r2, [r3, #32]
 8003c94:	4bb5      	ldr	r3, [pc, #724]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003c96:	2101      	movs	r1, #1
 8003c98:	438a      	bics	r2, r1
 8003c9a:	621a      	str	r2, [r3, #32]
 8003c9c:	4bb3      	ldr	r3, [pc, #716]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003c9e:	6a1a      	ldr	r2, [r3, #32]
 8003ca0:	4bb2      	ldr	r3, [pc, #712]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003ca2:	2104      	movs	r1, #4
 8003ca4:	438a      	bics	r2, r1
 8003ca6:	621a      	str	r2, [r3, #32]
 8003ca8:	e01c      	b.n	8003ce4 <HAL_RCC_OscConfig+0x398>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	d10c      	bne.n	8003ccc <HAL_RCC_OscConfig+0x380>
 8003cb2:	4bae      	ldr	r3, [pc, #696]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003cb4:	6a1a      	ldr	r2, [r3, #32]
 8003cb6:	4bad      	ldr	r3, [pc, #692]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003cb8:	2104      	movs	r1, #4
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	621a      	str	r2, [r3, #32]
 8003cbe:	4bab      	ldr	r3, [pc, #684]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003cc0:	6a1a      	ldr	r2, [r3, #32]
 8003cc2:	4baa      	ldr	r3, [pc, #680]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	621a      	str	r2, [r3, #32]
 8003cca:	e00b      	b.n	8003ce4 <HAL_RCC_OscConfig+0x398>
 8003ccc:	4ba7      	ldr	r3, [pc, #668]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003cce:	6a1a      	ldr	r2, [r3, #32]
 8003cd0:	4ba6      	ldr	r3, [pc, #664]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	438a      	bics	r2, r1
 8003cd6:	621a      	str	r2, [r3, #32]
 8003cd8:	4ba4      	ldr	r3, [pc, #656]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003cda:	6a1a      	ldr	r2, [r3, #32]
 8003cdc:	4ba3      	ldr	r3, [pc, #652]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003cde:	2104      	movs	r1, #4
 8003ce0:	438a      	bics	r2, r1
 8003ce2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d014      	beq.n	8003d16 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cec:	f7fd fa54 	bl	8001198 <HAL_GetTick>
 8003cf0:	0003      	movs	r3, r0
 8003cf2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cf4:	e009      	b.n	8003d0a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fd fa4f 	bl	8001198 <HAL_GetTick>
 8003cfa:	0002      	movs	r2, r0
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	4a9b      	ldr	r2, [pc, #620]	; (8003f70 <HAL_RCC_OscConfig+0x624>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e12b      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d0a:	4b98      	ldr	r3, [pc, #608]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	2202      	movs	r2, #2
 8003d10:	4013      	ands	r3, r2
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x3aa>
 8003d14:	e013      	b.n	8003d3e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d16:	f7fd fa3f 	bl	8001198 <HAL_GetTick>
 8003d1a:	0003      	movs	r3, r0
 8003d1c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d1e:	e009      	b.n	8003d34 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d20:	f7fd fa3a 	bl	8001198 <HAL_GetTick>
 8003d24:	0002      	movs	r2, r0
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	4a91      	ldr	r2, [pc, #580]	; (8003f70 <HAL_RCC_OscConfig+0x624>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d901      	bls.n	8003d34 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e116      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d34:	4b8d      	ldr	r3, [pc, #564]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003d36:	6a1b      	ldr	r3, [r3, #32]
 8003d38:	2202      	movs	r2, #2
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d3e:	231f      	movs	r3, #31
 8003d40:	18fb      	adds	r3, r7, r3
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d105      	bne.n	8003d54 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d48:	4b88      	ldr	r3, [pc, #544]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003d4a:	69da      	ldr	r2, [r3, #28]
 8003d4c:	4b87      	ldr	r3, [pc, #540]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003d4e:	4989      	ldr	r1, [pc, #548]	; (8003f74 <HAL_RCC_OscConfig+0x628>)
 8003d50:	400a      	ands	r2, r1
 8003d52:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	d063      	beq.n	8003e26 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d12a      	bne.n	8003dbc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003d66:	4b81      	ldr	r3, [pc, #516]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d6a:	4b80      	ldr	r3, [pc, #512]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003d6c:	2104      	movs	r1, #4
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003d72:	4b7e      	ldr	r3, [pc, #504]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003d74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d76:	4b7d      	ldr	r3, [pc, #500]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003d78:	2101      	movs	r1, #1
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d7e:	f7fd fa0b 	bl	8001198 <HAL_GetTick>
 8003d82:	0003      	movs	r3, r0
 8003d84:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003d88:	f7fd fa06 	bl	8001198 <HAL_GetTick>
 8003d8c:	0002      	movs	r2, r0
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e0e3      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003d9a:	4b74      	ldr	r3, [pc, #464]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9e:	2202      	movs	r2, #2
 8003da0:	4013      	ands	r3, r2
 8003da2:	d0f1      	beq.n	8003d88 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003da4:	4b71      	ldr	r3, [pc, #452]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003da6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da8:	22f8      	movs	r2, #248	; 0xf8
 8003daa:	4393      	bics	r3, r2
 8003dac:	0019      	movs	r1, r3
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	699b      	ldr	r3, [r3, #24]
 8003db2:	00da      	lsls	r2, r3, #3
 8003db4:	4b6d      	ldr	r3, [pc, #436]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003db6:	430a      	orrs	r2, r1
 8003db8:	635a      	str	r2, [r3, #52]	; 0x34
 8003dba:	e034      	b.n	8003e26 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	3305      	adds	r3, #5
 8003dc2:	d111      	bne.n	8003de8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003dc4:	4b69      	ldr	r3, [pc, #420]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003dc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dc8:	4b68      	ldr	r3, [pc, #416]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003dca:	2104      	movs	r1, #4
 8003dcc:	438a      	bics	r2, r1
 8003dce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003dd0:	4b66      	ldr	r3, [pc, #408]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	22f8      	movs	r2, #248	; 0xf8
 8003dd6:	4393      	bics	r3, r2
 8003dd8:	0019      	movs	r1, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	00da      	lsls	r2, r3, #3
 8003de0:	4b62      	ldr	r3, [pc, #392]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003de2:	430a      	orrs	r2, r1
 8003de4:	635a      	str	r2, [r3, #52]	; 0x34
 8003de6:	e01e      	b.n	8003e26 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003de8:	4b60      	ldr	r3, [pc, #384]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dec:	4b5f      	ldr	r3, [pc, #380]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003dee:	2104      	movs	r1, #4
 8003df0:	430a      	orrs	r2, r1
 8003df2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003df4:	4b5d      	ldr	r3, [pc, #372]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003df6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df8:	4b5c      	ldr	r3, [pc, #368]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003dfa:	2101      	movs	r1, #1
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e00:	f7fd f9ca 	bl	8001198 <HAL_GetTick>
 8003e04:	0003      	movs	r3, r0
 8003e06:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e08:	e008      	b.n	8003e1c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003e0a:	f7fd f9c5 	bl	8001198 <HAL_GetTick>
 8003e0e:	0002      	movs	r2, r0
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	1ad3      	subs	r3, r2, r3
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d901      	bls.n	8003e1c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e0a2      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003e1c:	4b53      	ldr	r3, [pc, #332]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e20:	2202      	movs	r2, #2
 8003e22:	4013      	ands	r3, r2
 8003e24:	d1f1      	bne.n	8003e0a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d100      	bne.n	8003e30 <HAL_RCC_OscConfig+0x4e4>
 8003e2e:	e097      	b.n	8003f60 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e30:	4b4e      	ldr	r3, [pc, #312]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	220c      	movs	r2, #12
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d100      	bne.n	8003e3e <HAL_RCC_OscConfig+0x4f2>
 8003e3c:	e06b      	b.n	8003f16 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a1b      	ldr	r3, [r3, #32]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d14c      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e46:	4b49      	ldr	r3, [pc, #292]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4b48      	ldr	r3, [pc, #288]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003e4c:	494a      	ldr	r1, [pc, #296]	; (8003f78 <HAL_RCC_OscConfig+0x62c>)
 8003e4e:	400a      	ands	r2, r1
 8003e50:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e52:	f7fd f9a1 	bl	8001198 <HAL_GetTick>
 8003e56:	0003      	movs	r3, r0
 8003e58:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e5c:	f7fd f99c 	bl	8001198 <HAL_GetTick>
 8003e60:	0002      	movs	r2, r0
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e079      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e6e:	4b3f      	ldr	r3, [pc, #252]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	2380      	movs	r3, #128	; 0x80
 8003e74:	049b      	lsls	r3, r3, #18
 8003e76:	4013      	ands	r3, r2
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e7a:	4b3c      	ldr	r3, [pc, #240]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	220f      	movs	r2, #15
 8003e80:	4393      	bics	r3, r2
 8003e82:	0019      	movs	r1, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e88:	4b38      	ldr	r3, [pc, #224]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003e8a:	430a      	orrs	r2, r1
 8003e8c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003e8e:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	4a3a      	ldr	r2, [pc, #232]	; (8003f7c <HAL_RCC_OscConfig+0x630>)
 8003e94:	4013      	ands	r3, r2
 8003e96:	0019      	movs	r1, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea0:	431a      	orrs	r2, r3
 8003ea2:	4b32      	ldr	r3, [pc, #200]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003ea4:	430a      	orrs	r2, r1
 8003ea6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea8:	4b30      	ldr	r3, [pc, #192]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	4b2f      	ldr	r3, [pc, #188]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003eae:	2180      	movs	r1, #128	; 0x80
 8003eb0:	0449      	lsls	r1, r1, #17
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb6:	f7fd f96f 	bl	8001198 <HAL_GetTick>
 8003eba:	0003      	movs	r3, r0
 8003ebc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ebe:	e008      	b.n	8003ed2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec0:	f7fd f96a 	bl	8001198 <HAL_GetTick>
 8003ec4:	0002      	movs	r2, r0
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	1ad3      	subs	r3, r2, r3
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d901      	bls.n	8003ed2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e047      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ed2:	4b26      	ldr	r3, [pc, #152]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	049b      	lsls	r3, r3, #18
 8003eda:	4013      	ands	r3, r2
 8003edc:	d0f0      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x574>
 8003ede:	e03f      	b.n	8003f60 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee0:	4b22      	ldr	r3, [pc, #136]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	4b21      	ldr	r3, [pc, #132]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003ee6:	4924      	ldr	r1, [pc, #144]	; (8003f78 <HAL_RCC_OscConfig+0x62c>)
 8003ee8:	400a      	ands	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fd f954 	bl	8001198 <HAL_GetTick>
 8003ef0:	0003      	movs	r3, r0
 8003ef2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef6:	f7fd f94f 	bl	8001198 <HAL_GetTick>
 8003efa:	0002      	movs	r2, r0
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e02c      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f08:	4b18      	ldr	r3, [pc, #96]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	049b      	lsls	r3, r3, #18
 8003f10:	4013      	ands	r3, r2
 8003f12:	d1f0      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x5aa>
 8003f14:	e024      	b.n	8003f60 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d101      	bne.n	8003f22 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e01f      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8003f22:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8003f28:	4b10      	ldr	r3, [pc, #64]	; (8003f6c <HAL_RCC_OscConfig+0x620>)
 8003f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	2380      	movs	r3, #128	; 0x80
 8003f32:	025b      	lsls	r3, r3, #9
 8003f34:	401a      	ands	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d10e      	bne.n	8003f5c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	220f      	movs	r2, #15
 8003f42:	401a      	ands	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	23f0      	movs	r3, #240	; 0xf0
 8003f50:	039b      	lsls	r3, r3, #14
 8003f52:	401a      	ands	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d001      	beq.n	8003f60 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	0018      	movs	r0, r3
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b008      	add	sp, #32
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	00001388 	.word	0x00001388
 8003f74:	efffffff 	.word	0xefffffff
 8003f78:	feffffff 	.word	0xfeffffff
 8003f7c:	ffc2ffff 	.word	0xffc2ffff

08003f80 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0b3      	b.n	80040fc <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f94:	4b5b      	ldr	r3, [pc, #364]	; (8004104 <HAL_RCC_ClockConfig+0x184>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d911      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b58      	ldr	r3, [pc, #352]	; (8004104 <HAL_RCC_ClockConfig+0x184>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	4393      	bics	r3, r2
 8003faa:	0019      	movs	r1, r3
 8003fac:	4b55      	ldr	r3, [pc, #340]	; (8004104 <HAL_RCC_ClockConfig+0x184>)
 8003fae:	683a      	ldr	r2, [r7, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb4:	4b53      	ldr	r3, [pc, #332]	; (8004104 <HAL_RCC_ClockConfig+0x184>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2201      	movs	r2, #1
 8003fba:	4013      	ands	r3, r2
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d001      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e09a      	b.n	80040fc <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	4013      	ands	r3, r2
 8003fce:	d015      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2204      	movs	r2, #4
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	d006      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fda:	4b4b      	ldr	r3, [pc, #300]	; (8004108 <HAL_RCC_ClockConfig+0x188>)
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	4b4a      	ldr	r3, [pc, #296]	; (8004108 <HAL_RCC_ClockConfig+0x188>)
 8003fe0:	21e0      	movs	r1, #224	; 0xe0
 8003fe2:	00c9      	lsls	r1, r1, #3
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe8:	4b47      	ldr	r3, [pc, #284]	; (8004108 <HAL_RCC_ClockConfig+0x188>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	22f0      	movs	r2, #240	; 0xf0
 8003fee:	4393      	bics	r3, r2
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	4b44      	ldr	r3, [pc, #272]	; (8004108 <HAL_RCC_ClockConfig+0x188>)
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2201      	movs	r2, #1
 8004002:	4013      	ands	r3, r2
 8004004:	d040      	beq.n	8004088 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d107      	bne.n	800401e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800400e:	4b3e      	ldr	r3, [pc, #248]	; (8004108 <HAL_RCC_ClockConfig+0x188>)
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	2380      	movs	r3, #128	; 0x80
 8004014:	029b      	lsls	r3, r3, #10
 8004016:	4013      	ands	r3, r2
 8004018:	d114      	bne.n	8004044 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e06e      	b.n	80040fc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b02      	cmp	r3, #2
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004026:	4b38      	ldr	r3, [pc, #224]	; (8004108 <HAL_RCC_ClockConfig+0x188>)
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	2380      	movs	r3, #128	; 0x80
 800402c:	049b      	lsls	r3, r3, #18
 800402e:	4013      	ands	r3, r2
 8004030:	d108      	bne.n	8004044 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e062      	b.n	80040fc <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004036:	4b34      	ldr	r3, [pc, #208]	; (8004108 <HAL_RCC_ClockConfig+0x188>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2202      	movs	r2, #2
 800403c:	4013      	ands	r3, r2
 800403e:	d101      	bne.n	8004044 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e05b      	b.n	80040fc <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004044:	4b30      	ldr	r3, [pc, #192]	; (8004108 <HAL_RCC_ClockConfig+0x188>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2203      	movs	r2, #3
 800404a:	4393      	bics	r3, r2
 800404c:	0019      	movs	r1, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	4b2d      	ldr	r3, [pc, #180]	; (8004108 <HAL_RCC_ClockConfig+0x188>)
 8004054:	430a      	orrs	r2, r1
 8004056:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004058:	f7fd f89e 	bl	8001198 <HAL_GetTick>
 800405c:	0003      	movs	r3, r0
 800405e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004060:	e009      	b.n	8004076 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004062:	f7fd f899 	bl	8001198 <HAL_GetTick>
 8004066:	0002      	movs	r2, r0
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	4a27      	ldr	r2, [pc, #156]	; (800410c <HAL_RCC_ClockConfig+0x18c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e042      	b.n	80040fc <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004076:	4b24      	ldr	r3, [pc, #144]	; (8004108 <HAL_RCC_ClockConfig+0x188>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	220c      	movs	r2, #12
 800407c:	401a      	ands	r2, r3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	429a      	cmp	r2, r3
 8004086:	d1ec      	bne.n	8004062 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004088:	4b1e      	ldr	r3, [pc, #120]	; (8004104 <HAL_RCC_ClockConfig+0x184>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2201      	movs	r2, #1
 800408e:	4013      	ands	r3, r2
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d211      	bcs.n	80040ba <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b1b      	ldr	r3, [pc, #108]	; (8004104 <HAL_RCC_ClockConfig+0x184>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	2201      	movs	r2, #1
 800409c:	4393      	bics	r3, r2
 800409e:	0019      	movs	r1, r3
 80040a0:	4b18      	ldr	r3, [pc, #96]	; (8004104 <HAL_RCC_ClockConfig+0x184>)
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	430a      	orrs	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040a8:	4b16      	ldr	r3, [pc, #88]	; (8004104 <HAL_RCC_ClockConfig+0x184>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2201      	movs	r2, #1
 80040ae:	4013      	ands	r3, r2
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e020      	b.n	80040fc <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2204      	movs	r2, #4
 80040c0:	4013      	ands	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_RCC_ClockConfig+0x188>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	4a11      	ldr	r2, [pc, #68]	; (8004110 <HAL_RCC_ClockConfig+0x190>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	0019      	movs	r1, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <HAL_RCC_ClockConfig+0x188>)
 80040d4:	430a      	orrs	r2, r1
 80040d6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040d8:	f000 f820 	bl	800411c <HAL_RCC_GetSysClockFreq>
 80040dc:	0001      	movs	r1, r0
 80040de:	4b0a      	ldr	r3, [pc, #40]	; (8004108 <HAL_RCC_ClockConfig+0x188>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	091b      	lsrs	r3, r3, #4
 80040e4:	220f      	movs	r2, #15
 80040e6:	4013      	ands	r3, r2
 80040e8:	4a0a      	ldr	r2, [pc, #40]	; (8004114 <HAL_RCC_ClockConfig+0x194>)
 80040ea:	5cd3      	ldrb	r3, [r2, r3]
 80040ec:	000a      	movs	r2, r1
 80040ee:	40da      	lsrs	r2, r3
 80040f0:	4b09      	ldr	r3, [pc, #36]	; (8004118 <HAL_RCC_ClockConfig+0x198>)
 80040f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80040f4:	2000      	movs	r0, #0
 80040f6:	f7fd f809 	bl	800110c <HAL_InitTick>
  
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
}
 80040fc:	0018      	movs	r0, r3
 80040fe:	46bd      	mov	sp, r7
 8004100:	b004      	add	sp, #16
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40022000 	.word	0x40022000
 8004108:	40021000 	.word	0x40021000
 800410c:	00001388 	.word	0x00001388
 8004110:	fffff8ff 	.word	0xfffff8ff
 8004114:	08005674 	.word	0x08005674
 8004118:	20000004 	.word	0x20000004

0800411c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]
 8004126:	2300      	movs	r3, #0
 8004128:	60bb      	str	r3, [r7, #8]
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	2300      	movs	r3, #0
 8004130:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004132:	2300      	movs	r3, #0
 8004134:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004136:	4b20      	ldr	r3, [pc, #128]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	220c      	movs	r2, #12
 8004140:	4013      	ands	r3, r2
 8004142:	2b04      	cmp	r3, #4
 8004144:	d002      	beq.n	800414c <HAL_RCC_GetSysClockFreq+0x30>
 8004146:	2b08      	cmp	r3, #8
 8004148:	d003      	beq.n	8004152 <HAL_RCC_GetSysClockFreq+0x36>
 800414a:	e02c      	b.n	80041a6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800414c:	4b1b      	ldr	r3, [pc, #108]	; (80041bc <HAL_RCC_GetSysClockFreq+0xa0>)
 800414e:	613b      	str	r3, [r7, #16]
      break;
 8004150:	e02c      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	0c9b      	lsrs	r3, r3, #18
 8004156:	220f      	movs	r2, #15
 8004158:	4013      	ands	r3, r2
 800415a:	4a19      	ldr	r2, [pc, #100]	; (80041c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800415c:	5cd3      	ldrb	r3, [r2, r3]
 800415e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004160:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	220f      	movs	r2, #15
 8004166:	4013      	ands	r3, r2
 8004168:	4a16      	ldr	r2, [pc, #88]	; (80041c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800416a:	5cd3      	ldrb	r3, [r2, r3]
 800416c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	2380      	movs	r3, #128	; 0x80
 8004172:	025b      	lsls	r3, r3, #9
 8004174:	4013      	ands	r3, r2
 8004176:	d009      	beq.n	800418c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004178:	68b9      	ldr	r1, [r7, #8]
 800417a:	4810      	ldr	r0, [pc, #64]	; (80041bc <HAL_RCC_GetSysClockFreq+0xa0>)
 800417c:	f7fb ffc4 	bl	8000108 <__udivsi3>
 8004180:	0003      	movs	r3, r0
 8004182:	001a      	movs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4353      	muls	r3, r2
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	e009      	b.n	80041a0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	000a      	movs	r2, r1
 8004190:	0152      	lsls	r2, r2, #5
 8004192:	1a52      	subs	r2, r2, r1
 8004194:	0193      	lsls	r3, r2, #6
 8004196:	1a9b      	subs	r3, r3, r2
 8004198:	00db      	lsls	r3, r3, #3
 800419a:	185b      	adds	r3, r3, r1
 800419c:	021b      	lsls	r3, r3, #8
 800419e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	613b      	str	r3, [r7, #16]
      break;
 80041a4:	e002      	b.n	80041ac <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetSysClockFreq+0xa0>)
 80041a8:	613b      	str	r3, [r7, #16]
      break;
 80041aa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80041ac:	693b      	ldr	r3, [r7, #16]
}
 80041ae:	0018      	movs	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b006      	add	sp, #24
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	40021000 	.word	0x40021000
 80041bc:	007a1200 	.word	0x007a1200
 80041c0:	0800568c 	.word	0x0800568c
 80041c4:	0800569c 	.word	0x0800569c

080041c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041cc:	4b02      	ldr	r3, [pc, #8]	; (80041d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80041ce:	681b      	ldr	r3, [r3, #0]
}
 80041d0:	0018      	movs	r0, r3
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	46c0      	nop			; (mov r8, r8)
 80041d8:	20000004 	.word	0x20000004

080041dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80041e0:	f7ff fff2 	bl	80041c8 <HAL_RCC_GetHCLKFreq>
 80041e4:	0001      	movs	r1, r0
 80041e6:	4b06      	ldr	r3, [pc, #24]	; (8004200 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	0a1b      	lsrs	r3, r3, #8
 80041ec:	2207      	movs	r2, #7
 80041ee:	4013      	ands	r3, r2
 80041f0:	4a04      	ldr	r2, [pc, #16]	; (8004204 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041f2:	5cd3      	ldrb	r3, [r2, r3]
 80041f4:	40d9      	lsrs	r1, r3
 80041f6:	000b      	movs	r3, r1
}    
 80041f8:	0018      	movs	r0, r3
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	40021000 	.word	0x40021000
 8004204:	08005684 	.word	0x08005684

08004208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	2380      	movs	r3, #128	; 0x80
 800421e:	025b      	lsls	r3, r3, #9
 8004220:	4013      	ands	r3, r2
 8004222:	d100      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004224:	e08e      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004226:	2017      	movs	r0, #23
 8004228:	183b      	adds	r3, r7, r0
 800422a:	2200      	movs	r2, #0
 800422c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422e:	4b57      	ldr	r3, [pc, #348]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004230:	69da      	ldr	r2, [r3, #28]
 8004232:	2380      	movs	r3, #128	; 0x80
 8004234:	055b      	lsls	r3, r3, #21
 8004236:	4013      	ands	r3, r2
 8004238:	d110      	bne.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800423a:	4b54      	ldr	r3, [pc, #336]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800423c:	69da      	ldr	r2, [r3, #28]
 800423e:	4b53      	ldr	r3, [pc, #332]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004240:	2180      	movs	r1, #128	; 0x80
 8004242:	0549      	lsls	r1, r1, #21
 8004244:	430a      	orrs	r2, r1
 8004246:	61da      	str	r2, [r3, #28]
 8004248:	4b50      	ldr	r3, [pc, #320]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800424a:	69da      	ldr	r2, [r3, #28]
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	055b      	lsls	r3, r3, #21
 8004250:	4013      	ands	r3, r2
 8004252:	60bb      	str	r3, [r7, #8]
 8004254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004256:	183b      	adds	r3, r7, r0
 8004258:	2201      	movs	r2, #1
 800425a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800425c:	4b4c      	ldr	r3, [pc, #304]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	2380      	movs	r3, #128	; 0x80
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4013      	ands	r3, r2
 8004266:	d11a      	bne.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004268:	4b49      	ldr	r3, [pc, #292]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	4b48      	ldr	r3, [pc, #288]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800426e:	2180      	movs	r1, #128	; 0x80
 8004270:	0049      	lsls	r1, r1, #1
 8004272:	430a      	orrs	r2, r1
 8004274:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004276:	f7fc ff8f 	bl	8001198 <HAL_GetTick>
 800427a:	0003      	movs	r3, r0
 800427c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800427e:	e008      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004280:	f7fc ff8a 	bl	8001198 <HAL_GetTick>
 8004284:	0002      	movs	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b64      	cmp	r3, #100	; 0x64
 800428c:	d901      	bls.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e077      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004292:	4b3f      	ldr	r3, [pc, #252]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	2380      	movs	r3, #128	; 0x80
 8004298:	005b      	lsls	r3, r3, #1
 800429a:	4013      	ands	r3, r2
 800429c:	d0f0      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800429e:	4b3b      	ldr	r3, [pc, #236]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	23c0      	movs	r3, #192	; 0xc0
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4013      	ands	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d034      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685a      	ldr	r2, [r3, #4]
 80042b4:	23c0      	movs	r3, #192	; 0xc0
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	4013      	ands	r3, r2
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d02c      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80042c0:	4b32      	ldr	r3, [pc, #200]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	4a33      	ldr	r2, [pc, #204]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80042c6:	4013      	ands	r3, r2
 80042c8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80042ca:	4b30      	ldr	r3, [pc, #192]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042cc:	6a1a      	ldr	r2, [r3, #32]
 80042ce:	4b2f      	ldr	r3, [pc, #188]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042d0:	2180      	movs	r1, #128	; 0x80
 80042d2:	0249      	lsls	r1, r1, #9
 80042d4:	430a      	orrs	r2, r1
 80042d6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042d8:	4b2c      	ldr	r3, [pc, #176]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042da:	6a1a      	ldr	r2, [r3, #32]
 80042dc:	4b2b      	ldr	r3, [pc, #172]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042de:	492e      	ldr	r1, [pc, #184]	; (8004398 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80042e0:	400a      	ands	r2, r1
 80042e2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042e4:	4b29      	ldr	r3, [pc, #164]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2201      	movs	r2, #1
 80042ee:	4013      	ands	r3, r2
 80042f0:	d013      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042f2:	f7fc ff51 	bl	8001198 <HAL_GetTick>
 80042f6:	0003      	movs	r3, r0
 80042f8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fa:	e009      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042fc:	f7fc ff4c 	bl	8001198 <HAL_GetTick>
 8004300:	0002      	movs	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	4a25      	ldr	r2, [pc, #148]	; (800439c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d901      	bls.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800430c:	2303      	movs	r3, #3
 800430e:	e038      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004310:	4b1e      	ldr	r3, [pc, #120]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	2202      	movs	r2, #2
 8004316:	4013      	ands	r3, r2
 8004318:	d0f0      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800431a:	4b1c      	ldr	r3, [pc, #112]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	4a1d      	ldr	r2, [pc, #116]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004320:	4013      	ands	r3, r2
 8004322:	0019      	movs	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685a      	ldr	r2, [r3, #4]
 8004328:	4b18      	ldr	r3, [pc, #96]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800432a:	430a      	orrs	r2, r1
 800432c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800432e:	2317      	movs	r3, #23
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d105      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004338:	4b14      	ldr	r3, [pc, #80]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	4b13      	ldr	r3, [pc, #76]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800433e:	4918      	ldr	r1, [pc, #96]	; (80043a0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004340:	400a      	ands	r2, r1
 8004342:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	2201      	movs	r2, #1
 800434a:	4013      	ands	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800434e:	4b0f      	ldr	r3, [pc, #60]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004352:	2203      	movs	r2, #3
 8004354:	4393      	bics	r3, r2
 8004356:	0019      	movs	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	4b0b      	ldr	r3, [pc, #44]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800435e:	430a      	orrs	r2, r1
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2220      	movs	r2, #32
 8004368:	4013      	ands	r3, r2
 800436a:	d009      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800436c:	4b07      	ldr	r3, [pc, #28]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004370:	2210      	movs	r2, #16
 8004372:	4393      	bics	r3, r2
 8004374:	0019      	movs	r1, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68da      	ldr	r2, [r3, #12]
 800437a:	4b04      	ldr	r3, [pc, #16]	; (800438c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800437c:	430a      	orrs	r2, r1
 800437e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	0018      	movs	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	b006      	add	sp, #24
 8004388:	bd80      	pop	{r7, pc}
 800438a:	46c0      	nop			; (mov r8, r8)
 800438c:	40021000 	.word	0x40021000
 8004390:	40007000 	.word	0x40007000
 8004394:	fffffcff 	.word	0xfffffcff
 8004398:	fffeffff 	.word	0xfffeffff
 800439c:	00001388 	.word	0x00001388
 80043a0:	efffffff 	.word	0xefffffff

080043a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b082      	sub	sp, #8
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e042      	b.n	800443c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	223d      	movs	r2, #61	; 0x3d
 80043ba:	5c9b      	ldrb	r3, [r3, r2]
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d107      	bne.n	80043d2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	223c      	movs	r2, #60	; 0x3c
 80043c6:	2100      	movs	r1, #0
 80043c8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7fc fd83 	bl	8000ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	223d      	movs	r2, #61	; 0x3d
 80043d6:	2102      	movs	r1, #2
 80043d8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	0019      	movs	r1, r3
 80043e4:	0010      	movs	r0, r2
 80043e6:	f000 f991 	bl	800470c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2246      	movs	r2, #70	; 0x46
 80043ee:	2101      	movs	r1, #1
 80043f0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	223e      	movs	r2, #62	; 0x3e
 80043f6:	2101      	movs	r1, #1
 80043f8:	5499      	strb	r1, [r3, r2]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	223f      	movs	r2, #63	; 0x3f
 80043fe:	2101      	movs	r1, #1
 8004400:	5499      	strb	r1, [r3, r2]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2240      	movs	r2, #64	; 0x40
 8004406:	2101      	movs	r1, #1
 8004408:	5499      	strb	r1, [r3, r2]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2241      	movs	r2, #65	; 0x41
 800440e:	2101      	movs	r1, #1
 8004410:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2242      	movs	r2, #66	; 0x42
 8004416:	2101      	movs	r1, #1
 8004418:	5499      	strb	r1, [r3, r2]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2243      	movs	r2, #67	; 0x43
 800441e:	2101      	movs	r1, #1
 8004420:	5499      	strb	r1, [r3, r2]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2244      	movs	r2, #68	; 0x44
 8004426:	2101      	movs	r1, #1
 8004428:	5499      	strb	r1, [r3, r2]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2245      	movs	r2, #69	; 0x45
 800442e:	2101      	movs	r1, #1
 8004430:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	223d      	movs	r2, #61	; 0x3d
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	0018      	movs	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	b002      	add	sp, #8
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68da      	ldr	r2, [r3, #12]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2101      	movs	r1, #1
 8004458:	438a      	bics	r2, r1
 800445a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	4a0d      	ldr	r2, [pc, #52]	; (8004498 <HAL_TIM_Base_Stop_IT+0x54>)
 8004464:	4013      	ands	r3, r2
 8004466:	d10d      	bne.n	8004484 <HAL_TIM_Base_Stop_IT+0x40>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	4a0b      	ldr	r2, [pc, #44]	; (800449c <HAL_TIM_Base_Stop_IT+0x58>)
 8004470:	4013      	ands	r3, r2
 8004472:	d107      	bne.n	8004484 <HAL_TIM_Base_Stop_IT+0x40>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2101      	movs	r1, #1
 8004480:	438a      	bics	r2, r1
 8004482:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	223d      	movs	r2, #61	; 0x3d
 8004488:	2101      	movs	r1, #1
 800448a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	0018      	movs	r0, r3
 8004490:	46bd      	mov	sp, r7
 8004492:	b002      	add	sp, #8
 8004494:	bd80      	pop	{r7, pc}
 8004496:	46c0      	nop			; (mov r8, r8)
 8004498:	00001111 	.word	0x00001111
 800449c:	00000444 	.word	0x00000444

080044a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	2202      	movs	r2, #2
 80044b0:	4013      	ands	r3, r2
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d124      	bne.n	8004500 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	2202      	movs	r2, #2
 80044be:	4013      	ands	r3, r2
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d11d      	bne.n	8004500 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2203      	movs	r2, #3
 80044ca:	4252      	negs	r2, r2
 80044cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	2203      	movs	r2, #3
 80044dc:	4013      	ands	r3, r2
 80044de:	d004      	beq.n	80044ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	0018      	movs	r0, r3
 80044e4:	f000 f8fa 	bl	80046dc <HAL_TIM_IC_CaptureCallback>
 80044e8:	e007      	b.n	80044fa <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0018      	movs	r0, r3
 80044ee:	f000 f8ed 	bl	80046cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	0018      	movs	r0, r3
 80044f6:	f000 f8f9 	bl	80046ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2204      	movs	r2, #4
 8004508:	4013      	ands	r3, r2
 800450a:	2b04      	cmp	r3, #4
 800450c:	d125      	bne.n	800455a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2204      	movs	r2, #4
 8004516:	4013      	ands	r3, r2
 8004518:	2b04      	cmp	r3, #4
 800451a:	d11e      	bne.n	800455a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2205      	movs	r2, #5
 8004522:	4252      	negs	r2, r2
 8004524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2202      	movs	r2, #2
 800452a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	699a      	ldr	r2, [r3, #24]
 8004532:	23c0      	movs	r3, #192	; 0xc0
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	4013      	ands	r3, r2
 8004538:	d004      	beq.n	8004544 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	0018      	movs	r0, r3
 800453e:	f000 f8cd 	bl	80046dc <HAL_TIM_IC_CaptureCallback>
 8004542:	e007      	b.n	8004554 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	0018      	movs	r0, r3
 8004548:	f000 f8c0 	bl	80046cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0018      	movs	r0, r3
 8004550:	f000 f8cc 	bl	80046ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	2208      	movs	r2, #8
 8004562:	4013      	ands	r3, r2
 8004564:	2b08      	cmp	r3, #8
 8004566:	d124      	bne.n	80045b2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	2208      	movs	r2, #8
 8004570:	4013      	ands	r3, r2
 8004572:	2b08      	cmp	r3, #8
 8004574:	d11d      	bne.n	80045b2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2209      	movs	r2, #9
 800457c:	4252      	negs	r2, r2
 800457e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2204      	movs	r2, #4
 8004584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	2203      	movs	r2, #3
 800458e:	4013      	ands	r3, r2
 8004590:	d004      	beq.n	800459c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	0018      	movs	r0, r3
 8004596:	f000 f8a1 	bl	80046dc <HAL_TIM_IC_CaptureCallback>
 800459a:	e007      	b.n	80045ac <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	0018      	movs	r0, r3
 80045a0:	f000 f894 	bl	80046cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	0018      	movs	r0, r3
 80045a8:	f000 f8a0 	bl	80046ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	2210      	movs	r2, #16
 80045ba:	4013      	ands	r3, r2
 80045bc:	2b10      	cmp	r3, #16
 80045be:	d125      	bne.n	800460c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2210      	movs	r2, #16
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b10      	cmp	r3, #16
 80045cc:	d11e      	bne.n	800460c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2211      	movs	r2, #17
 80045d4:	4252      	negs	r2, r2
 80045d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2208      	movs	r2, #8
 80045dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	69da      	ldr	r2, [r3, #28]
 80045e4:	23c0      	movs	r3, #192	; 0xc0
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4013      	ands	r3, r2
 80045ea:	d004      	beq.n	80045f6 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	0018      	movs	r0, r3
 80045f0:	f000 f874 	bl	80046dc <HAL_TIM_IC_CaptureCallback>
 80045f4:	e007      	b.n	8004606 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f000 f867 	bl	80046cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	0018      	movs	r0, r3
 8004602:	f000 f873 	bl	80046ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2201      	movs	r2, #1
 8004614:	4013      	ands	r3, r2
 8004616:	2b01      	cmp	r3, #1
 8004618:	d10f      	bne.n	800463a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2201      	movs	r2, #1
 8004622:	4013      	ands	r3, r2
 8004624:	2b01      	cmp	r3, #1
 8004626:	d108      	bne.n	800463a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2202      	movs	r2, #2
 800462e:	4252      	negs	r2, r2
 8004630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	0018      	movs	r0, r3
 8004636:	f7fc fb6d 	bl	8000d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	2280      	movs	r2, #128	; 0x80
 8004642:	4013      	ands	r3, r2
 8004644:	2b80      	cmp	r3, #128	; 0x80
 8004646:	d10f      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	2280      	movs	r2, #128	; 0x80
 8004650:	4013      	ands	r3, r2
 8004652:	2b80      	cmp	r3, #128	; 0x80
 8004654:	d108      	bne.n	8004668 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2281      	movs	r2, #129	; 0x81
 800465c:	4252      	negs	r2, r2
 800465e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	0018      	movs	r0, r3
 8004664:	f000 f8d0 	bl	8004808 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2240      	movs	r2, #64	; 0x40
 8004670:	4013      	ands	r3, r2
 8004672:	2b40      	cmp	r3, #64	; 0x40
 8004674:	d10f      	bne.n	8004696 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	2240      	movs	r2, #64	; 0x40
 800467e:	4013      	ands	r3, r2
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d108      	bne.n	8004696 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2241      	movs	r2, #65	; 0x41
 800468a:	4252      	negs	r2, r2
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	0018      	movs	r0, r3
 8004692:	f000 f833 	bl	80046fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	2220      	movs	r2, #32
 800469e:	4013      	ands	r3, r2
 80046a0:	2b20      	cmp	r3, #32
 80046a2:	d10f      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2220      	movs	r2, #32
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	d108      	bne.n	80046c4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2221      	movs	r2, #33	; 0x21
 80046b8:	4252      	negs	r2, r2
 80046ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	0018      	movs	r0, r3
 80046c0:	f000 f89a 	bl	80047f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046c4:	46c0      	nop			; (mov r8, r8)
 80046c6:	46bd      	mov	sp, r7
 80046c8:	b002      	add	sp, #8
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b082      	sub	sp, #8
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046d4:	46c0      	nop			; (mov r8, r8)
 80046d6:	46bd      	mov	sp, r7
 80046d8:	b002      	add	sp, #8
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b002      	add	sp, #8
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046f4:	46c0      	nop			; (mov r8, r8)
 80046f6:	46bd      	mov	sp, r7
 80046f8:	b002      	add	sp, #8
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004704:	46c0      	nop			; (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	b002      	add	sp, #8
 800470a:	bd80      	pop	{r7, pc}

0800470c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a2f      	ldr	r2, [pc, #188]	; (80047dc <TIM_Base_SetConfig+0xd0>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d003      	beq.n	800472c <TIM_Base_SetConfig+0x20>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a2e      	ldr	r2, [pc, #184]	; (80047e0 <TIM_Base_SetConfig+0xd4>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d108      	bne.n	800473e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2270      	movs	r2, #112	; 0x70
 8004730:	4393      	bics	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	68fa      	ldr	r2, [r7, #12]
 800473a:	4313      	orrs	r3, r2
 800473c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a26      	ldr	r2, [pc, #152]	; (80047dc <TIM_Base_SetConfig+0xd0>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <TIM_Base_SetConfig+0x62>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a25      	ldr	r2, [pc, #148]	; (80047e0 <TIM_Base_SetConfig+0xd4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00f      	beq.n	800476e <TIM_Base_SetConfig+0x62>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a24      	ldr	r2, [pc, #144]	; (80047e4 <TIM_Base_SetConfig+0xd8>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00b      	beq.n	800476e <TIM_Base_SetConfig+0x62>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <TIM_Base_SetConfig+0xdc>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d007      	beq.n	800476e <TIM_Base_SetConfig+0x62>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a22      	ldr	r2, [pc, #136]	; (80047ec <TIM_Base_SetConfig+0xe0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d003      	beq.n	800476e <TIM_Base_SetConfig+0x62>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a21      	ldr	r2, [pc, #132]	; (80047f0 <TIM_Base_SetConfig+0xe4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d108      	bne.n	8004780 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a20      	ldr	r2, [pc, #128]	; (80047f4 <TIM_Base_SetConfig+0xe8>)
 8004772:	4013      	ands	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2280      	movs	r2, #128	; 0x80
 8004784:	4393      	bics	r3, r2
 8004786:	001a      	movs	r2, r3
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	695b      	ldr	r3, [r3, #20]
 800478c:	4313      	orrs	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a0c      	ldr	r2, [pc, #48]	; (80047dc <TIM_Base_SetConfig+0xd0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00b      	beq.n	80047c6 <TIM_Base_SetConfig+0xba>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a0d      	ldr	r2, [pc, #52]	; (80047e8 <TIM_Base_SetConfig+0xdc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d007      	beq.n	80047c6 <TIM_Base_SetConfig+0xba>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a0c      	ldr	r2, [pc, #48]	; (80047ec <TIM_Base_SetConfig+0xe0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d003      	beq.n	80047c6 <TIM_Base_SetConfig+0xba>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a0b      	ldr	r2, [pc, #44]	; (80047f0 <TIM_Base_SetConfig+0xe4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d103      	bne.n	80047ce <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	691a      	ldr	r2, [r3, #16]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	615a      	str	r2, [r3, #20]
}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b004      	add	sp, #16
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40012c00 	.word	0x40012c00
 80047e0:	40000400 	.word	0x40000400
 80047e4:	40002000 	.word	0x40002000
 80047e8:	40014000 	.word	0x40014000
 80047ec:	40014400 	.word	0x40014400
 80047f0:	40014800 	.word	0x40014800
 80047f4:	fffffcff 	.word	0xfffffcff

080047f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b082      	sub	sp, #8
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004800:	46c0      	nop			; (mov r8, r8)
 8004802:	46bd      	mov	sp, r7
 8004804:	b002      	add	sp, #8
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004810:	46c0      	nop			; (mov r8, r8)
 8004812:	46bd      	mov	sp, r7
 8004814:	b002      	add	sp, #8
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e044      	b.n	80048b4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d107      	bne.n	8004842 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2278      	movs	r2, #120	; 0x78
 8004836:	2100      	movs	r1, #0
 8004838:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	0018      	movs	r0, r3
 800483e:	f7fc fb71 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2224      	movs	r2, #36	; 0x24
 8004846:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2101      	movs	r1, #1
 8004854:	438a      	bics	r2, r1
 8004856:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	0018      	movs	r0, r3
 800485c:	f000 fb0c 	bl	8004e78 <UART_SetConfig>
 8004860:	0003      	movs	r3, r0
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e024      	b.n	80048b4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	0018      	movs	r0, r3
 8004876:	f000 fc3f 	bl	80050f8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685a      	ldr	r2, [r3, #4]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	490d      	ldr	r1, [pc, #52]	; (80048bc <HAL_UART_Init+0xa4>)
 8004886:	400a      	ands	r2, r1
 8004888:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2108      	movs	r1, #8
 8004896:	438a      	bics	r2, r1
 8004898:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2101      	movs	r1, #1
 80048a6:	430a      	orrs	r2, r1
 80048a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	0018      	movs	r0, r3
 80048ae:	f000 fcd7 	bl	8005260 <UART_CheckIdleState>
 80048b2:	0003      	movs	r3, r0
}
 80048b4:	0018      	movs	r0, r3
 80048b6:	46bd      	mov	sp, r7
 80048b8:	b002      	add	sp, #8
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	fffff7ff 	.word	0xfffff7ff

080048c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048c0:	b590      	push	{r4, r7, lr}
 80048c2:	b0ab      	sub	sp, #172	; 0xac
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	22a4      	movs	r2, #164	; 0xa4
 80048d0:	18b9      	adds	r1, r7, r2
 80048d2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	20a0      	movs	r0, #160	; 0xa0
 80048dc:	1839      	adds	r1, r7, r0
 80048de:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	219c      	movs	r1, #156	; 0x9c
 80048e8:	1879      	adds	r1, r7, r1
 80048ea:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80048ec:	0011      	movs	r1, r2
 80048ee:	18bb      	adds	r3, r7, r2
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a99      	ldr	r2, [pc, #612]	; (8004b58 <HAL_UART_IRQHandler+0x298>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	2298      	movs	r2, #152	; 0x98
 80048f8:	18bc      	adds	r4, r7, r2
 80048fa:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80048fc:	18bb      	adds	r3, r7, r2
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d114      	bne.n	800492e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004904:	187b      	adds	r3, r7, r1
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2220      	movs	r2, #32
 800490a:	4013      	ands	r3, r2
 800490c:	d00f      	beq.n	800492e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800490e:	183b      	adds	r3, r7, r0
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2220      	movs	r2, #32
 8004914:	4013      	ands	r3, r2
 8004916:	d00a      	beq.n	800492e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800491c:	2b00      	cmp	r3, #0
 800491e:	d100      	bne.n	8004922 <HAL_UART_IRQHandler+0x62>
 8004920:	e286      	b.n	8004e30 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004926:	687a      	ldr	r2, [r7, #4]
 8004928:	0010      	movs	r0, r2
 800492a:	4798      	blx	r3
      }
      return;
 800492c:	e280      	b.n	8004e30 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800492e:	2398      	movs	r3, #152	; 0x98
 8004930:	18fb      	adds	r3, r7, r3
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d100      	bne.n	800493a <HAL_UART_IRQHandler+0x7a>
 8004938:	e114      	b.n	8004b64 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800493a:	239c      	movs	r3, #156	; 0x9c
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2201      	movs	r2, #1
 8004942:	4013      	ands	r3, r2
 8004944:	d106      	bne.n	8004954 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004946:	23a0      	movs	r3, #160	; 0xa0
 8004948:	18fb      	adds	r3, r7, r3
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a83      	ldr	r2, [pc, #524]	; (8004b5c <HAL_UART_IRQHandler+0x29c>)
 800494e:	4013      	ands	r3, r2
 8004950:	d100      	bne.n	8004954 <HAL_UART_IRQHandler+0x94>
 8004952:	e107      	b.n	8004b64 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004954:	23a4      	movs	r3, #164	; 0xa4
 8004956:	18fb      	adds	r3, r7, r3
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2201      	movs	r2, #1
 800495c:	4013      	ands	r3, r2
 800495e:	d012      	beq.n	8004986 <HAL_UART_IRQHandler+0xc6>
 8004960:	23a0      	movs	r3, #160	; 0xa0
 8004962:	18fb      	adds	r3, r7, r3
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	2380      	movs	r3, #128	; 0x80
 8004968:	005b      	lsls	r3, r3, #1
 800496a:	4013      	ands	r3, r2
 800496c:	d00b      	beq.n	8004986 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2201      	movs	r2, #1
 8004974:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2284      	movs	r2, #132	; 0x84
 800497a:	589b      	ldr	r3, [r3, r2]
 800497c:	2201      	movs	r2, #1
 800497e:	431a      	orrs	r2, r3
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2184      	movs	r1, #132	; 0x84
 8004984:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004986:	23a4      	movs	r3, #164	; 0xa4
 8004988:	18fb      	adds	r3, r7, r3
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2202      	movs	r2, #2
 800498e:	4013      	ands	r3, r2
 8004990:	d011      	beq.n	80049b6 <HAL_UART_IRQHandler+0xf6>
 8004992:	239c      	movs	r3, #156	; 0x9c
 8004994:	18fb      	adds	r3, r7, r3
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2201      	movs	r2, #1
 800499a:	4013      	ands	r3, r2
 800499c:	d00b      	beq.n	80049b6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2202      	movs	r2, #2
 80049a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2284      	movs	r2, #132	; 0x84
 80049aa:	589b      	ldr	r3, [r3, r2]
 80049ac:	2204      	movs	r2, #4
 80049ae:	431a      	orrs	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2184      	movs	r1, #132	; 0x84
 80049b4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80049b6:	23a4      	movs	r3, #164	; 0xa4
 80049b8:	18fb      	adds	r3, r7, r3
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2204      	movs	r2, #4
 80049be:	4013      	ands	r3, r2
 80049c0:	d011      	beq.n	80049e6 <HAL_UART_IRQHandler+0x126>
 80049c2:	239c      	movs	r3, #156	; 0x9c
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	2201      	movs	r2, #1
 80049ca:	4013      	ands	r3, r2
 80049cc:	d00b      	beq.n	80049e6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2204      	movs	r2, #4
 80049d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2284      	movs	r2, #132	; 0x84
 80049da:	589b      	ldr	r3, [r3, r2]
 80049dc:	2202      	movs	r2, #2
 80049de:	431a      	orrs	r2, r3
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2184      	movs	r1, #132	; 0x84
 80049e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80049e6:	23a4      	movs	r3, #164	; 0xa4
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2208      	movs	r2, #8
 80049ee:	4013      	ands	r3, r2
 80049f0:	d017      	beq.n	8004a22 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80049f2:	23a0      	movs	r3, #160	; 0xa0
 80049f4:	18fb      	adds	r3, r7, r3
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2220      	movs	r2, #32
 80049fa:	4013      	ands	r3, r2
 80049fc:	d105      	bne.n	8004a0a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80049fe:	239c      	movs	r3, #156	; 0x9c
 8004a00:	18fb      	adds	r3, r7, r3
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2201      	movs	r2, #1
 8004a06:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004a08:	d00b      	beq.n	8004a22 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	2208      	movs	r2, #8
 8004a10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2284      	movs	r2, #132	; 0x84
 8004a16:	589b      	ldr	r3, [r3, r2]
 8004a18:	2208      	movs	r2, #8
 8004a1a:	431a      	orrs	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2184      	movs	r1, #132	; 0x84
 8004a20:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004a22:	23a4      	movs	r3, #164	; 0xa4
 8004a24:	18fb      	adds	r3, r7, r3
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	2380      	movs	r3, #128	; 0x80
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	d013      	beq.n	8004a58 <HAL_UART_IRQHandler+0x198>
 8004a30:	23a0      	movs	r3, #160	; 0xa0
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	2380      	movs	r3, #128	; 0x80
 8004a38:	04db      	lsls	r3, r3, #19
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	d00c      	beq.n	8004a58 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	2280      	movs	r2, #128	; 0x80
 8004a44:	0112      	lsls	r2, r2, #4
 8004a46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2284      	movs	r2, #132	; 0x84
 8004a4c:	589b      	ldr	r3, [r3, r2]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2184      	movs	r1, #132	; 0x84
 8004a56:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2284      	movs	r2, #132	; 0x84
 8004a5c:	589b      	ldr	r3, [r3, r2]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d100      	bne.n	8004a64 <HAL_UART_IRQHandler+0x1a4>
 8004a62:	e1e7      	b.n	8004e34 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004a64:	23a4      	movs	r3, #164	; 0xa4
 8004a66:	18fb      	adds	r3, r7, r3
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d00e      	beq.n	8004a8e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004a70:	23a0      	movs	r3, #160	; 0xa0
 8004a72:	18fb      	adds	r3, r7, r3
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2220      	movs	r2, #32
 8004a78:	4013      	ands	r3, r2
 8004a7a:	d008      	beq.n	8004a8e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d004      	beq.n	8004a8e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	0010      	movs	r0, r2
 8004a8c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2284      	movs	r2, #132	; 0x84
 8004a92:	589b      	ldr	r3, [r3, r2]
 8004a94:	2194      	movs	r1, #148	; 0x94
 8004a96:	187a      	adds	r2, r7, r1
 8004a98:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	2240      	movs	r2, #64	; 0x40
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	2b40      	cmp	r3, #64	; 0x40
 8004aa6:	d004      	beq.n	8004ab2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004aa8:	187b      	adds	r3, r7, r1
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2228      	movs	r2, #40	; 0x28
 8004aae:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ab0:	d047      	beq.n	8004b42 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	0018      	movs	r0, r3
 8004ab6:	f000 fce5 	bl	8005484 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2240      	movs	r2, #64	; 0x40
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	2b40      	cmp	r3, #64	; 0x40
 8004ac6:	d137      	bne.n	8004b38 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac8:	f3ef 8310 	mrs	r3, PRIMASK
 8004acc:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004ace:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ad0:	2090      	movs	r0, #144	; 0x90
 8004ad2:	183a      	adds	r2, r7, r0
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004adc:	f383 8810 	msr	PRIMASK, r3
}
 8004ae0:	46c0      	nop			; (mov r8, r8)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689a      	ldr	r2, [r3, #8]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2140      	movs	r1, #64	; 0x40
 8004aee:	438a      	bics	r2, r1
 8004af0:	609a      	str	r2, [r3, #8]
 8004af2:	183b      	adds	r3, r7, r0
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004afa:	f383 8810 	msr	PRIMASK, r3
}
 8004afe:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d012      	beq.n	8004b2e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b0c:	4a14      	ldr	r2, [pc, #80]	; (8004b60 <HAL_UART_IRQHandler+0x2a0>)
 8004b0e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b14:	0018      	movs	r0, r3
 8004b16:	f7fc fd31 	bl	800157c <HAL_DMA_Abort_IT>
 8004b1a:	1e03      	subs	r3, r0, #0
 8004b1c:	d01a      	beq.n	8004b54 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b28:	0018      	movs	r0, r3
 8004b2a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b2c:	e012      	b.n	8004b54 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	0018      	movs	r0, r3
 8004b32:	f000 f98d 	bl	8004e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b36:	e00d      	b.n	8004b54 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f000 f988 	bl	8004e50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b40:	e008      	b.n	8004b54 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	0018      	movs	r0, r3
 8004b46:	f000 f983 	bl	8004e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2284      	movs	r2, #132	; 0x84
 8004b4e:	2100      	movs	r1, #0
 8004b50:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004b52:	e16f      	b.n	8004e34 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b54:	46c0      	nop			; (mov r8, r8)
    return;
 8004b56:	e16d      	b.n	8004e34 <HAL_UART_IRQHandler+0x574>
 8004b58:	0000080f 	.word	0x0000080f
 8004b5c:	04000120 	.word	0x04000120
 8004b60:	0800554d 	.word	0x0800554d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d000      	beq.n	8004b6e <HAL_UART_IRQHandler+0x2ae>
 8004b6c:	e139      	b.n	8004de2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004b6e:	23a4      	movs	r3, #164	; 0xa4
 8004b70:	18fb      	adds	r3, r7, r3
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2210      	movs	r2, #16
 8004b76:	4013      	ands	r3, r2
 8004b78:	d100      	bne.n	8004b7c <HAL_UART_IRQHandler+0x2bc>
 8004b7a:	e132      	b.n	8004de2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004b7c:	23a0      	movs	r3, #160	; 0xa0
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2210      	movs	r2, #16
 8004b84:	4013      	ands	r3, r2
 8004b86:	d100      	bne.n	8004b8a <HAL_UART_IRQHandler+0x2ca>
 8004b88:	e12b      	b.n	8004de2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2210      	movs	r2, #16
 8004b90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2240      	movs	r2, #64	; 0x40
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	2b40      	cmp	r3, #64	; 0x40
 8004b9e:	d000      	beq.n	8004ba2 <HAL_UART_IRQHandler+0x2e2>
 8004ba0:	e09f      	b.n	8004ce2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	685a      	ldr	r2, [r3, #4]
 8004baa:	217e      	movs	r1, #126	; 0x7e
 8004bac:	187b      	adds	r3, r7, r1
 8004bae:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004bb0:	187b      	adds	r3, r7, r1
 8004bb2:	881b      	ldrh	r3, [r3, #0]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d100      	bne.n	8004bba <HAL_UART_IRQHandler+0x2fa>
 8004bb8:	e13e      	b.n	8004e38 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2258      	movs	r2, #88	; 0x58
 8004bbe:	5a9b      	ldrh	r3, [r3, r2]
 8004bc0:	187a      	adds	r2, r7, r1
 8004bc2:	8812      	ldrh	r2, [r2, #0]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d300      	bcc.n	8004bca <HAL_UART_IRQHandler+0x30a>
 8004bc8:	e136      	b.n	8004e38 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	187a      	adds	r2, r7, r1
 8004bce:	215a      	movs	r1, #90	; 0x5a
 8004bd0:	8812      	ldrh	r2, [r2, #0]
 8004bd2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	2b20      	cmp	r3, #32
 8004bdc:	d06f      	beq.n	8004cbe <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bde:	f3ef 8310 	mrs	r3, PRIMASK
 8004be2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004be6:	67bb      	str	r3, [r7, #120]	; 0x78
 8004be8:	2301      	movs	r3, #1
 8004bea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bee:	f383 8810 	msr	PRIMASK, r3
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4992      	ldr	r1, [pc, #584]	; (8004e48 <HAL_UART_IRQHandler+0x588>)
 8004c00:	400a      	ands	r2, r1
 8004c02:	601a      	str	r2, [r3, #0]
 8004c04:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c06:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c0a:	f383 8810 	msr	PRIMASK, r3
}
 8004c0e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c10:	f3ef 8310 	mrs	r3, PRIMASK
 8004c14:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004c16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c18:	677b      	str	r3, [r7, #116]	; 0x74
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c20:	f383 8810 	msr	PRIMASK, r3
}
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	689a      	ldr	r2, [r3, #8]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2101      	movs	r1, #1
 8004c32:	438a      	bics	r2, r1
 8004c34:	609a      	str	r2, [r3, #8]
 8004c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c38:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c3c:	f383 8810 	msr	PRIMASK, r3
}
 8004c40:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c42:	f3ef 8310 	mrs	r3, PRIMASK
 8004c46:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c4a:	673b      	str	r3, [r7, #112]	; 0x70
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c52:	f383 8810 	msr	PRIMASK, r3
}
 8004c56:	46c0      	nop			; (mov r8, r8)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	689a      	ldr	r2, [r3, #8]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2140      	movs	r1, #64	; 0x40
 8004c64:	438a      	bics	r2, r1
 8004c66:	609a      	str	r2, [r3, #8]
 8004c68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c6a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c6e:	f383 8810 	msr	PRIMASK, r3
}
 8004c72:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2280      	movs	r2, #128	; 0x80
 8004c78:	2120      	movs	r1, #32
 8004c7a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c82:	f3ef 8310 	mrs	r3, PRIMASK
 8004c86:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c92:	f383 8810 	msr	PRIMASK, r3
}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2110      	movs	r1, #16
 8004ca4:	438a      	bics	r2, r1
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004caa:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004cae:	f383 8810 	msr	PRIMASK, r3
}
 8004cb2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cb8:	0018      	movs	r0, r3
 8004cba:	f7fc fc27 	bl	800150c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2258      	movs	r2, #88	; 0x58
 8004cc8:	5a9a      	ldrh	r2, [r3, r2]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	215a      	movs	r1, #90	; 0x5a
 8004cce:	5a5b      	ldrh	r3, [r3, r1]
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	0011      	movs	r1, r2
 8004cda:	0018      	movs	r0, r3
 8004cdc:	f000 f8c0 	bl	8004e60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ce0:	e0aa      	b.n	8004e38 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2258      	movs	r2, #88	; 0x58
 8004ce6:	5a99      	ldrh	r1, [r3, r2]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	225a      	movs	r2, #90	; 0x5a
 8004cec:	5a9b      	ldrh	r3, [r3, r2]
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	208e      	movs	r0, #142	; 0x8e
 8004cf2:	183b      	adds	r3, r7, r0
 8004cf4:	1a8a      	subs	r2, r1, r2
 8004cf6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	225a      	movs	r2, #90	; 0x5a
 8004cfc:	5a9b      	ldrh	r3, [r3, r2]
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d100      	bne.n	8004d06 <HAL_UART_IRQHandler+0x446>
 8004d04:	e09a      	b.n	8004e3c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8004d06:	183b      	adds	r3, r7, r0
 8004d08:	881b      	ldrh	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d100      	bne.n	8004d10 <HAL_UART_IRQHandler+0x450>
 8004d0e:	e095      	b.n	8004e3c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d10:	f3ef 8310 	mrs	r3, PRIMASK
 8004d14:	60fb      	str	r3, [r7, #12]
  return(result);
 8004d16:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d18:	2488      	movs	r4, #136	; 0x88
 8004d1a:	193a      	adds	r2, r7, r4
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	2301      	movs	r3, #1
 8004d20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f383 8810 	msr	PRIMASK, r3
}
 8004d28:	46c0      	nop			; (mov r8, r8)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4945      	ldr	r1, [pc, #276]	; (8004e4c <HAL_UART_IRQHandler+0x58c>)
 8004d36:	400a      	ands	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	193b      	adds	r3, r7, r4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	f383 8810 	msr	PRIMASK, r3
}
 8004d46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d48:	f3ef 8310 	mrs	r3, PRIMASK
 8004d4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004d4e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d50:	2484      	movs	r4, #132	; 0x84
 8004d52:	193a      	adds	r2, r7, r4
 8004d54:	6013      	str	r3, [r2, #0]
 8004d56:	2301      	movs	r3, #1
 8004d58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	f383 8810 	msr	PRIMASK, r3
}
 8004d60:	46c0      	nop			; (mov r8, r8)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	2101      	movs	r1, #1
 8004d6e:	438a      	bics	r2, r1
 8004d70:	609a      	str	r2, [r3, #8]
 8004d72:	193b      	adds	r3, r7, r4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	f383 8810 	msr	PRIMASK, r3
}
 8004d7e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2280      	movs	r2, #128	; 0x80
 8004d84:	2120      	movs	r1, #32
 8004d86:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d94:	f3ef 8310 	mrs	r3, PRIMASK
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9c:	2480      	movs	r4, #128	; 0x80
 8004d9e:	193a      	adds	r2, r7, r4
 8004da0:	6013      	str	r3, [r2, #0]
 8004da2:	2301      	movs	r3, #1
 8004da4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da8:	f383 8810 	msr	PRIMASK, r3
}
 8004dac:	46c0      	nop			; (mov r8, r8)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	2110      	movs	r1, #16
 8004dba:	438a      	bics	r2, r1
 8004dbc:	601a      	str	r2, [r3, #0]
 8004dbe:	193b      	adds	r3, r7, r4
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dc6:	f383 8810 	msr	PRIMASK, r3
}
 8004dca:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dd2:	183b      	adds	r3, r7, r0
 8004dd4:	881a      	ldrh	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	0011      	movs	r1, r2
 8004dda:	0018      	movs	r0, r3
 8004ddc:	f000 f840 	bl	8004e60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004de0:	e02c      	b.n	8004e3c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004de2:	23a4      	movs	r3, #164	; 0xa4
 8004de4:	18fb      	adds	r3, r7, r3
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2280      	movs	r2, #128	; 0x80
 8004dea:	4013      	ands	r3, r2
 8004dec:	d00f      	beq.n	8004e0e <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004dee:	23a0      	movs	r3, #160	; 0xa0
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2280      	movs	r2, #128	; 0x80
 8004df6:	4013      	ands	r3, r2
 8004df8:	d009      	beq.n	8004e0e <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d01e      	beq.n	8004e40 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	0010      	movs	r0, r2
 8004e0a:	4798      	blx	r3
    }
    return;
 8004e0c:	e018      	b.n	8004e40 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004e0e:	23a4      	movs	r3, #164	; 0xa4
 8004e10:	18fb      	adds	r3, r7, r3
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2240      	movs	r2, #64	; 0x40
 8004e16:	4013      	ands	r3, r2
 8004e18:	d013      	beq.n	8004e42 <HAL_UART_IRQHandler+0x582>
 8004e1a:	23a0      	movs	r3, #160	; 0xa0
 8004e1c:	18fb      	adds	r3, r7, r3
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2240      	movs	r2, #64	; 0x40
 8004e22:	4013      	ands	r3, r2
 8004e24:	d00d      	beq.n	8004e42 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f000 fba6 	bl	800557a <UART_EndTransmit_IT>
    return;
 8004e2e:	e008      	b.n	8004e42 <HAL_UART_IRQHandler+0x582>
      return;
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	e006      	b.n	8004e42 <HAL_UART_IRQHandler+0x582>
    return;
 8004e34:	46c0      	nop			; (mov r8, r8)
 8004e36:	e004      	b.n	8004e42 <HAL_UART_IRQHandler+0x582>
      return;
 8004e38:	46c0      	nop			; (mov r8, r8)
 8004e3a:	e002      	b.n	8004e42 <HAL_UART_IRQHandler+0x582>
      return;
 8004e3c:	46c0      	nop			; (mov r8, r8)
 8004e3e:	e000      	b.n	8004e42 <HAL_UART_IRQHandler+0x582>
    return;
 8004e40:	46c0      	nop			; (mov r8, r8)
  }

}
 8004e42:	46bd      	mov	sp, r7
 8004e44:	b02b      	add	sp, #172	; 0xac
 8004e46:	bd90      	pop	{r4, r7, pc}
 8004e48:	fffffeff 	.word	0xfffffeff
 8004e4c:	fffffedf 	.word	0xfffffedf

08004e50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e58:	46c0      	nop			; (mov r8, r8)
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	b002      	add	sp, #8
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b082      	sub	sp, #8
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	000a      	movs	r2, r1
 8004e6a:	1cbb      	adds	r3, r7, #2
 8004e6c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e6e:	46c0      	nop			; (mov r8, r8)
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b002      	add	sp, #8
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e80:	231e      	movs	r3, #30
 8004e82:	18fb      	adds	r3, r7, r3
 8004e84:	2200      	movs	r2, #0
 8004e86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	431a      	orrs	r2, r3
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	695b      	ldr	r3, [r3, #20]
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a8d      	ldr	r2, [pc, #564]	; (80050dc <UART_SetConfig+0x264>)
 8004ea8:	4013      	ands	r3, r2
 8004eaa:	0019      	movs	r1, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	4a88      	ldr	r2, [pc, #544]	; (80050e0 <UART_SetConfig+0x268>)
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	0019      	movs	r1, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68da      	ldr	r2, [r3, #12]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	430a      	orrs	r2, r1
 8004ecc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	4a7f      	ldr	r2, [pc, #508]	; (80050e4 <UART_SetConfig+0x26c>)
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	0019      	movs	r1, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	697a      	ldr	r2, [r7, #20]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a7b      	ldr	r2, [pc, #492]	; (80050e8 <UART_SetConfig+0x270>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d127      	bne.n	8004f4e <UART_SetConfig+0xd6>
 8004efe:	4b7b      	ldr	r3, [pc, #492]	; (80050ec <UART_SetConfig+0x274>)
 8004f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f02:	2203      	movs	r2, #3
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d00d      	beq.n	8004f26 <UART_SetConfig+0xae>
 8004f0a:	d81b      	bhi.n	8004f44 <UART_SetConfig+0xcc>
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d014      	beq.n	8004f3a <UART_SetConfig+0xc2>
 8004f10:	d818      	bhi.n	8004f44 <UART_SetConfig+0xcc>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <UART_SetConfig+0xa4>
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d00a      	beq.n	8004f30 <UART_SetConfig+0xb8>
 8004f1a:	e013      	b.n	8004f44 <UART_SetConfig+0xcc>
 8004f1c:	231f      	movs	r3, #31
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	e021      	b.n	8004f6a <UART_SetConfig+0xf2>
 8004f26:	231f      	movs	r3, #31
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e01c      	b.n	8004f6a <UART_SetConfig+0xf2>
 8004f30:	231f      	movs	r3, #31
 8004f32:	18fb      	adds	r3, r7, r3
 8004f34:	2204      	movs	r2, #4
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	e017      	b.n	8004f6a <UART_SetConfig+0xf2>
 8004f3a:	231f      	movs	r3, #31
 8004f3c:	18fb      	adds	r3, r7, r3
 8004f3e:	2208      	movs	r2, #8
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	e012      	b.n	8004f6a <UART_SetConfig+0xf2>
 8004f44:	231f      	movs	r3, #31
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	2210      	movs	r2, #16
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	e00d      	b.n	8004f6a <UART_SetConfig+0xf2>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a67      	ldr	r2, [pc, #412]	; (80050f0 <UART_SetConfig+0x278>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d104      	bne.n	8004f62 <UART_SetConfig+0xea>
 8004f58:	231f      	movs	r3, #31
 8004f5a:	18fb      	adds	r3, r7, r3
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	701a      	strb	r2, [r3, #0]
 8004f60:	e003      	b.n	8004f6a <UART_SetConfig+0xf2>
 8004f62:	231f      	movs	r3, #31
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	2210      	movs	r2, #16
 8004f68:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69da      	ldr	r2, [r3, #28]
 8004f6e:	2380      	movs	r3, #128	; 0x80
 8004f70:	021b      	lsls	r3, r3, #8
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d15c      	bne.n	8005030 <UART_SetConfig+0x1b8>
  {
    switch (clocksource)
 8004f76:	231f      	movs	r3, #31
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b08      	cmp	r3, #8
 8004f7e:	d015      	beq.n	8004fac <UART_SetConfig+0x134>
 8004f80:	dc18      	bgt.n	8004fb4 <UART_SetConfig+0x13c>
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d00d      	beq.n	8004fa2 <UART_SetConfig+0x12a>
 8004f86:	dc15      	bgt.n	8004fb4 <UART_SetConfig+0x13c>
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <UART_SetConfig+0x11a>
 8004f8c:	2b02      	cmp	r3, #2
 8004f8e:	d005      	beq.n	8004f9c <UART_SetConfig+0x124>
 8004f90:	e010      	b.n	8004fb4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f92:	f7ff f923 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8004f96:	0003      	movs	r3, r0
 8004f98:	61bb      	str	r3, [r7, #24]
        break;
 8004f9a:	e012      	b.n	8004fc2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f9c:	4b55      	ldr	r3, [pc, #340]	; (80050f4 <UART_SetConfig+0x27c>)
 8004f9e:	61bb      	str	r3, [r7, #24]
        break;
 8004fa0:	e00f      	b.n	8004fc2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fa2:	f7ff f8bb 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8004fa6:	0003      	movs	r3, r0
 8004fa8:	61bb      	str	r3, [r7, #24]
        break;
 8004faa:	e00a      	b.n	8004fc2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fac:	2380      	movs	r3, #128	; 0x80
 8004fae:	021b      	lsls	r3, r3, #8
 8004fb0:	61bb      	str	r3, [r7, #24]
        break;
 8004fb2:	e006      	b.n	8004fc2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fb8:	231e      	movs	r3, #30
 8004fba:	18fb      	adds	r3, r7, r3
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	701a      	strb	r2, [r3, #0]
        break;
 8004fc0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d100      	bne.n	8004fca <UART_SetConfig+0x152>
 8004fc8:	e07a      	b.n	80050c0 <UART_SetConfig+0x248>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	005a      	lsls	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	085b      	lsrs	r3, r3, #1
 8004fd4:	18d2      	adds	r2, r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	0019      	movs	r1, r3
 8004fdc:	0010      	movs	r0, r2
 8004fde:	f7fb f893 	bl	8000108 <__udivsi3>
 8004fe2:	0003      	movs	r3, r0
 8004fe4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	2b0f      	cmp	r3, #15
 8004fea:	d91c      	bls.n	8005026 <UART_SetConfig+0x1ae>
 8004fec:	693a      	ldr	r2, [r7, #16]
 8004fee:	2380      	movs	r3, #128	; 0x80
 8004ff0:	025b      	lsls	r3, r3, #9
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d217      	bcs.n	8005026 <UART_SetConfig+0x1ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	b29a      	uxth	r2, r3
 8004ffa:	200e      	movs	r0, #14
 8004ffc:	183b      	adds	r3, r7, r0
 8004ffe:	210f      	movs	r1, #15
 8005000:	438a      	bics	r2, r1
 8005002:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	b29b      	uxth	r3, r3
 800500a:	2207      	movs	r2, #7
 800500c:	4013      	ands	r3, r2
 800500e:	b299      	uxth	r1, r3
 8005010:	183b      	adds	r3, r7, r0
 8005012:	183a      	adds	r2, r7, r0
 8005014:	8812      	ldrh	r2, [r2, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	183a      	adds	r2, r7, r0
 8005020:	8812      	ldrh	r2, [r2, #0]
 8005022:	60da      	str	r2, [r3, #12]
 8005024:	e04c      	b.n	80050c0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 8005026:	231e      	movs	r3, #30
 8005028:	18fb      	adds	r3, r7, r3
 800502a:	2201      	movs	r2, #1
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	e047      	b.n	80050c0 <UART_SetConfig+0x248>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005030:	231f      	movs	r3, #31
 8005032:	18fb      	adds	r3, r7, r3
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b08      	cmp	r3, #8
 8005038:	d015      	beq.n	8005066 <UART_SetConfig+0x1ee>
 800503a:	dc18      	bgt.n	800506e <UART_SetConfig+0x1f6>
 800503c:	2b04      	cmp	r3, #4
 800503e:	d00d      	beq.n	800505c <UART_SetConfig+0x1e4>
 8005040:	dc15      	bgt.n	800506e <UART_SetConfig+0x1f6>
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <UART_SetConfig+0x1d4>
 8005046:	2b02      	cmp	r3, #2
 8005048:	d005      	beq.n	8005056 <UART_SetConfig+0x1de>
 800504a:	e010      	b.n	800506e <UART_SetConfig+0x1f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800504c:	f7ff f8c6 	bl	80041dc <HAL_RCC_GetPCLK1Freq>
 8005050:	0003      	movs	r3, r0
 8005052:	61bb      	str	r3, [r7, #24]
        break;
 8005054:	e012      	b.n	800507c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005056:	4b27      	ldr	r3, [pc, #156]	; (80050f4 <UART_SetConfig+0x27c>)
 8005058:	61bb      	str	r3, [r7, #24]
        break;
 800505a:	e00f      	b.n	800507c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800505c:	f7ff f85e 	bl	800411c <HAL_RCC_GetSysClockFreq>
 8005060:	0003      	movs	r3, r0
 8005062:	61bb      	str	r3, [r7, #24]
        break;
 8005064:	e00a      	b.n	800507c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005066:	2380      	movs	r3, #128	; 0x80
 8005068:	021b      	lsls	r3, r3, #8
 800506a:	61bb      	str	r3, [r7, #24]
        break;
 800506c:	e006      	b.n	800507c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800506e:	2300      	movs	r3, #0
 8005070:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005072:	231e      	movs	r3, #30
 8005074:	18fb      	adds	r3, r7, r3
 8005076:	2201      	movs	r2, #1
 8005078:	701a      	strb	r2, [r3, #0]
        break;
 800507a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d01e      	beq.n	80050c0 <UART_SetConfig+0x248>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	085a      	lsrs	r2, r3, #1
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	18d2      	adds	r2, r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	0019      	movs	r1, r3
 8005092:	0010      	movs	r0, r2
 8005094:	f7fb f838 	bl	8000108 <__udivsi3>
 8005098:	0003      	movs	r3, r0
 800509a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	2b0f      	cmp	r3, #15
 80050a0:	d90a      	bls.n	80050b8 <UART_SetConfig+0x240>
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	2380      	movs	r3, #128	; 0x80
 80050a6:	025b      	lsls	r3, r3, #9
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d205      	bcs.n	80050b8 <UART_SetConfig+0x240>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	60da      	str	r2, [r3, #12]
 80050b6:	e003      	b.n	80050c0 <UART_SetConfig+0x248>
      }
      else
      {
        ret = HAL_ERROR;
 80050b8:	231e      	movs	r3, #30
 80050ba:	18fb      	adds	r3, r7, r3
 80050bc:	2201      	movs	r2, #1
 80050be:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2200      	movs	r2, #0
 80050c4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80050cc:	231e      	movs	r3, #30
 80050ce:	18fb      	adds	r3, r7, r3
 80050d0:	781b      	ldrb	r3, [r3, #0]
}
 80050d2:	0018      	movs	r0, r3
 80050d4:	46bd      	mov	sp, r7
 80050d6:	b008      	add	sp, #32
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	46c0      	nop			; (mov r8, r8)
 80050dc:	ffff69f3 	.word	0xffff69f3
 80050e0:	ffffcfff 	.word	0xffffcfff
 80050e4:	fffff4ff 	.word	0xfffff4ff
 80050e8:	40013800 	.word	0x40013800
 80050ec:	40021000 	.word	0x40021000
 80050f0:	40004400 	.word	0x40004400
 80050f4:	007a1200 	.word	0x007a1200

080050f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b082      	sub	sp, #8
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	2201      	movs	r2, #1
 8005106:	4013      	ands	r3, r2
 8005108:	d00b      	beq.n	8005122 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4a4a      	ldr	r2, [pc, #296]	; (800523c <UART_AdvFeatureConfig+0x144>)
 8005112:	4013      	ands	r3, r2
 8005114:	0019      	movs	r1, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005126:	2202      	movs	r2, #2
 8005128:	4013      	ands	r3, r2
 800512a:	d00b      	beq.n	8005144 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	4a43      	ldr	r2, [pc, #268]	; (8005240 <UART_AdvFeatureConfig+0x148>)
 8005134:	4013      	ands	r3, r2
 8005136:	0019      	movs	r1, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005148:	2204      	movs	r2, #4
 800514a:	4013      	ands	r3, r2
 800514c:	d00b      	beq.n	8005166 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	4a3b      	ldr	r2, [pc, #236]	; (8005244 <UART_AdvFeatureConfig+0x14c>)
 8005156:	4013      	ands	r3, r2
 8005158:	0019      	movs	r1, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	430a      	orrs	r2, r1
 8005164:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	2208      	movs	r2, #8
 800516c:	4013      	ands	r3, r2
 800516e:	d00b      	beq.n	8005188 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	4a34      	ldr	r2, [pc, #208]	; (8005248 <UART_AdvFeatureConfig+0x150>)
 8005178:	4013      	ands	r3, r2
 800517a:	0019      	movs	r1, r3
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800518c:	2210      	movs	r2, #16
 800518e:	4013      	ands	r3, r2
 8005190:	d00b      	beq.n	80051aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	4a2c      	ldr	r2, [pc, #176]	; (800524c <UART_AdvFeatureConfig+0x154>)
 800519a:	4013      	ands	r3, r2
 800519c:	0019      	movs	r1, r3
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ae:	2220      	movs	r2, #32
 80051b0:	4013      	ands	r3, r2
 80051b2:	d00b      	beq.n	80051cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	4a25      	ldr	r2, [pc, #148]	; (8005250 <UART_AdvFeatureConfig+0x158>)
 80051bc:	4013      	ands	r3, r2
 80051be:	0019      	movs	r1, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	2240      	movs	r2, #64	; 0x40
 80051d2:	4013      	ands	r3, r2
 80051d4:	d01d      	beq.n	8005212 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4a1d      	ldr	r2, [pc, #116]	; (8005254 <UART_AdvFeatureConfig+0x15c>)
 80051de:	4013      	ands	r3, r2
 80051e0:	0019      	movs	r1, r3
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051f2:	2380      	movs	r3, #128	; 0x80
 80051f4:	035b      	lsls	r3, r3, #13
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d10b      	bne.n	8005212 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	4a15      	ldr	r2, [pc, #84]	; (8005258 <UART_AdvFeatureConfig+0x160>)
 8005202:	4013      	ands	r3, r2
 8005204:	0019      	movs	r1, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005216:	2280      	movs	r2, #128	; 0x80
 8005218:	4013      	ands	r3, r2
 800521a:	d00b      	beq.n	8005234 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	4a0e      	ldr	r2, [pc, #56]	; (800525c <UART_AdvFeatureConfig+0x164>)
 8005224:	4013      	ands	r3, r2
 8005226:	0019      	movs	r1, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	605a      	str	r2, [r3, #4]
  }
}
 8005234:	46c0      	nop			; (mov r8, r8)
 8005236:	46bd      	mov	sp, r7
 8005238:	b002      	add	sp, #8
 800523a:	bd80      	pop	{r7, pc}
 800523c:	fffdffff 	.word	0xfffdffff
 8005240:	fffeffff 	.word	0xfffeffff
 8005244:	fffbffff 	.word	0xfffbffff
 8005248:	ffff7fff 	.word	0xffff7fff
 800524c:	ffffefff 	.word	0xffffefff
 8005250:	ffffdfff 	.word	0xffffdfff
 8005254:	ffefffff 	.word	0xffefffff
 8005258:	ff9fffff 	.word	0xff9fffff
 800525c:	fff7ffff 	.word	0xfff7ffff

08005260 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	b092      	sub	sp, #72	; 0x48
 8005264:	af02      	add	r7, sp, #8
 8005266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2284      	movs	r2, #132	; 0x84
 800526c:	2100      	movs	r1, #0
 800526e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005270:	f7fb ff92 	bl	8001198 <HAL_GetTick>
 8005274:	0003      	movs	r3, r0
 8005276:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2208      	movs	r2, #8
 8005280:	4013      	ands	r3, r2
 8005282:	2b08      	cmp	r3, #8
 8005284:	d12c      	bne.n	80052e0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005286:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005288:	2280      	movs	r2, #128	; 0x80
 800528a:	0391      	lsls	r1, r2, #14
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	4a46      	ldr	r2, [pc, #280]	; (80053a8 <UART_CheckIdleState+0x148>)
 8005290:	9200      	str	r2, [sp, #0]
 8005292:	2200      	movs	r2, #0
 8005294:	f000 f88c 	bl	80053b0 <UART_WaitOnFlagUntilTimeout>
 8005298:	1e03      	subs	r3, r0, #0
 800529a:	d021      	beq.n	80052e0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800529c:	f3ef 8310 	mrs	r3, PRIMASK
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80052a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80052a6:	2301      	movs	r3, #1
 80052a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ac:	f383 8810 	msr	PRIMASK, r3
}
 80052b0:	46c0      	nop			; (mov r8, r8)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	681a      	ldr	r2, [r3, #0]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2180      	movs	r1, #128	; 0x80
 80052be:	438a      	bics	r2, r1
 80052c0:	601a      	str	r2, [r3, #0]
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052c8:	f383 8810 	msr	PRIMASK, r3
}
 80052cc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2220      	movs	r2, #32
 80052d2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2278      	movs	r2, #120	; 0x78
 80052d8:	2100      	movs	r1, #0
 80052da:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052dc:	2303      	movs	r3, #3
 80052de:	e05f      	b.n	80053a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2204      	movs	r2, #4
 80052e8:	4013      	ands	r3, r2
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d146      	bne.n	800537c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f0:	2280      	movs	r2, #128	; 0x80
 80052f2:	03d1      	lsls	r1, r2, #15
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	4a2c      	ldr	r2, [pc, #176]	; (80053a8 <UART_CheckIdleState+0x148>)
 80052f8:	9200      	str	r2, [sp, #0]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f000 f858 	bl	80053b0 <UART_WaitOnFlagUntilTimeout>
 8005300:	1e03      	subs	r3, r0, #0
 8005302:	d03b      	beq.n	800537c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005304:	f3ef 8310 	mrs	r3, PRIMASK
 8005308:	60fb      	str	r3, [r7, #12]
  return(result);
 800530a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
 800530e:	2301      	movs	r3, #1
 8005310:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f383 8810 	msr	PRIMASK, r3
}
 8005318:	46c0      	nop			; (mov r8, r8)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4921      	ldr	r1, [pc, #132]	; (80053ac <UART_CheckIdleState+0x14c>)
 8005326:	400a      	ands	r2, r1
 8005328:	601a      	str	r2, [r3, #0]
 800532a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800532c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f383 8810 	msr	PRIMASK, r3
}
 8005334:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005336:	f3ef 8310 	mrs	r3, PRIMASK
 800533a:	61bb      	str	r3, [r7, #24]
  return(result);
 800533c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800533e:	633b      	str	r3, [r7, #48]	; 0x30
 8005340:	2301      	movs	r3, #1
 8005342:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	f383 8810 	msr	PRIMASK, r3
}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689a      	ldr	r2, [r3, #8]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2101      	movs	r1, #1
 8005358:	438a      	bics	r2, r1
 800535a:	609a      	str	r2, [r3, #8]
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005360:	6a3b      	ldr	r3, [r7, #32]
 8005362:	f383 8810 	msr	PRIMASK, r3
}
 8005366:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2280      	movs	r2, #128	; 0x80
 800536c:	2120      	movs	r1, #32
 800536e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2278      	movs	r2, #120	; 0x78
 8005374:	2100      	movs	r1, #0
 8005376:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005378:	2303      	movs	r3, #3
 800537a:	e011      	b.n	80053a0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2220      	movs	r2, #32
 8005380:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2280      	movs	r2, #128	; 0x80
 8005386:	2120      	movs	r1, #32
 8005388:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2278      	movs	r2, #120	; 0x78
 800539a:	2100      	movs	r1, #0
 800539c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800539e:	2300      	movs	r3, #0
}
 80053a0:	0018      	movs	r0, r3
 80053a2:	46bd      	mov	sp, r7
 80053a4:	b010      	add	sp, #64	; 0x40
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	01ffffff 	.word	0x01ffffff
 80053ac:	fffffedf 	.word	0xfffffedf

080053b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	1dfb      	adds	r3, r7, #7
 80053be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c0:	e04b      	b.n	800545a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	3301      	adds	r3, #1
 80053c6:	d048      	beq.n	800545a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c8:	f7fb fee6 	bl	8001198 <HAL_GetTick>
 80053cc:	0002      	movs	r2, r0
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d302      	bcc.n	80053de <UART_WaitOnFlagUntilTimeout+0x2e>
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e04b      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2204      	movs	r2, #4
 80053ea:	4013      	ands	r3, r2
 80053ec:	d035      	beq.n	800545a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	2208      	movs	r2, #8
 80053f6:	4013      	ands	r3, r2
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d111      	bne.n	8005420 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2208      	movs	r2, #8
 8005402:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	0018      	movs	r0, r3
 8005408:	f000 f83c 	bl	8005484 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2284      	movs	r2, #132	; 0x84
 8005410:	2108      	movs	r1, #8
 8005412:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2278      	movs	r2, #120	; 0x78
 8005418:	2100      	movs	r1, #0
 800541a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e02c      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	69da      	ldr	r2, [r3, #28]
 8005426:	2380      	movs	r3, #128	; 0x80
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	401a      	ands	r2, r3
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	429a      	cmp	r2, r3
 8005432:	d112      	bne.n	800545a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	2280      	movs	r2, #128	; 0x80
 800543a:	0112      	lsls	r2, r2, #4
 800543c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	0018      	movs	r0, r3
 8005442:	f000 f81f 	bl	8005484 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2284      	movs	r2, #132	; 0x84
 800544a:	2120      	movs	r1, #32
 800544c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2278      	movs	r2, #120	; 0x78
 8005452:	2100      	movs	r1, #0
 8005454:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e00f      	b.n	800547a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69db      	ldr	r3, [r3, #28]
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	4013      	ands	r3, r2
 8005464:	68ba      	ldr	r2, [r7, #8]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	425a      	negs	r2, r3
 800546a:	4153      	adcs	r3, r2
 800546c:	b2db      	uxtb	r3, r3
 800546e:	001a      	movs	r2, r3
 8005470:	1dfb      	adds	r3, r7, #7
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	429a      	cmp	r2, r3
 8005476:	d0a4      	beq.n	80053c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	0018      	movs	r0, r3
 800547c:	46bd      	mov	sp, r7
 800547e:	b004      	add	sp, #16
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08e      	sub	sp, #56	; 0x38
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800548c:	f3ef 8310 	mrs	r3, PRIMASK
 8005490:	617b      	str	r3, [r7, #20]
  return(result);
 8005492:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
 8005496:	2301      	movs	r3, #1
 8005498:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	f383 8810 	msr	PRIMASK, r3
}
 80054a0:	46c0      	nop			; (mov r8, r8)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4926      	ldr	r1, [pc, #152]	; (8005548 <UART_EndRxTransfer+0xc4>)
 80054ae:	400a      	ands	r2, r1
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b6:	69fb      	ldr	r3, [r7, #28]
 80054b8:	f383 8810 	msr	PRIMASK, r3
}
 80054bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054be:	f3ef 8310 	mrs	r3, PRIMASK
 80054c2:	623b      	str	r3, [r7, #32]
  return(result);
 80054c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c6:	633b      	str	r3, [r7, #48]	; 0x30
 80054c8:	2301      	movs	r3, #1
 80054ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	f383 8810 	msr	PRIMASK, r3
}
 80054d2:	46c0      	nop			; (mov r8, r8)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689a      	ldr	r2, [r3, #8]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2101      	movs	r1, #1
 80054e0:	438a      	bics	r2, r1
 80054e2:	609a      	str	r2, [r3, #8]
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054ea:	f383 8810 	msr	PRIMASK, r3
}
 80054ee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d118      	bne.n	800552a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f8:	f3ef 8310 	mrs	r3, PRIMASK
 80054fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80054fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005502:	2301      	movs	r3, #1
 8005504:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f383 8810 	msr	PRIMASK, r3
}
 800550c:	46c0      	nop			; (mov r8, r8)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2110      	movs	r1, #16
 800551a:	438a      	bics	r2, r1
 800551c:	601a      	str	r2, [r3, #0]
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f383 8810 	msr	PRIMASK, r3
}
 8005528:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2280      	movs	r2, #128	; 0x80
 800552e:	2120      	movs	r1, #32
 8005530:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800553e:	46c0      	nop			; (mov r8, r8)
 8005540:	46bd      	mov	sp, r7
 8005542:	b00e      	add	sp, #56	; 0x38
 8005544:	bd80      	pop	{r7, pc}
 8005546:	46c0      	nop			; (mov r8, r8)
 8005548:	fffffedf 	.word	0xfffffedf

0800554c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005558:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	225a      	movs	r2, #90	; 0x5a
 800555e:	2100      	movs	r1, #0
 8005560:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2252      	movs	r2, #82	; 0x52
 8005566:	2100      	movs	r1, #0
 8005568:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	0018      	movs	r0, r3
 800556e:	f7ff fc6f 	bl	8004e50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005572:	46c0      	nop			; (mov r8, r8)
 8005574:	46bd      	mov	sp, r7
 8005576:	b004      	add	sp, #16
 8005578:	bd80      	pop	{r7, pc}

0800557a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800557a:	b580      	push	{r7, lr}
 800557c:	b086      	sub	sp, #24
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005582:	f3ef 8310 	mrs	r3, PRIMASK
 8005586:	60bb      	str	r3, [r7, #8]
  return(result);
 8005588:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	2301      	movs	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f383 8810 	msr	PRIMASK, r3
}
 8005596:	46c0      	nop			; (mov r8, r8)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2140      	movs	r1, #64	; 0x40
 80055a4:	438a      	bics	r2, r1
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	f383 8810 	msr	PRIMASK, r3
}
 80055b2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2220      	movs	r2, #32
 80055b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	0018      	movs	r0, r3
 80055c4:	f7fb fb96 	bl	8000cf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80055c8:	46c0      	nop			; (mov r8, r8)
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b006      	add	sp, #24
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <__libc_init_array>:
 80055d0:	b570      	push	{r4, r5, r6, lr}
 80055d2:	2600      	movs	r6, #0
 80055d4:	4d0c      	ldr	r5, [pc, #48]	; (8005608 <__libc_init_array+0x38>)
 80055d6:	4c0d      	ldr	r4, [pc, #52]	; (800560c <__libc_init_array+0x3c>)
 80055d8:	1b64      	subs	r4, r4, r5
 80055da:	10a4      	asrs	r4, r4, #2
 80055dc:	42a6      	cmp	r6, r4
 80055de:	d109      	bne.n	80055f4 <__libc_init_array+0x24>
 80055e0:	2600      	movs	r6, #0
 80055e2:	f000 f821 	bl	8005628 <_init>
 80055e6:	4d0a      	ldr	r5, [pc, #40]	; (8005610 <__libc_init_array+0x40>)
 80055e8:	4c0a      	ldr	r4, [pc, #40]	; (8005614 <__libc_init_array+0x44>)
 80055ea:	1b64      	subs	r4, r4, r5
 80055ec:	10a4      	asrs	r4, r4, #2
 80055ee:	42a6      	cmp	r6, r4
 80055f0:	d105      	bne.n	80055fe <__libc_init_array+0x2e>
 80055f2:	bd70      	pop	{r4, r5, r6, pc}
 80055f4:	00b3      	lsls	r3, r6, #2
 80055f6:	58eb      	ldr	r3, [r5, r3]
 80055f8:	4798      	blx	r3
 80055fa:	3601      	adds	r6, #1
 80055fc:	e7ee      	b.n	80055dc <__libc_init_array+0xc>
 80055fe:	00b3      	lsls	r3, r6, #2
 8005600:	58eb      	ldr	r3, [r5, r3]
 8005602:	4798      	blx	r3
 8005604:	3601      	adds	r6, #1
 8005606:	e7f2      	b.n	80055ee <__libc_init_array+0x1e>
 8005608:	080056ac 	.word	0x080056ac
 800560c:	080056ac 	.word	0x080056ac
 8005610:	080056ac 	.word	0x080056ac
 8005614:	080056b0 	.word	0x080056b0

08005618 <memset>:
 8005618:	0003      	movs	r3, r0
 800561a:	1882      	adds	r2, r0, r2
 800561c:	4293      	cmp	r3, r2
 800561e:	d100      	bne.n	8005622 <memset+0xa>
 8005620:	4770      	bx	lr
 8005622:	7019      	strb	r1, [r3, #0]
 8005624:	3301      	adds	r3, #1
 8005626:	e7f9      	b.n	800561c <memset+0x4>

08005628 <_init>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr

08005634 <_fini>:
 8005634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005636:	46c0      	nop			; (mov r8, r8)
 8005638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563a:	bc08      	pop	{r3}
 800563c:	469e      	mov	lr, r3
 800563e:	4770      	bx	lr
